angular.module("app",["ngRoute","ngAnimate","ui.slider"]),angular.module("app").controller("ApplicationCtrl",["SessionSvc","UtilSvc","ConfigSvc","$rootScope","$scope","$window","$http","$timeout",function(t,e,o,n,a,i,l,s){"undefined"!=window.localStorage.guid&&"null"!=window.localStorage.guid&&window.localStorage.guid||(window.localStorage.guid=e.getGuid()),a.guid=window.localStorage.guid,"undefined"!=window.localStorage.guidtgt&&"null"!=window.localStorage.guidtgt&&window.localStorage.guidtgt||(window.localStorage.guidtgt="0"),a.guidtgt=window.localStorage.guidtgt,a.pageId={post:0},a.navCollapsed=!0,a.timevalue=o.maxInstantLifeSpan,a.userLocation={lat:0,lon:0},a.toggleSearchLocation=!1,a.toggleTimeSlider=!1,s(function(){document.getElementById("map-posting").onkeypress=function(t){"13"==t.which&&$("form#map-posting-form").submit()},document.getElementById("map-posting").onfocus=function(t){console.log("on focus"),a.toggleTimeSlider=!0},document.getElementById("map-posting").onblur=function(t){console.log("on blur"),a.toggleTimeSlider=!1},$(".nav-burger").click(function(){$(".nav-burger").toggleClass("active"),a.toggleSearchLocation=!a.toggleSearchLocation,a.$apply()})});var r,c=document.location.hostname;r=c==o.local?o.web_socket+o.local+":"+o.port:c==o.local_ip?o.web_socket+o.local_ip+":"+o.port:o.web_socket_secure+o.deploy_dns;var g=function(){connection=new WebSocket(r),connection.onopen=function(){function e(e){var o=e.coords,n=new google.maps.LatLng(o.latitude,o.longitude);a.userLocation={lat:o.latitude,lon:o.longitude};var i={lat:n.lat(),lon:n.lng()},l=JSON.stringify(i),s=a.map.getBounds(),r=s.getNorthEast(),c=s.getSouthWest(),g={lat:r.lat(),lon:c.lng()},u={lat:c.lat(),lon:r.lng()},p={lat:window.localStorage.latitude,lon:window.localStorage.longitude},d={nw_lat:g.lat,nw_lon:g.lon,se_lat:u.lat,se_lon:u.lon,center_lat:p.lat,center_lon:p.lon},m=JSON.stringify(d),f={guidtgt:a.guidtgt,guid:a.guid,location:l,watchloc:m};t.enter(f)}function o(t){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+t.code+"): "+t.message)}connection.send(a.guid),navigator.geolocation.getCurrentPosition(e,o),console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),s(g,2e3)},connection.onmessage=function(t){var e=JSON.parse(t.data);console.log("ws:"+e.type),n.$broadcast("ws:"+e.type,e.data)}};g(),a.$on("ws:new_post",function(t,e){a.map.updateAndDrawPosts(),e.guid==a.guid&&a.map.drawResponses(e)}),a.$on("ws:new_session",function(t,e){var o=angular.fromJson(e.location);a.map.drawCurrLocationMarker(o)}),a.$on("ws:remove_post",function(t,e){a.map.unDrawPost(e)}),a.$on("ws:update_guidtgt",function(t,e){a.map.updateAndDrawPosts()}),a.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},a.moveToCurrentLocation=function(){function t(t){if(a.currentPageId==a.pageId.post){var e=t.coords;window.localStorage.latitude=e.latitude,window.localStorage.longitude=e.longitude;var o={lat:e.latitude,lon:e.longitude};a.map.drawCurrLocationMarker(o),a.map.drawXMarker(o);var n=new google.maps.LatLng(o.lat,o.lon);a.map.panTo(n),a.map.setZoom(15)}}function e(t){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+t.code+"): "+t.message)}navigator.geolocation.getCurrentPosition(t,e),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},a.moveToPostLocation=function(){var t=0;if(a.isMobile()){var e=a.map.getBounds(),o=e.getNorthEast(),n=e.getSouthWest();current_map_nw=new google.maps.LatLng(o.lat(),n.lng()),current_map_se=new google.maps.LatLng(n.lat(),o.lng());var i=.5*Math.abs(a.postLocation.lat-current_map_nw.lat()),l=.5*Math.abs(a.postLocation.lat-current_map_se.lat());t=i>l?l:i}var s=new google.maps.LatLng(a.postLocation.lat+t,a.postLocation.lon);a.map.panTo(s)},a.collapse=function(){a.navCollapsed=!0},a.$on("set:map",function(t,e){a.map=e}),a.$on("set:guidtgt",function(t,e){a.guidtgt=e,window.localStorage.guidtgt=e}),a.$on("set:pagechange",function(t,e){a.currentPageId=e}),a.$on("set:loc",function(t,e){var o=e.lat(),n=e.lng();a.postLocation={lat:o,lon:n}}),a.$on("set:place",function(t,e){a.$apply(function(){a.postplace=e})})}]),angular.module("app").constant("ConfigSvc",{web_socket:"ws://",web_socket_secure:"wss://",local:"localhost",local_ip:"192.168.0.4",deploy_dns:"cloudtalk.herokuapp.com",port:"5000",maxInstantLifeSpan:5e3}),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var t=this;t.deg2rad=function(t){return t*(Math.PI/180)},t.getDistanceFromLatLonInKm=function(e,o,n,a){var i=6371,l=t.deg2rad(n-e),s=t.deg2rad(a-o),r=Math.sin(l/2)*Math.sin(l/2)+Math.cos(t.deg2rad(e))*Math.cos(t.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),c=2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),g=i*c;return g},t.mapRange=function(t,e,o,n,a){return n+(a-n)*(t-e)/(o-e)},t.getGuid=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()}}),angular.module("app").run(["$rootScope","$timeout","SessionSvc",function(t,e,o){}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","ConfigSvc","SessionSvc","$compile","$timeout",function(t,e,o,n,a,i){var l=function(e,o,l){function s(){window.localStorage.latitude=E.getCenter().lat(),window.localStorage.longitude=E.getCenter().lng()}function r(){var t=E.getBounds(),e=t.getNorthEast(),o=t.getSouthWest();x=new google.maps.LatLng(e.lat(),o.lng()),R=new google.maps.LatLng(o.lat(),e.lng())}function c(){var t=E.getBounds(),o=t.getNorthEast(),a=t.getSouthWest();x={lat:o.lat(),lon:a.lng()},R={lat:a.lat(),lon:o.lng()};var i;i=e.postLocation.lat<x.lat&&e.postLocation.lat>R.lat&&e.postLocation.lon<R.lon&&e.postLocation.lon>x.lon?{lat:e.postLocation.lat,lon:e.postLocation.lon}:{lat:E.getCenter().lat(),lon:E.getCenter().lng()},n.updateWatchLocation(x,R,i,e.guid)}function g(t){n.fetch().success(function(o){for(var n=0;n<o.length;n++){var a=o[n];if(a.guid!=e.guid){var l=angular.fromJson(a.watchloc),s=angular.fromJson(t.location);if(r(),l.center_lat<x.lat()&&l.center_lat>R.lat()&&l.center_lon<R.lng()&&l.center_lon>x.lng()&&s.lat<l.nw_lat&&s.lat>l.se_lat&&s.lon<l.se_lon&&s.lon>l.nw_lon){var c=new google.maps.LatLng(l.center_lat,l.center_lon),g={position:c,map:E,title:"UserPin",icon:X,optimized:!1},u=new google.maps.Marker(g),p=1800;i(function(t){return function(){t.setMap(null)}}(u),p)}}}})}function u(){U=J!=e.guidtgt,J=e.guidtgt,t.fetch().success(function(o){for(var n=0;n<o.length;n++){var i=o[n],l=angular.fromJson(i.location),s=new google.maps.LatLng(l.lat,l.lon);if(r(),s.lat()<x.lat()&&s.lat()>R.lat()&&s.lng()<R.lng()&&s.lng()>x.lng()){for(var c,g=0;c=G[g];g++){var u=i._id==c.post._id;if(u){if(U){d(i._id);break}if(c.post.guidtgt==i.guidtgt){i=null;break}d(i._id);break}}if(null!=i){var p={position:s,map:E,title:"Bubble",icon:q},c=new google.maps.Marker(p);G.push({marker:c,post:i});var m=v(i.guid,i.guidtgt),f=i.islocal,w=e,h=w.$new(!0),y=function(o,n,i,l,s){return function(){var r={pixelOffset:new google.maps.Size(-39.5,16),disableAutoPan:!0},c=new google.maps.InfoWindow(r),g=new Date,u=g.getTime(),p=i.lifeend-u>=0?i.lifeend-u:0,d=(p/i.lifespan).toFixed(2);n.msg=i.body,n.postlife=p,n.postguid=i.guid,n.postguidtgt=i.guidtgt,n.postcouplestatus=l,n.postlifepercentage=d,n.postlocalstatus=s;var m="<div map-msg></div>",f=a(m)(n);c.setContent(f[0]),google.maps.event.addListener(c,"closeclick",function(){i.guid==e.guid&&swal({title:"Are you sure?",text:"You will not be able to recover this imaginary file!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",closeOnConfirm:!1},function(e){e?(t.remove(i),swal("Deleted!","Your imaginary file has been deleted.","success")):c.open(E,o)})}),c.open(E,o)}}(c,h,i,m,f);y()}}}})}function p(t){var e=new google.maps.LatLng(t.lat,t.lon);if(r(),e.lat()<x.lat()&&e.lat()>R.lat()&&e.lng()<R.lng()&&e.lng()>x.lng()){var o={position:e,map:E,animation:google.maps.Animation.DROP,title:"UserPin",icon:j},n=new google.maps.Marker(o);i(function(t){return function(){t.setMap(null)}}(n),2e3)}}function d(t){for(var e,o=0;e=G[o];o++)if(t==e.post._id){e.marker.setMap(null),G.splice(o,1);break}}function m(t){var e=new google.maps.LatLng(t.lat,t.lon);f(e),w(e),c()}function f(t){for(var e,o=0;e=F[o];o++)e.setMap(null);F=[];var e=new google.maps.Marker({position:t,map:E,icon:Y});F.push(e)}function w(t){e.$emit("set:loc",t);var o=new google.maps.Geocoder;o.geocode({latLng:t},function(t,o){try{e.$emit("set:place",t[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),e.$emit("set:place","Location does not exists")}})}function v(t,o){var n=e.guidtgt==t,a=e.guid==o,i=e.guid==t,l="0"!=e.guidtgt;return i&&l?2:n&&a?4:n&&!a?1:!n&&a?2:0}function h(){var t=document.getElementById("map-search-toggle");E.controls[google.maps.ControlPosition.TOP_LEFT].push(t)}function y(){var t=document.getElementById("map-btn-curr");E.controls[google.maps.ControlPosition.TOP_RIGHT].push(t)}function _(){var t=document.getElementById("map-posting");E.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function S(){var t=document.getElementById("map-btn-submit");E.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function L(){var t=document.getElementById("map-time-slider");E.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function b(){var t=document.getElementById("pac-input");E.controls[google.maps.ControlPosition.TOP_LEFT].push(t);var e=new google.maps.places.SearchBox(t);google.maps.event.addListener(e,"places_changed",function(){var t=e.getPlaces();if(0!=t.length){var o=t[0],n={lat:o.geometry.location.lat(),lon:o.geometry.location.lng()};m(n),window.localStorage.latitude=o.geometry.location.latitude,window.localStorage.longitude=o.geometry.location.longitude,E.panTo(o.geometry.location),E.setZoom(16)}})}function k(){google.maps.event.addListener(O,"click",function(t){var e={lat:t.latLng.lat(),lon:t.latLng.lng()};m(e)})}function T(){google.maps.event.addListener(O,"center_changed",function(){s()})}function P(){google.maps.event.addListener(O,"bounds_changed",function(){r()})}function C(){google.maps.event.addListener(O,"dragend",function(){u(),c()})}function M(){google.maps.event.addListener(O,"resize",function(){u(),c()})}function $(){google.maps.event.addListener(O,"zoom_changed",function(){u(),c()})}function A(){D=new google.maps.LatLng(34.05,-118.24),isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(D=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),w(D),N={center:D,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,W]},mapTypeId:W}}function I(){function t(t){}function e(t){google.maps.event.trigger(this,"drawXMarker",t)}function n(t){google.maps.event.trigger(this,"drawCurrLocationMarker",t)}function a(){google.maps.event.trigger(this,"updateAndDrawPosts")}function i(t){google.maps.event.trigger(this,"drawResponses",t)}function l(t){google.maps.event.trigger(this,"unDrawPost",t)}O=new google.maps.Map(o[0],N),t.prototype=O,t.prototype.drawXMarker=e,t.prototype.drawCurrLocationMarker=n,t.prototype.updateAndDrawPosts=a,t.prototype.drawResponses=i,t.prototype.unDrawPost=l,E=new t,google.maps.event.addListener(E,"drawXMarker",function(t){m(t)}),google.maps.event.addListener(E,"drawCurrLocationMarker",function(t){p(t)}),google.maps.event.addListener(E,"updateAndDrawPosts",function(){u()}),google.maps.event.addListener(E,"drawResponses",function(t){g(t)}),google.maps.event.addListener(E,"unDrawPost",function(t){d(t)})}function B(){var t=[{featureType:"water",elementType:"all",stylers:[{hue:"#7fc8ed"},{saturation:55},{lightness:-6},{visibility:"on"}]},{featureType:"water",elementType:"labels",stylers:[{hue:"#7fc8ed"},{saturation:55},{lightness:-6},{visibility:"off"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{hue:"#83cead"},{saturation:1},{lightness:-15},{visibility:"on"}]},{featureType:"landscape",elementType:"geometry",stylers:[{hue:"#f3f4f4"},{saturation:-84},{lightness:59},{visibility:"on"}]},{featureType:"landscape",elementType:"labels",stylers:[{hue:"#ffffff"},{saturation:-100},{lightness:100},{visibility:"off"}]},{featureType:"road",elementType:"geometry",stylers:[{hue:"#ffffff"},{saturation:-100},{lightness:100},{visibility:"on"}]},{featureType:"road",elementType:"labels",stylers:[{hue:"#bbbbbb"},{saturation:-100},{lightness:26},{visibility:"on"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{hue:"#ffcc00"},{saturation:100},{lightness:-35},{visibility:"simplified"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{hue:"#ffcc00"},{saturation:100},{lightness:-22},{visibility:"on"}]},{featureType:"poi.school",elementType:"all",stylers:[{hue:"#d7e4e4"},{saturation:-60},{lightness:23},{visibility:"on"}]}],e={name:"Custom Style"},o=new google.maps.StyledMapType(t,e);E.mapTypes.set(W,o)}function z(){void 0===E&&(A(),I(),B()),e.$emit("set:map",E),h(),b(),y(),_(),S(),L(),k(),T(),C(),M(),$(),P(),i(function(){s(),r(),c(),u()},800)}var E,O,x,R,N,D,U,W="custom_style",F=[],G=[],J="0",q={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},Y={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},j={url:"http://www.clker.com/cliparts/q/o/2/K/g/V/location-symbol-map-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)},X={url:"http://2.bp.blogspot.com/-djMa_n5nAEM/T1Gvx_-7-zI/AAAAAAAAAQ4/-1N6lleQvZc/s1600/blinking_dot.gif",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(10,10),scaledSize:new google.maps.Size(17,17)};z()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:l}}]),angular.module("app").directive("mapMsg",["$timeout","SessionSvc","PostsSvc",function(t,e,o){var n=function(n,a,i){function l(){var t=n.postguid,i=n.$parent.guid,l=n.$parent.guidtgt;a.children().on("click",function(){var a=t;if(t==i){if("0"==n.$parent.guidtgt)return;a="0"}t==l&&(a="0"),n.$emit("set:guidtgt",a),e.updateCoupling(i,a).then(function(t){});var s={guid:i,guidtgt:a};o.updateGuidtgt(s).then(function(t){})})}function s(){{var t=n.postlife+"ms",e=a.children().children(".postlifebar");e.css("-webkit-animation-duration",t)}if(n.postlifepercentage>.95){e.css("-webkit-animation-name","postlifeanim_a"),e.css("animation-name","postlifeanim_a")}else if(n.postlifepercentage<=.95&&n.postlifepercentage>.9){e.css("-webkit-animation-name","postlifeanim_b"),e.css("animation-name","postlifeanim_b")}else if(n.postlifepercentage<=.9&&n.postlifepercentage>.85){e.css("-webkit-animation-name","postlifeanim_c"),e.css("animation-name","postlifeanim_c")}else if(n.postlifepercentage<=.85&&n.postlifepercentage>.75){e.css("-webkit-animation-name","postlifeanim_d"),e.css("animation-name","postlifeanim_d")}else if(n.postlifepercentage<=.75&&n.postlifepercentage>.6){e.css("-webkit-animation-name","postlifeanim_e"),e.css("animation-name","postlifeanim_e")}else if(n.postlifepercentage<=.6&&n.postlifepercentage>.5){e.css("-webkit-animation-name","postlifeanim_f"),e.css("animation-name","postlifeanim_f")}else if(n.postlifepercentage<=.5&&n.postlifepercentage>.3){e.css("-webkit-animation-name","postlifeanim_g"),e.css("animation-name","postlifeanim_g")}else if(n.postlifepercentage<=.3&&n.postlifepercentage>.2){e.css("-webkit-animation-name","postlifeanim_h"),e.css("animation-name","postlifeanim_h")}else if(n.postlifepercentage<=.2&&n.postlifepercentage>.1){e.css("-webkit-animation-name","postlifeanim_i"),e.css("animation-name","postlifeanim_i")}else{e.css("-webkit-animation-name","postlifeanim_j"),e.css("animation-name","postlifeanim_j")}}function r(){var t=$(".gm-style-iw"),e=t.prev();e.children(":nth-child(2)").css({display:"none"}),e.children(":nth-child(4)").css({display:"none"}),e.children(":nth-child(3)").find("div").children().css({"box-shadow":"0 1px 6px rgba(178, 178, 178, 0.6)","z-index":"1",border:"0px"})}function c(){var t=$(".gm-style-iw"),e=t.next();e.css({opacity:"0.8",right:"20px",top:"20px"})}n.get_coupling=function(t){return 4==t?"coupling coupling-couple":1==t?"coupling coupling-ilikeyou":2==t?"coupling coupling-youlikei":"coupling coupling-none"},angular.element(document).ready(function(){t(l,100),t(s,10),t(r,10),t(c,10)})};return{restrict:"A",templateUrl:"./templates/window.html",link:n}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","ConfigSvc","PostsSvc","UtilSvc","$window","$document","$timeout",function(t,e,o,n,a,i,l,s){e.$emit("set:pagechange",e.pageId.post),e.posts=[],e.$on("ws:new_post",function(t,o){e.requestFetch()}),e.addPost=function(){if(!e.content)return void console.log("User attempted to post with 0 words.");var t,i=e.postplace,l=e.postLocation,s=a.getDistanceFromLatLonInKm(l.lat,l.lon,e.userLocation.lat,e.userLocation.lon);console.log("post location from user location : ",s),3>s?(console.log("postLocationFromUserLocation < 3",3>s),t=!0):(console.log("postLocationFromUserLocation < 3",3>s),t=!1);var r,c=JSON.stringify(l);if(e.timevalue<=o.maxInstantLifeSpan){var g=e.content.length;r=5>g?4e3:g*a.mapRange(g,5,20,700,400)}else r=e.timevalue;n.create({body:e.content,location:c,place:i,guid:e.guid,guidtgt:e.guidtgt,lifespan:r,islocal:t}).success(function(t){e.content=null}).error(function(t,e){swal("Post failed","Please complete the from correctly","error")})},e.requestFetch=function(){n.fetch().success(function(t){e.posts=t})},e.updateGuidtgt=function(t,e){var o={guid:t,guidtgt:e};console.log("udpate to post guidtgt:",o),n.updateGuidtgt(o)}}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(e){return t.get("/api/posts",e)},this.create=function(e){return t.post("/api/posts",e)},this.remove=function(e){return t.post("/api/posts/posts_delete",e)},this.updateGuidtgt=function(e){return t.post("/api/posts/update_guidtgt",e)}}]),angular.module("app").service("SessionSvc",["$http",function(t){this.fetch=function(){return t.get("/api/sessions")},this.enter=function(e){return t.post("/api/sessions",e)},this.remove=function(e){var o={guid:e};return t.put("/api/sessions",o)},this.updateWatchLocation=function(e,o,n,a){var i={nw_lat:e.lat,nw_lon:e.lon,se_lat:o.lat,se_lon:o.lon,center_lat:n.lat,center_lon:n.lon},l=JSON.stringify(i),s={watchloc:l,guid:a};return console.log("updating watch location"),t.post("/api/sessions/update_session",s)},this.updateCoupling=function(e,o){var n={guid:e,guidtgt:o};return console.log("updating coupling"),t.post("/api/sessions/update_coupling",n)}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJjb25maWcuc3ZjLmpzIiwicm91dGVzLmpzIiwidXRpbC5zdmMuanMiLCJnZW5lcmFsL21haW4uanMiLCJtYXBzL21hcC5kaXJlY3RpdmUuanMiLCJtYXBzL21zZy5kaXJlY3RpdmUuanMiLCJwb3N0cy9wb3N0cy5jdHJsLmpzIiwicG9zdHMvcG9zdHMuc3ZjLmpzIiwic2Vzc2lvbnMvc2Vzc2lvbnMuc3ZjLmpzIiwic29ja2V0cy93ZWJzb2NrZXRzLmpzIiwiYXBwLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiU2Vzc2lvblN2YyIsIlV0aWxTdmMiLCJDb25maWdTdmMiLCIkcm9vdFNjb3BlIiwiJHNjb3BlIiwiJHdpbmRvdyIsIiRodHRwIiwiJHRpbWVvdXQiLCJ3aW5kb3ciLCJsb2NhbFN0b3JhZ2UiLCJndWlkIiwiZ2V0R3VpZCIsImd1aWR0Z3QiLCJwYWdlSWQiLCJwb3N0IiwibmF2Q29sbGFwc2VkIiwidGltZXZhbHVlIiwibWF4SW5zdGFudExpZmVTcGFuIiwidXNlckxvY2F0aW9uIiwibGF0IiwibG9uIiwidG9nZ2xlU2VhcmNoTG9jYXRpb24iLCJ0b2dnbGVUaW1lU2xpZGVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm9ua2V5cHJlc3MiLCJldmVudCIsIndoaWNoIiwiJCIsInN1Ym1pdCIsIm9uZm9jdXMiLCJjb25zb2xlIiwibG9nIiwib25ibHVyIiwiY2xpY2siLCJ0b2dnbGVDbGFzcyIsIiRhcHBseSIsInVybCIsImhvc3RuYW1lIiwibG9jYXRpb24iLCJsb2NhbCIsIndlYl9zb2NrZXQiLCJwb3J0IiwibG9jYWxfaXAiLCJ3ZWJfc29ja2V0X3NlY3VyZSIsImRlcGxveV9kbnMiLCJjb25uZWN0IiwiY29ubmVjdGlvbiIsIldlYlNvY2tldCIsIm9ub3BlbiIsImdldEN1cnJMb2NTdWNjZXNzIiwicG9zIiwiY3JkIiwiY29vcmRzIiwiZ29vZ2xlTG9jIiwiZ29vZ2xlIiwibWFwcyIsIkxhdExuZyIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwibG5nIiwibG9jYXRpb25KU09OIiwiSlNPTiIsInN0cmluZ2lmeSIsImJvdW5kcyIsIm1hcCIsImdldEJvdW5kcyIsIm5lIiwiZ2V0Tm9ydGhFYXN0Iiwic3ciLCJnZXRTb3V0aFdlc3QiLCJjdXJyZW50X21hcF9udyIsImN1cnJlbnRfbWFwX3NlIiwiY3VycmVudF9tYXBfY2VudGVyIiwid2F0Y2hsb2MiLCJud19sYXQiLCJud19sb24iLCJzZV9sYXQiLCJzZV9sb24iLCJjZW50ZXJfbGF0IiwiY2VudGVyX2xvbiIsIndhdGNobG9jSlNPTiIsInNlc3Npb24iLCJlbnRlciIsImdldEN1cnJMb2NFcnJvciIsImVyciIsInN3YWwiLCJ3YXJuIiwiY29kZSIsIm1lc3NhZ2UiLCJzZW5kIiwibmF2aWdhdG9yIiwiZ2VvbG9jYXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJvbmNsb3NlIiwib25tZXNzYWdlIiwiZSIsInBheWxvYWQiLCJwYXJzZSIsImRhdGEiLCJ0eXBlIiwiJGJyb2FkY2FzdCIsIiRvbiIsIl8iLCJ1cGRhdGVBbmREcmF3UG9zdHMiLCJkcmF3UmVzcG9uc2VzIiwiZnJvbUpzb24iLCJkcmF3Q3VyckxvY2F0aW9uTWFya2VyIiwicG9zdGlkIiwidW5EcmF3UG9zdCIsInVwZGF0ZWRTZXNzaW9uIiwiaXNNb2JpbGUiLCJ1c2VyQWdlbnQiLCJtYXRjaCIsIm1vdmVUb0N1cnJlbnRMb2NhdGlvbiIsImN1cnJlbnRQYWdlSWQiLCJkcmF3WE1hcmtlciIsInBhblRvIiwic2V0Wm9vbSIsInRpdGxlIiwidGV4dCIsInRpbWVyIiwic2hvd0NvbmZpcm1CdXR0b24iLCJtb3ZlVG9Qb3N0TG9jYXRpb24iLCJsYXREZWx0YSIsImxhdERlbHRhX2NlbnRlcjJub3J0aCIsIk1hdGgiLCJhYnMiLCJwb3N0TG9jYXRpb24iLCJsYXREZWx0YV9jZW50ZXIyc291dGgiLCJjb2xsYXBzZSIsInBsYWNlIiwicG9zdHBsYWNlIiwiY29uc3RhbnQiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJzZXJ2aWNlIiwic3ZjIiwidGhpcyIsImRlZzJyYWQiLCJkZWciLCJQSSIsImdldERpc3RhbmNlRnJvbUxhdExvbkluS20iLCJsYXQxIiwibG9uMSIsImxhdDIiLCJsb24yIiwiUiIsImRMYXQiLCJkTG9uIiwiYSIsInNpbiIsImNvcyIsImMiLCJhdGFuMiIsInNxcnQiLCJkIiwibWFwUmFuZ2UiLCJ2YWx1ZSIsImxvdzEiLCJoaWdoMSIsImxvdzIiLCJoaWdoMiIsInM0IiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInJ1biIsImRpcmVjdGl2ZSIsIlBvc3RzU3ZjIiwiJGNvbXBpbGUiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJ1cGRhdGVEZWZhdWx0TG9jYXRpb24iLCJnZXRDZW50ZXIiLCJ1cGRhdGVCb3VuZHMiLCJ1cGRhdGVXYXRjaExvY2F0aW9uIiwiZmV0Y2giLCJzdWNjZXNzIiwic2Vzc2lvbnMiLCJpIiwibGVuZ3RoIiwid2F0Y2hfbG9jYXRpb24iLCJwb3N0X2xvY2F0aW9uIiwibWFya2VyT3B0aW9ucyIsInBvc2l0aW9uIiwiaWNvbiIsImltYWdlTGlzdGVuZXIiLCJvcHRpbWl6ZWQiLCJtYXJrZXIiLCJNYXJrZXIiLCJ1c2VyX2xvY2F0aW9uX21hcmtlcl9saWZlc3BhbiIsIm9sZF9tYXJrZXIiLCJzZXRNYXAiLCJpc0d1aWR0Z3RDaGFuZ2VkIiwicHJldkd1aWR0Z3QiLCJwb3N0cyIsImoiLCJtYXJrZXJzT25NYXAiLCJpc0FscmVhZHlEcmF3biIsIl9pZCIsImltYWdlUG9zdCIsInB1c2giLCJjb3VwbGluZ19zdGF0dXMiLCJjYWxjdWxhdGVDb3VwbGluZyIsImxvY2FsX3N0YXR1cyIsImlzbG9jYWwiLCJwYXJlbnQiLCJjaGlsZCIsIiRuZXciLCJvcGVuSW5mb1dpbmRvdyIsImNoaWxkX3Njb3BlIiwiaW5mb1dpbmRvd09wdGlvbnMiLCJwaXhlbE9mZnNldCIsIlNpemUiLCJkaXNhYmxlQXV0b1BhbiIsImluZm9XaW5kb3ciLCJJbmZvV2luZG93IiwiY3VycmVudERhdGUiLCJEYXRlIiwiY3VycmVudFRpbWVNaWxsaSIsImdldFRpbWUiLCJwb3N0bGlmZSIsImxpZmVlbmQiLCJsaWZlcGVyY2VudGFnZSIsImxpZmVzcGFuIiwidG9GaXhlZCIsIm1zZyIsImJvZHkiLCJwb3N0Z3VpZCIsInBvc3RndWlkdGd0IiwicG9zdGNvdXBsZXN0YXR1cyIsInBvc3RsaWZlcGVyY2VudGFnZSIsInBvc3Rsb2NhbHN0YXR1cyIsImNvbnRlbnQiLCJjb21waWxlZCIsInNldENvbnRlbnQiLCJhZGRMaXN0ZW5lciIsInNob3dDYW5jZWxCdXR0b24iLCJjb25maXJtQnV0dG9uQ29sb3IiLCJjb25maXJtQnV0dG9uVGV4dCIsImNsb3NlT25Db25maXJtIiwiaXNDb25maXJtIiwicmVtb3ZlIiwib3BlbiIsImRyYXdEcm9wRG93biIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsIkRST1AiLCJpbWFnZVVzZXJMb2dpbiIsImsiLCJzcGxpY2UiLCJkcmF3QW5kU2V0UGxhY2UiLCJkcmF3SGVscGVyTWFya2VyIiwic2V0UGxhY2UiLCJoZWxwZXJNYXJrZXJzIiwiaW1hZ2VUYXJnZXQiLCIkZW1pdCIsImdlb2NvZGVyIiwiR2VvY29kZXIiLCJnZW9jb2RlIiwibGF0TG5nIiwicmVzdWx0cyIsInN0YXR1cyIsImZvcm1hdHRlZF9hZGRyZXNzIiwicG9zdF9ndWlkIiwicG9zdF9ndWlkdGd0IiwiaXNQb2ludGluZ1lvdSIsImlzUG9pbnRpbmdNZSIsImlzTXlQb3N0IiwiaXNQb2ludGluZ1NvbWVvbmUiLCJzZXRVSVNlYXJjaExvY2F0aW9uVG9nZ2xlIiwidGltZVNsaWRlciIsImNvbnRyb2xzIiwiQ29udHJvbFBvc2l0aW9uIiwiVE9QX0xFRlQiLCJzZXRVSU1vdmVUb0N1cnJMb2NCdG4iLCJjdXJyTG9jQnRuIiwiVE9QX1JJR0hUIiwic2V0VUlQb3N0Rm9ybSIsInBvc3RGb3JtIiwiQk9UVE9NX0NFTlRFUiIsInNldFVJUG9zdEJ0biIsInBvc3RCdG4iLCJzZXRVSVRpbWVTbGlkZXIiLCJzZXRVSVNlYXJjaEJveCIsImlucHV0Iiwic2VhcmNoQm94IiwicGxhY2VzIiwiU2VhcmNoQm94IiwiZ2V0UGxhY2VzIiwiZ2VvbWV0cnkiLCJzZXRFdmVudENsaWNrIiwibWFwX29yaWdpbiIsInNldEV2ZW50Q2VudGVyQ2hhbmdlZCIsInNldEV2ZW50Qm91bmRzQ2hhbmdlZCIsInNldEV2ZW50RHJhZ0VuZCIsInNldEV2ZW50UmVzaXplIiwic2V0RXZlbnRab29tQ2hhbmdlZCIsImluaXRpYWxNYXBEYXRhIiwiaW5pdGlhbE1hcENlbnRlciIsImlzTmFOIiwibWFwT3B0aW9ucyIsImNlbnRlciIsInpvb20iLCJzY3JvbGx3aGVlbCIsInN0cmVldFZpZXdDb250cm9sIiwibWFwVHlwZUNvbnRyb2wiLCJwYW5Db250cm9sIiwiem9vbUNvbnRyb2wiLCJtYXBUeXBlQ29udHJvbE9wdGlvbnMiLCJtYXBUeXBlSWRzIiwiTWFwVHlwZUlkIiwiUk9BRE1BUCIsIkNMT1VEX01BUF9JRCIsIm1hcFR5cGVJZCIsInNldE1hbnVhbEV2ZW50cyIsIkNsb3VkTWFwIiwib3B0aW9ucyIsImhhbmRsZURyYXdYTWFya2VyIiwidHJpZ2dlciIsImhhbmRsZURyYXdDdXJyTG9jYXRpb25NYXJrZXIiLCJoYW5kbGVVcGRhdGVBbmREcmF3UG9zdHMiLCJoYW5kbGVEcmF3UmVzcG9uc2VzIiwiaGFuZGxlVW5EcmF3UG9zdCIsIk1hcCIsInByb3RvdHlwZSIsInNldFN0eWxlRm9yTWFwIiwiZmVhdHVyZU9wdHMiLCJmZWF0dXJlVHlwZSIsImVsZW1lbnRUeXBlIiwic3R5bGVycyIsImh1ZSIsInNhdHVyYXRpb24iLCJsaWdodG5lc3MiLCJ2aXNpYmlsaXR5Iiwic3R5bGVkTWFwT3B0aW9ucyIsIm5hbWUiLCJjdXN0b21NYXBUeXBlIiwiU3R5bGVkTWFwVHlwZSIsIm1hcFR5cGVzIiwic2V0IiwiaW5pdE1hcCIsInNpemUiLCJvcmlnaW4iLCJQb2ludCIsImFuY2hvciIsInNjYWxlZFNpemUiLCJyZXN0cmljdCIsInRlbXBsYXRlIiwicmVwbGFjZSIsInVwZGF0ZUd1aWRUYXJnZXQiLCJteWd1aWQiLCIkcGFyZW50IiwibXlndWlkdGd0IiwiY2hpbGRyZW4iLCJvbiIsInVwZGF0ZV9ndWlkdGd0IiwidXBkYXRlQ291cGxpbmciLCJ0aGVuIiwiZG9jIiwidXBkYXRlcyIsInVwZGF0ZUd1aWR0Z3QiLCJ1cGRhdGVQb3N0VGltZXIiLCJkdXJhdGlvbiIsInBvc3RiYXJsaWZlIiwiY3NzIiwiY3VzdG9taXplSW5mb1dpbmRvdyIsIml3T3V0ZXIiLCJpd0JhY2tncm91bmQiLCJwcmV2IiwiZGlzcGxheSIsImZpbmQiLCJib3gtc2hhZG93Iiwiei1pbmRleCIsImJvcmRlciIsImN1c3RvbWl6ZUNsb3NlQnRuIiwiaXdDbG9zZUJ0biIsIm5leHQiLCJvcGFjaXR5IiwicmlnaHQiLCJ0b3AiLCJnZXRfY291cGxpbmciLCJyZWFkeSIsIiRkb2N1bWVudCIsInJlcXVlc3RGZXRjaCIsImFkZFBvc3QiLCJwb3N0TG9jYXRpb25Gcm9tVXNlckxvY2F0aW9uIiwicmVsYXRpdmVMaWZlU3BhbiIsImNoYXJMZW4iLCJjcmVhdGUiLCJlcnJvciIsImd1aWRPYmoiLCJnZXQiLCJwdXQiLCJ1cGRhdGVkc2Vzc2lvbiIsInVwZGF0ZWRndWlkdGd0Il0sIm1hcHBpbmdzIjoiQUFDQUEsUUFBQUMsT0FBQSxPQUNBLFVBQ0EsWUFDQSxjQ0hBRCxRQUFBQyxPQUFBLE9BQ0FDLFdBQUEsbUJBQUEsYUFBQSxVQUFBLFlBQUEsYUFBQSxTQUFBLFVBQUEsUUFBQSxXQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEVBQUFDLEdBT0EsYUFBQUMsT0FBQUMsYUFBQUMsTUFDQSxRQUFBRixPQUFBQyxhQUFBQyxNQUNBRixPQUFB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QUFTaEgsRUFBZ0JDLEVBQWdCQyxFQUFvQi9ELEdBQ3ZGLEdBQUlnRSxJQUNNQyxPQUFhSixFQUFlcEQsSUFDNUJ5RCxPQUFhTCxFQUFlbkQsSUFDNUJ5RCxPQUFhTCxFQUFlckQsSUFDNUIyRCxPQUFZTixFQUFlcEQsSUFDM0IyRCxXQUFhTixFQUFtQnRELElBQ2hDNkQsV0FBYVAsRUFBbUJyRCxLQUdoQzZELEVBQWVuQixLQUFLQyxVQUFVVyxHQUU5QndVLEdBQ0F4VSxTQUFVTyxFQUNWdkUsS0FBVUEsRUFPcEIsT0FITXFCLFNBQVFDLElBQUksMkJBR1gxQixFQUFNUSxLQUFLLCtCQUFnQ29ZLElBR25EcFEsS0FBSytOLGVBQWlCLFNBQVNuVyxFQUFNRSxHQUVwQyxHQUFJdVksSUFDSHpZLEtBQVNBLEVBQ1RFLFFBQVNBLEVBTVYsT0FGTW1CLFNBQVFDLElBQUkscUJBRVgxQixFQUFNUSxLQUFLLGdDQUFpQ3FZIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcblx0J25nUm91dGUnLFxuXHQnbmdBbmltYXRlJyxcblx0J3VpLnNsaWRlcidcbl0pO1xuIiwiXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbihTZXNzaW9uU3ZjLCBVdGlsU3ZjLCBDb25maWdTdmMsICRyb290U2NvcGUsICRzY29wZSwgJHdpbmRvdywgJGh0dHAsICR0aW1lb3V0KXtcblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gSU5JVElBTFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBsb2FkIGFuZCBzZXQgbGF0ZXN0IGd1aWRcblx0aWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZCA9PSAndW5kZWZpbmVkJyB8fCBcblx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLmd1aWQgPT0gJ251bGwnIHx8XG5cdFx0IXdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZClcblx0e1xuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZCA9IFV0aWxTdmMuZ2V0R3VpZCgpO1xuXHR9XG5cdCRzY29wZS5ndWlkID0gd2luZG93LmxvY2FsU3RvcmFnZS5ndWlkO1xuXG5cdC8vIGxvYWQgYW5kIHNldCBsYXRlc3QgZ3VpZHRndFxuXHRpZiAod2luZG93LmxvY2FsU3RvcmFnZS5ndWlkdGd0ID09ICd1bmRlZmluZWQnIHx8IFxuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZHRndCA9PSAnbnVsbCcgfHxcblx0XHQhd2luZG93LmxvY2FsU3RvcmFnZS5ndWlkdGd0KVxuXHR7XG5cdFx0d2luZG93LmxvY2FsU3RvcmFnZS5ndWlkdGd0ID0gXCIwXCI7XG5cdH1cblx0JHNjb3BlLmd1aWR0Z3QgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmd1aWR0Z3Q7IC8vIGludGVyZXN0ZWQgb3Bwb25lbnQgZ3VpZCBudW1iZXJcblxuXHQkc2NvcGUucGFnZUlkID0geyBcblx0XHRwb3N0IDogMCxcblx0fTtcblxuXHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblxuXHQvLyB2YWx1ZSBmcm9tIHRpbWUgc2xpZGVyIGluIFVJXG5cdC8vIGRlZmF1bHQgaXMgbWF4IGluc3RhbnQgbGlmZSBzcGFuXG4gICAgJHNjb3BlLnRpbWV2YWx1ZSA9IENvbmZpZ1N2Yy5tYXhJbnN0YW50TGlmZVNwYW47XG5cblxuXHQvLyB1c2VyJ3MgY3VycmVudCBsb2NhdGlvbiBzdG9yYWdlXG5cdCRzY29wZS51c2VyTG9jYXRpb24gPSB7XG5cdFx0bGF0OiAwLjAsXG5cdFx0bG9uOiAwLjBcblx0fTtcblxuXHQvKlxuXHQvLyBUT0RPIDogbG9nIG91dCAoc2Vzc2lvbiByZW1vdmUgZnJvbSBzZXJ2ZXIpXG5cdGRvY3VtZW50Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oKXtcblx0XHRTZXNzaW9uU3ZjLnJlbW92ZSgkc2NvcGUuZ3VpZCk7XG5cdH07XG5cblx0d2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oKXtcblx0XHRTZXNzaW9uU3ZjLnJlbW92ZSgkc2NvcGUuZ3VpZCk7XG5cdH07XG5cdCovXG5cblx0JHNjb3BlLnRvZ2dsZVNlYXJjaExvY2F0aW9uID0gZmFsc2U7XG5cdCRzY29wZS50b2dnbGVUaW1lU2xpZGVyID0gZmFsc2U7XG5cblx0Ly8gZXZlbnQgaGFuZGVyIGZvciBtYXAgVUlzXG5cdCR0aW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0Ly8gZW5hYmxlcyBlbnRlciBrZXkgdG8gc3VibWl0IHBvc3QgZm9ybVxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtcG9zdGluZycpLm9ua2V5cHJlc3MgPSBmdW5jdGlvbihldmVudCl7XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwiSW5zaWRlIGtleXByZXNzXCIsZXZlbnQud2hpY2gpO1xuXHRcdFx0aWYgKGV2ZW50LndoaWNoID09ICcxMycpe1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiZW50ZXIgcHJlc3NlZFwiKTtcblx0XHRcdFx0JCgnZm9ybSNtYXAtcG9zdGluZy1mb3JtJykuc3VibWl0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1wb3N0aW5nJykub25mb2N1cyA9IGZ1bmN0aW9uKGV2ZW50KXtcblx0XHRcdGNvbnNvbGUubG9nKFwib24gZm9jdXNcIik7XG5cdFx0XHQkc2NvcGUudG9nZ2xlVGltZVNsaWRlciA9IHRydWU7XG5cdFx0fVxuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1wb3N0aW5nJykub25ibHVyID0gZnVuY3Rpb24oZXZlbnQpe1xuXHRcdFx0Y29uc29sZS5sb2coXCJvbiBibHVyXCIpO1xuXHRcdFx0JHNjb3BlLnRvZ2dsZVRpbWVTbGlkZXIgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQkKCcubmF2LWJ1cmdlcicpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdCAgJCgnLm5hdi1idXJnZXInKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG5cdFx0ICAvLyQoJy5jb250cm9scycpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcblx0XHQgICRzY29wZS50b2dnbGVTZWFyY2hMb2NhdGlvbiA9ICEkc2NvcGUudG9nZ2xlU2VhcmNoTG9jYXRpb247XG5cdFx0ICAkc2NvcGUuJGFwcGx5KCk7XG5cdFx0fSk7XG5cblx0fSk7XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFNPQ0tFVFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdHZhciB1cmw7XG5cdHZhciBob3N0bmFtZSA9IGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lO1xuXG5cdGlmIChob3N0bmFtZSA9PSBDb25maWdTdmMubG9jYWwpe1xuXHRcdHVybCA9IENvbmZpZ1N2Yy53ZWJfc29ja2V0ICsgQ29uZmlnU3ZjLmxvY2FsICsgJzonICsgQ29uZmlnU3ZjLnBvcnQ7XG5cdH1cblx0ZWxzZSBpZiAoaG9zdG5hbWUgPT0gQ29uZmlnU3ZjLmxvY2FsX2lwKSB7XG5cdFx0dXJsID0gQ29uZmlnU3ZjLndlYl9zb2NrZXQgKyBDb25maWdTdmMubG9jYWxfaXAgKyAnOicgKyBDb25maWdTdmMucG9ydDsgLy8gZGV2ZWxvcG1ldCBvbiBzb2NrZXQgbG9jYWxseSBcblx0fVxuXHRlbHNlIHtcblx0XHR1cmwgPSBDb25maWdTdmMud2ViX3NvY2tldF9zZWN1cmUgKyBDb25maWdTdmMuZGVwbG95X2RuczsgLy8gcHJvZHVjdGlvbiBkZXBsb3kgdmVyc2lvbiAtIHN0aWxsIGRlYnVnIG1vZGVcblx0fVxuXG5cdC8qIOqwnOuwnOqzvOygleydtCDrgZ3rgpjqs6Ag67Cw7Y+s7Iuc7JeQ64qUIOychOu2gOu2hOydhCDsp4DsmrDqs6Ag7JWE656YIOy9lOuTnOunjCDrgqjqsqjrj4Qg65Cc64ukLlxuXHR1cmwgPSAnd3NzOi8vZnJvemVuLWJhZGxhbmRzLTg2NDkuaGVyb2t1YXBwLmNvbSc7XG5cdCovXG5cdHZhciBjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Y29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQodXJsKTtcblxuXHRcdGNvbm5lY3Rpb24ub25vcGVuID0gZnVuY3Rpb24oKXtcblxuXHRcdFx0Ly8gc2VuZCBndWlkIHRvIHNlcnZlciBmb3Igd3MgaWRlbnRpZmljYXRpb25cblx0XHRcdGNvbm5lY3Rpb24uc2VuZCgkc2NvcGUuZ3VpZCk7XG5cblx0XHRcdGZ1bmN0aW9uIGdldEN1cnJMb2NTdWNjZXNzKHBvcykge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8vLy8vLy8vLy8vLy8vLy8vIFBIWVNJQ0FMIExPQ0FUSU9OXG5cdFx0XHRcdC8vIOunqOyymOydjOyXkOuKlCDsnKDsoIDsnZgg7Iuk7KCcIOychOy5mCjslbHsl5Ag7J6F7J6l7ZaI7J2E65WM7J2YIOychOy5mCnsmYAg7IS87YSwIO2PrOyngOyFmOydhCDqsJnsnbQg67O064K06rOgLFxuXHRcdFx0XHQvLyDshLzthLAg7Y+s7KeA7IWY7J2AIOqzhOyGjSDsl4XrjbDsnbTtirgg65CY7Ja07JW8IO2VnOuLpC5cblx0ICAgICAgICAgICAgdmFyIGNyZCA9IHBvcy5jb29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoY3JkLmxhdGl0dWRlLCBjcmQubG9uZ2l0dWRlKTtcblxuXHQgICAgICAgICAgICAvLyBzYXZlIHRoZSB1c2VyIGxvY2F0aW9uIGludG8gYXBwbGljYXRpb24gc2NvcGUgdmFyaWFibGVcblx0ICAgICAgICAgICAgJHNjb3BlLnVzZXJMb2NhdGlvbiA9IHtcblx0ICAgICAgICAgICAgXHRsYXQ6IGNyZC5sYXRpdHVkZSxcblx0ICAgICAgICAgICAgXHRsb246IGNyZC5sb25naXR1ZGVcblx0ICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSB7XG5cdCAgICAgICAgXHRcdGxhdDpnb29nbGVMb2MubGF0KCksXG5cdCAgICAgICAgXHRcdGxvbjpnb29nbGVMb2MubG5nKClcblx0ICAgICAgICBcdH07XG5cdCAgICAgICAgXHR2YXIgbG9jYXRpb25KU09OID0gSlNPTi5zdHJpbmdpZnkobG9jYXRpb24pO1xuXHQgICAgICAgIFx0Ly9jb25zb2xlLmxvZyhcInNldHRpbmcgbG9jYXRpb25cIiwgbG9jYXRpb25KU09OKTtcblxuXHQgICAgICAgIFx0Ly8vLy8vLy8vLy8vLy8vLy8vIFdBVENIIExPQ0FUSU9OXG5cdCAgICAgICAgXHR2YXIgYm91bmRzID0gJHNjb3BlLm1hcC5nZXRCb3VuZHMoKTtcblx0ICAgICAgICAgICAgdmFyIG5lID0gYm91bmRzLmdldE5vcnRoRWFzdCgpOyAvLyBMYXRMbmcgb2YgdGhlIG5vcnRoLWVhc3QgY29ybmVyXG5cdCAgICAgICAgICAgIHZhciBzdyA9IGJvdW5kcy5nZXRTb3V0aFdlc3QoKTsgLy8gTGF0TG5nIG9mIHRoZSBzb3V0aC13ZXN0IGNvcmRlclxuXHQgICAgICAgICAgICAvL1lvdSBnZXQgbm9ydGgtd2VzdCBhbmQgc291dGgtZWFzdCBjb3JuZXJzIGZyb20gdGhlIHR3byBhYm92ZTpcblxuXHQgICAgICAgICAgICB2YXIgY3VycmVudF9tYXBfbncgPSB7IFxuXHQgICAgICAgICAgICAgICAgbGF0OiBuZS5sYXQoKSwgXG5cdCAgICAgICAgICAgICAgICBsb246IHN3LmxuZygpXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIHZhciBjdXJyZW50X21hcF9zZSA9IHtcblx0ICAgICAgICAgICAgICAgIGxhdDogc3cubGF0KCksIFxuXHQgICAgICAgICAgICAgICAgbG9uOiBuZS5sbmcoKVxuXHQgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgIHZhciBjdXJyZW50X21hcF9jZW50ZXIgPSB7XG5cdCAgICAgICAgICAgIFx0bGF0OndpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUsXG5cdCAgICAgICAgICAgIFx0bG9uOndpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlXG5cdCAgICAgICAgXHR9O1xuXG5cdCAgICAgICAgICAgIHZhciB3YXRjaGxvYyA9IHtcblx0XHQgICAgICAgICAgICBud19sYXQgICAgOiBjdXJyZW50X21hcF9udy5sYXQsXG5cdFx0ICAgICAgICAgICAgbndfbG9uICAgIDogY3VycmVudF9tYXBfbncubG9uLFxuXHRcdCAgICAgICAgICAgIHNlX2xhdCAgICA6IGN1cnJlbnRfbWFwX3NlLmxhdCxcblx0XHQgICAgICAgICAgICBzZV9sb25cdCAgOiBjdXJyZW50X21hcF9zZS5sb24sXG5cdFx0ICAgICAgICAgICAgY2VudGVyX2xhdDogY3VycmVudF9tYXBfY2VudGVyLmxhdCxcblx0XHQgICAgICAgICAgICBjZW50ZXJfbG9uOiBjdXJyZW50X21hcF9jZW50ZXIubG9uXG5cdFx0ICAgICAgICB9XG5cblx0ICAgICAgICBcdHZhciB3YXRjaGxvY0pTT04gPSBKU09OLnN0cmluZ2lmeSh3YXRjaGxvYyk7XG5cdCAgICAgICAgXHQvL2NvbnNvbGUubG9nKFwic2V0dGluZyB3YXRjaGxvY1wiLCB3YXRjaGxvY0pTT04pO1xuXHQgICAgICAgICAgICBcblx0ICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vIExPQ0FUSU9OIFVQREFURSBXSVRIIFNFU1NJT04gRU5URVJcblx0ICAgICAgICAgICAgLy/sl6zquLDshJwg67mE64+Z6riw7KCB7Jy866GcIOycoOyggOydmCDroZzsvIDsnbTshZjsnYQg7Ja76rOgIOyEuOyFmOydhCDrs7TrgrzsiJgg7J6I64ukLlxuXHRcdFx0XHR2YXIgc2Vzc2lvbiA9IHtcblx0XHRcdFx0XHRndWlkdGd0IDogJHNjb3BlLmd1aWR0Z3QsXG5cdFx0XHRcdFx0Z3VpZCAgICA6ICRzY29wZS5ndWlkLFxuXHRcdFx0XHRcdGxvY2F0aW9uOiBsb2NhdGlvbkpTT04sXG5cdFx0XHRcdFx0d2F0Y2hsb2M6IHdhdGNobG9jSlNPTlxuXHRcdFx0XHR9O1xuXHRcdFx0XHRTZXNzaW9uU3ZjLmVudGVyKHNlc3Npb24pOyAvLyDshJzrsoTsl5DshJwg7Jyg7KCA6rCAIOuTpOyWtOyYtOydhCDslYzrprDri6QuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgZnVuY3Rpb24gZ2V0Q3VyckxvY0Vycm9yKGVycikge1xuXHQgICAgICAgIFx0c3dhbChcIlwiLCBcIk5lZWQgdG8gdHVybiBvbiBsb2NhdGlvbiBzZXJ2aWNlIGZvciBwcm9wZXIgdXNlLlwiKTtcblx0ICAgICAgICAgICAgY29uc29sZS53YXJuKCdFUlJPUignICsgZXJyLmNvZGUgKyAnKTogJyArIGVyci5tZXNzYWdlKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvKiBpbml0IG1hcCBhbmQgcGxhY2Ugc29tZSBtYXJrZXJzLCBzbyBldmVyeXRoaW5nIHN0YXJ0IHdpdGggdGhpcyBmdW5jdGlvbi4gKi9cblx0ICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGdldEN1cnJMb2NTdWNjZXNzLCBnZXRDdXJyTG9jRXJyb3IpO1xuXG5cdFx0XHRjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3RlZCcpO1xuXHRcdH07XG5cblx0XHRjb25uZWN0aW9uLm9uY2xvc2UgPSBmdW5jdGlvbigpe1xuXG5cdFx0XHRjb25zb2xlLmxvZygnV2ViU29ja2V0IGNsb3NlZC4gUmVjb25lY3RpbmcuLi4nKTtcblx0XHRcdCR0aW1lb3V0KGNvbm5lY3QsIDIwMDApO1xuXHRcdH07XG5cblx0XHRjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0Ly9jb25zb2xlLmxvZygnYnJvYWRjYXN0IG1zZyBmcm9tIHNlcnZlcjonLCBlKTtcblx0XHRcdHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZShlLmRhdGEpO1xuXG5cdFx0XHQvKlxuXHRcdFx0XHR3czpuZXdfcG9zdCAgICAtIOyDiOuhnOyatCDtj6zsiqTtirjqsIAg7Jis65287JmU7J2E65WMIGZyb250LWVuZOyXkOyEnCDrp7XsnbQg64uk7IucIOyXheuNsOydtO2KuCDtlbTslbwg65Cc64uk6rOgIOyVjOugpOykgOuLpCFcblx0XHRcdFx0d3M6bmV3X3Nlc3Npb24gLSBzZXNzaW9u7J20IOyDiOuhnCDrk6TslrTsmKTrqbQg65Cc64uk6rOgIOyVjOugpOykgOuLpCFcblx0XHRcdFx0d3M6cmVtb3ZlX3Bvc3QgLSDtj6zsiqTtirjqsIAg7Iuc6rCE7J20IOuLpCDrkJjslrTshJwg7IKs65287KeI65WMIVxuXHRcdFx0XHTrp6TsmrDspJHsmpQhIFxuXHRcdFx0Ki9cblx0XHRcdGNvbnNvbGUubG9nKCd3czonICsgcGF5bG9hZC50eXBlKTtcblx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudHlwZSwgcGF5bG9hZC5kYXRhKTtcblx0XHR9O1xuXHR9O1xuXHRjb25uZWN0KCk7XG5cblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBTT0NLRVQgQlJPQURDQVNUIFJFQ0VJVkVSXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gYXMgc2VydmVyIHNvY2tldCBzZW5kICd3czpuZXdfcG9zdCcgLCB3ZSBjYW4gdXBkYXRlIHRoZSBtYXAhXG5cdCRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24oXywgcG9zdCl7XG5cdFx0Ly8gdXBkYXRlIHBvc3RzIG9uIG1hcFxuXHRcdCRzY29wZS5tYXAudXBkYXRlQW5kRHJhd1Bvc3RzKCk7XG5cblx0XHQvLyBzaG93IHJlc3BvbnNpdmUgdXNlcnMgb25seSB0byB0aGUgdXNlciB3aG8gd3JvdGUgdGhpcyBwb3N0XG5cdFx0aWYgKHBvc3QuZ3VpZCA9PSAkc2NvcGUuZ3VpZClcblx0XHR7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdzdGFydCBkcmF3aW5nIHJlc3BvbnNlcy4uJyk7XG5cdFx0XHQkc2NvcGUubWFwLmRyYXdSZXNwb25zZXMocG9zdCk7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBhcyBzZXJ2ZXIgc29ja2V0IHNlbmQgJ3dzOm5ld19wb3N0JyAsIHdlIGNhbiB1cGRhdGUgdGhlIG1hcCFcblx0JHNjb3BlLiRvbignd3M6bmV3X3Nlc3Npb24nLCBmdW5jdGlvbihfLCBzZXNzaW9uKXtcblx0XHR2YXIgbG9jYXRpb24gPSBhbmd1bGFyLmZyb21Kc29uKHNlc3Npb24ubG9jYXRpb24pO1xuXHRcdCRzY29wZS5tYXAuZHJhd0N1cnJMb2NhdGlvbk1hcmtlcihsb2NhdGlvbik7XG5cblx0fSk7XG5cblx0Ly8gd2hlbiBzZXJ2ZXIgcmVtb3ZlIHRoZSBwb3N0IGFmdGVyIHRpbWUgZm9yIGxvbmdlciBvbmVzLCBcblx0Ly8gdXBkYXRlIG1hcCB3aXRoIGNvcmVzcG9uZGluZyBpbmZvXG5cdCRzY29wZS4kb24oJ3dzOnJlbW92ZV9wb3N0JywgZnVuY3Rpb24oXywgcG9zdGlkKXtcblx0XHQkc2NvcGUubWFwLnVuRHJhd1Bvc3QocG9zdGlkKTtcblx0fSk7XG5cblx0JHNjb3BlLiRvbignd3M6dXBkYXRlX2d1aWR0Z3QnLCBmdW5jdGlvbihfLCB1cGRhdGVkU2Vzc2lvbil7XG5cdFx0Ly8gdXBkYXRlIHBvc3RzIG9uIG1hcFxuXHRcdCRzY29wZS5tYXAudXBkYXRlQW5kRHJhd1Bvc3RzKCk7XG5cdH0pO1xuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gQVBQTElDQVRJT04gTEVWRUwgRlVOQ1RJT05TXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gc2VlIGlmIGl0cyBtb2JpbGUgcGhvbmVcblx0JHNjb3BlLmlzTW9iaWxlID0gZnVuY3Rpb24oKXtcblx0XHRpZiggbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZC9pKVxuXHRcdCB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC93ZWJPUy9pKVxuXHRcdCB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGhvbmUvaSlcblx0XHQgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKVxuXHRcdCB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUG9kL2kpXG5cdFx0IHx8IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0JsYWNrQmVycnkvaSlcblx0XHQgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvV2luZG93cyBQaG9uZS9pKVxuXHRcdCApe1xuXHRcdCAgICByZXR1cm4gdHJ1ZTtcblx0XHQgIH1cblx0XHQgZWxzZSB7XG5cdFx0ICAgIHJldHVybiBmYWxzZTtcblx0XHQgIH1cblx0fTtcblxuXHQvKiBtb3ZlIHRvIGN1cnJlbnQgbG9jYXRpb24gKi9cblx0JHNjb3BlLm1vdmVUb0N1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uKCl7XG5cdFx0ZnVuY3Rpb24gZ2V0Q3VyckxvY1N1Y2Nlc3MocG9zKSB7XG4gICAgICAgICAgICAvKiBtYWtlIHN1cmUgdG8gY2hlY2sgd2UgYXJlIG9uIHBvc3QgcGFnZSB3aXRoIG1hcCBmaXJzdCAqL1xuICAgICAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50UGFnZUlkICE9ICRzY29wZS5wYWdlSWQucG9zdClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciBjcmQgPSBwb3MuY29vcmRzO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gY3JkLmxhdGl0dWRlO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBjcmQubG9uZ2l0dWRlO1xuXG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSB7XG4gICAgICAgICAgICBcdGxhdDogY3JkLmxhdGl0dWRlLCBcbiAgICAgICAgICAgIFx0bG9uOiBjcmQubG9uZ2l0dWRlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBkcmF3IGRyb3AgZG93biB1c2VyIHBvc2l0aW9uXG4gICAgICAgICAgIFx0JHNjb3BlLm1hcC5kcmF3Q3VyckxvY2F0aW9uTWFya2VyKGxvY2F0aW9uKTtcblxuICAgICAgICAgICBcdC8vIGRyYXcgeCBtYXJrZXJcblx0ICAgICAgICAkc2NvcGUubWFwLmRyYXdYTWFya2VyKGxvY2F0aW9uKTtcblxuXHQgICAgICAgIHZhciBnb29nbGVMb2MgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCwgbG9jYXRpb24ubG9uKTtcblxuXHQgICAgICAgIC8vIG1vdmUgdG8gdGhlIGxvY2F0aW9uIGFuZCB6b29tIGludG8gcmlnaHQgYW1vdW50XG4gICAgICAgICAgICAkc2NvcGUubWFwLnBhblRvKGdvb2dsZUxvYylcbiAgICAgICAgICAgICRzY29wZS5tYXAuc2V0Wm9vbSgxNSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRDdXJyTG9jRXJyb3IoZXJyKSB7XG4gICAgICAgIFx0c3dhbChcIlwiLCBcIk5lZWQgdG8gdHVybiBvbiBsb2NhdGlvbiBzZXJ2aWNlIGZvciBwcm9wZXIgdXNlLlwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRVJST1IoJyArIGVyci5jb2RlICsgJyk6ICcgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpbml0IG1hcCBhbmQgcGxhY2Ugc29tZSBtYXJrZXJzLCBzbyBldmVyeXRoaW5nIHN0YXJ0IHdpdGggdGhpcyBmdW5jdGlvbi4gKi9cbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihnZXRDdXJyTG9jU3VjY2VzcywgZ2V0Q3VyckxvY0Vycm9yKTtcblxuICAgICAgICBzd2FsKHsgICB0aXRsZTogXCJcIiwgICB0ZXh0OiBcIk1vdmluZyB0byBjdXJyZW50IGxvY2F0aW9uLi5cIiwgICB0aW1lcjogMTUwMCwgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UgfSk7XG5cdH07XG5cblx0JHNjb3BlLm1vdmVUb1Bvc3RMb2NhdGlvbiA9IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGxhdERlbHRhID0gMC4wO1xuXG5cdFx0aWYgKCRzY29wZS5pc01vYmlsZSgpKXtcblx0XHRcdHZhciBib3VuZHMgPSAkc2NvcGUubWFwLmdldEJvdW5kcygpO1xuXHQgICAgICAgIHZhciBuZSA9IGJvdW5kcy5nZXROb3J0aEVhc3QoKTsgLy8gTGF0TG5nIG9mIHRoZSBub3J0aC1lYXN0IGNvcm5lclxuXHQgICAgICAgIHZhciBzdyA9IGJvdW5kcy5nZXRTb3V0aFdlc3QoKTsgLy8gTGF0TG5nIG9mIHRoZSBzb3V0aC13ZXN0IGNvcmRlclxuXHQgICAgICAgIGN1cnJlbnRfbWFwX253ID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhuZS5sYXQoKSwgc3cubG5nKCkpO1xuXHQgICAgICAgIGN1cnJlbnRfbWFwX3NlID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhzdy5sYXQoKSwgbmUubG5nKCkpO1xuXG5cdCAgICAgICAgdmFyIGxhdERlbHRhX2NlbnRlcjJub3J0aCA9IDAuNSAqIE1hdGguYWJzKCRzY29wZS5wb3N0TG9jYXRpb24ubGF0IC0gY3VycmVudF9tYXBfbncubGF0KCkpO1xuXHQgICAgICAgIHZhciBsYXREZWx0YV9jZW50ZXIyc291dGggPSAwLjUgKiBNYXRoLmFicygkc2NvcGUucG9zdExvY2F0aW9uLmxhdCAtIGN1cnJlbnRfbWFwX3NlLmxhdCgpKTtcblxuXHQgICAgICAgIGlmIChsYXREZWx0YV9jZW50ZXIybm9ydGggPiBsYXREZWx0YV9jZW50ZXIyc291dGgpe1xuXHQgICAgICAgIFx0bGF0RGVsdGEgPSBsYXREZWx0YV9jZW50ZXIyc291dGg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgIFx0bGF0RGVsdGEgPSBsYXREZWx0YV9jZW50ZXIybm9ydGg7XG5cdCAgICAgICAgfVxuXHRcdH1cblxuXHRcdHZhciBnb29nbGVMb2MgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKCRzY29wZS5wb3N0TG9jYXRpb24ubGF0ICsgbGF0RGVsdGEsICRzY29wZS5wb3N0TG9jYXRpb24ubG9uKTtcblx0XHQkc2NvcGUubWFwLnBhblRvKGdvb2dsZUxvYyk7XG5cdH07XG5cblx0JHNjb3BlLmNvbGxhcHNlID0gZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblx0fTtcblxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEdFTkVSQUwgQlJPQURDQVNUIFJFQ0VJVkVSXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAkc2NvcGUuJG9uKCdzZXQ6bWFwJywgZnVuY3Rpb24oXywgbWFwKXtcblx0XHQkc2NvcGUubWFwID0gbWFwO1xuXHR9KTtcblxuICAgICRzY29wZS4kb24oJ3NldDpndWlkdGd0JywgZnVuY3Rpb24oXywgZ3VpZHRndCl7XG5cdFx0JHNjb3BlLmd1aWR0Z3QgPSBndWlkdGd0O1xuXG5cdFx0Ly8gaXRzIHZlcnkgaW1wb3JhbnQgdG8gc2V0IGxvY2FsIHN0b3JhZ2UgZ3VpZHRndFxuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZHRndCA9IGd1aWR0Z3Q7XG5cdH0pO1xuXG5cdCRzY29wZS4kb24oJ3NldDpwYWdlY2hhbmdlJywgZnVuY3Rpb24oXywgcGFnZUlkKXtcblx0XHQkc2NvcGUuY3VycmVudFBhZ2VJZCA9IHBhZ2VJZDtcblx0fSk7XG5cblx0JHNjb3BlLiRvbignc2V0OmxvYycsIGZ1bmN0aW9uKF8sIGxvY2F0aW9uKXtcblx0XHR2YXIgbGF0ID0gbG9jYXRpb24ubGF0KCk7XG5cdFx0dmFyIGxvbiA9IGxvY2F0aW9uLmxuZygpO1xuXHRcdCRzY29wZS5wb3N0TG9jYXRpb24gPSB7XG5cdFx0XHRsYXQ6IGxhdCxcblx0XHRcdGxvbjogbG9uXG5cdFx0fTtcblx0fSk7XG5cblx0JHNjb3BlLiRvbignc2V0OnBsYWNlJywgZnVuY3Rpb24oXywgcGxhY2Upe1xuXHRcdC8vIEZvcmNpbmcgdGhlIHVwZGF0ZSB3aXRoICRhcHBseSgpIG1ldGhvZCBvbiAkc2NvcGVcblx0XHQvLyBwcm9ibGVtIHJlbGF0ZWQgbm90ZTogaHR0cDovL3d3dy5qZWZmcnlob3VzZXIuY29tL2luZGV4LmNmbS8yMDE0LzYvMi9Ib3ctZG8tSS1ydW4tY29kZS13aGVuLWEtdmFyaWFibGUtY2hhbmdlcy13aXRoLUFuZ3VsYXJKU1xuXHRcdCRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcblx0XHRcdFx0JHNjb3BlLnBvc3RwbGFjZSA9IHBsYWNlO1xuXHRcdFx0fVxuXHRcdCk7XG5cdH0pO1xufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29uc3RhbnQoJ0NvbmZpZ1N2YycsIHtcblx0XCJ3ZWJfc29ja2V0XCJcdFx0OiBcIndzOi8vXCIsXG5cdFwid2ViX3NvY2tldF9zZWN1cmVcIiA6IFwid3NzOi8vXCIsXG5cdFwibG9jYWxcIlx0XHRcdFx0OiBcImxvY2FsaG9zdFwiLFxuXHRcImxvY2FsX2lwXCJcdFx0XHQ6IFwiMTkyLjE2OC4wLjRcIixcblx0XCJkZXBsb3lfZG5zXCJcdFx0OiBcImNsb3VkdGFsay5oZXJva3VhcHAuY29tXCIsXG5cdFwicG9ydFwiXHRcdFx0XHQ6IFwiNTAwMFwiLFxuXHRcIm1heEluc3RhbnRMaWZlU3BhblwiOiA1MDAwLFxufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24gKCRyb3V0ZVByb3ZpZGVyKXtcblx0JHJvdXRlUHJvdmlkZXJcblx0LndoZW4oJy8nLCBcblx0XHR7XG5cdFx0XHRjb250cm9sbGVyOiAnUG9zdHNDdHJsJywgXG5cdFx0XHR0ZW1wbGF0ZVVybDogJy90ZW1wbGF0ZXMvcG9zdHMuaHRtbCdcblx0XHR9KVxuXHQvLyBSZWRpcmVjdCB0byB0aGUgcm9vdCBwYWdlLlxuXHQub3RoZXJ3aXNlKFxuXHRcdHtcbiAgIFx0XHRcdHJlZGlyZWN0VG86ICcvJ1xuXHRcdH0pO1xufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVdGlsU3ZjJywgZnVuY3Rpb24oKXtcblx0dmFyIHN2YyA9IHRoaXM7XG5cblx0c3ZjLmRlZzJyYWQgPSBmdW5jdGlvbihkZWcpIHtcblx0ICByZXR1cm4gZGVnICogKE1hdGguUEkvMTgwKTtcblx0fTtcblxuXHRzdmMuZ2V0RGlzdGFuY2VGcm9tTGF0TG9uSW5LbSA9IGZ1bmN0aW9uIChsYXQxLGxvbjEsbGF0Mixsb24yKSB7XG5cdCAgdmFyIFIgPSA2MzcxO1xuXHQgIHZhciBkTGF0ID0gc3ZjLmRlZzJyYWQobGF0Mi1sYXQxKTtcblx0ICB2YXIgZExvbiA9IHN2Yy5kZWcycmFkKGxvbjItbG9uMSk7IFxuXHQgIHZhciBhID0gXG5cdCAgICBNYXRoLnNpbihkTGF0LzIpICogTWF0aC5zaW4oZExhdC8yKSArXG5cdCAgICBNYXRoLmNvcyhzdmMuZGVnMnJhZChsYXQxKSkgKiBNYXRoLmNvcyhzdmMuZGVnMnJhZChsYXQyKSkgKiBcblx0ICAgIE1hdGguc2luKGRMb24vMikgKiBNYXRoLnNpbihkTG9uLzIpXG5cdCAgICA7IFxuXHQgIHZhciBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMS1hKSk7IFxuXHQgIHZhciBkID0gUiAqIGM7XG5cdCAgcmV0dXJuIGQ7XG5cdH07XG5cblx0c3ZjLm1hcFJhbmdlID0gZnVuY3Rpb24gKHZhbHVlLCBsb3cxLCBoaWdoMSwgbG93MiwgaGlnaDIpIHtcblx0ICAgIHJldHVybiBsb3cyICsgKGhpZ2gyIC0gbG93MikgKiAodmFsdWUgLSBsb3cxKSAvIChoaWdoMSAtIGxvdzEpO1xuXHR9O1xuXG5cdHN2Yy5nZXRHdWlkID0gZnVuY3Rpb24gKCkge1xuXHRcdGZ1bmN0aW9uIHM0KCkge1xuXHRcdCAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcblx0XHQgICAgICAudG9TdHJpbmcoMTYpXG5cdFx0ICAgICAgLnN1YnN0cmluZygxKTtcblx0XHR9XG5cdCAgXHRyZXR1cm4gczQoKSArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgczQoKSArIHM0KCk7XG5cdH07XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgJHRpbWVvdXQsIFNlc3Npb25TdmMpe1xuXG5cbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmRpcmVjdGl2ZSgnYXBwTWFwJywgZnVuY3Rpb24oUG9zdHNTdmMsIFV0aWxTdmMsIENvbmZpZ1N2YywgU2Vzc2lvblN2YywgJGNvbXBpbGUsICR0aW1lb3V0KSB7XG4gICAgLy8gZGlyZWN0aXZlIGxpbmsgZnVuY3Rpb25cbiAgICB2YXIgbGluayA9IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIEdMT0JBTCBWQVJJQUJMRVMgSU4gTElOSyBGVU5DVElPTlxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB2YXIgbWFwOyAvLyBleHBhbmQgZnJvbSBnb29nbGUgbWFwIGZvciBtYW51YWxseSBjcmVhdGVkIGV2ZW50c1xuICAgICAgICB2YXIgbWFwX29yaWdpbjsgLy8gZm9yIG9yaWdpbmFsIGdvb2dsZSBtYXAgZXZlbnQgZnVuY3Rpb24gbGlua3NcbiAgICAgICAgdmFyIGN1cnJlbnRfbWFwX253O1xuICAgICAgICB2YXIgY3VycmVudF9tYXBfc2U7XG4gICAgICAgIHZhciBtYXBPcHRpb25zO1xuICAgICAgICB2YXIgaW5pdGlhbE1hcENlbnRlcjtcbiAgICAgICAgdmFyIENMT1VEX01BUF9JRCA9ICdjdXN0b21fc3R5bGUnOyAvLyBtYXAgc3R5bGVcbiAgICAgICAgdmFyIGhlbHBlck1hcmtlcnMgPSBbXTtcbiAgICAgICAgdmFyIG1hcmtlcnNPbk1hcCA9IFtdO1xuXG4gICAgICAgIHZhciBwcmV2R3VpZHRndCA9ICcwJztcbiAgICAgICAgdmFyIGlzR3VpZHRndENoYW5nZWQ7XG5cbiAgICAgICAgdmFyIGltYWdlUG9zdCA9IHtcbiAgICAgICAgICAgIHVybDogJ2h0dHBzOi8vY2F0Y2htZS5pZnlvdWNhbi5jb20vaW1hZ2VzL3BpY3R1cmVzL0lZQ19JY29ucy9JWUNfTG9jYXRpb25fSWNvbl9TbWFsbC5wbmcnLFxuICAgICAgICAgICAgc2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMTAwLCAxMDApLFxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksXG4gICAgICAgICAgICBhbmNob3I6IG5ldyBnb29nbGUubWFwcy5Qb2ludCgxNywgMzQpLFxuICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMSwgMSlcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGltYWdlVGFyZ2V0ID0ge1xuICAgICAgICAgICAgdXJsOiAnaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvVS9QL2ovTS9JL2kveC1tYXJrLXllbGxvdy1tZC5wbmcnLFxuICAgICAgICAgICAgc2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMTAwLCAxMDApLFxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksXG4gICAgICAgICAgICBhbmNob3I6IG5ldyBnb29nbGUubWFwcy5Qb2ludCgxNywgMzQpLFxuICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMjUsIDI1KVxuICAgICAgICB9O1xuICAgICAgICB2YXIgaW1hZ2VVc2VyTG9naW4gPSB7XG4gICAgICAgICAgICB1cmw6ICdodHRwOi8vd3d3LmNsa2VyLmNvbS9jbGlwYXJ0cy9xL28vMi9LL2cvVi9sb2NhdGlvbi1zeW1ib2wtbWFwLW1kLnBuZycsXG4gICAgICAgICAgICBzaXplOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgxMDAsIDEwMCksXG4gICAgICAgICAgICBvcmlnaW46IG5ldyBnb29nbGUubWFwcy5Qb2ludCgwLCAwKSxcbiAgICAgICAgICAgIGFuY2hvcjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDE3LCAzNCksXG4gICAgICAgICAgICBzY2FsZWRTaXplOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgyMCwgMzMpXG4gICAgICAgIH07XG4gICAgICAgIHZhciBpbWFnZUxpc3RlbmVyID0ge1xuICAgICAgICAgICAgdXJsOiAnaHR0cDovLzIuYnAuYmxvZ3Nwb3QuY29tLy1kak1hX241bkFFTS9UMUd2eF8tNy16SS9BQUFBQUFBQUFRNC8tMU42bGxlUXZaYy9zMTYwMC9ibGlua2luZ19kb3QuZ2lmJyxcbiAgICAgICAgICAgIHNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDEwMCwgMTAwKSxcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDAsIDApLFxuICAgICAgICAgICAgYW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMTAsIDEwKSxcbiAgICAgICAgICAgIHNjYWxlZFNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDE3LCAxNylcbiAgICAgICAgfTtcblxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBFVkVOVCBIQU5ETEVSUyAtIFVQREFURVxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVEZWZhdWx0TG9jYXRpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gbWFwLmdldENlbnRlcigpLmxhdCgpO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBtYXAuZ2V0Q2VudGVyKCkubG5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVCb3VuZHMoKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYm91bmRzID0gbWFwLmdldEJvdW5kcygpO1xuICAgICAgICAgICAgdmFyIG5lID0gYm91bmRzLmdldE5vcnRoRWFzdCgpOyAvLyBMYXRMbmcgb2YgdGhlIG5vcnRoLWVhc3QgY29ybmVyXG4gICAgICAgICAgICB2YXIgc3cgPSBib3VuZHMuZ2V0U291dGhXZXN0KCk7IC8vIExhdExuZyBvZiB0aGUgc291dGgtd2VzdCBjb3JkZXJcbiAgICAgICAgICAgIC8vWW91IGdldCBub3J0aC13ZXN0IGFuZCBzb3V0aC1lYXN0IGNvcm5lcnMgZnJvbSB0aGUgdHdvIGFib3ZlOlxuXG4gICAgICAgICAgICBjdXJyZW50X21hcF9udyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobmUubGF0KCksIHN3LmxuZygpKTtcbiAgICAgICAgICAgIGN1cnJlbnRfbWFwX3NlID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhzdy5sYXQoKSwgbmUubG5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlV2F0Y2hMb2NhdGlvbigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBib3VuZHMgPSBtYXAuZ2V0Qm91bmRzKCk7XG4gICAgICAgICAgICB2YXIgbmUgPSBib3VuZHMuZ2V0Tm9ydGhFYXN0KCk7IC8vIExhdExuZyBvZiB0aGUgbm9ydGgtZWFzdCBjb3JuZXJcbiAgICAgICAgICAgIHZhciBzdyA9IGJvdW5kcy5nZXRTb3V0aFdlc3QoKTsgLy8gTGF0TG5nIG9mIHRoZSBzb3V0aC13ZXN0IGNvcmRlclxuICAgICAgICAgICAgLy9Zb3UgZ2V0IG5vcnRoLXdlc3QgYW5kIHNvdXRoLWVhc3QgY29ybmVycyBmcm9tIHRoZSB0d28gYWJvdmU6XG5cbiAgICAgICAgICAgIGN1cnJlbnRfbWFwX253ID0geyBcbiAgICAgICAgICAgICAgICBsYXQ6IG5lLmxhdCgpLCBcbiAgICAgICAgICAgICAgICBsb246IHN3LmxuZygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY3VycmVudF9tYXBfc2UgPSB7XG4gICAgICAgICAgICAgICAgbGF0OiBzdy5sYXQoKSwgXG4gICAgICAgICAgICAgICAgbG9uOiBuZS5sbmcoKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGN1cnJlbnRfbWFwX2NlbnRlciA7XG5cbiAgICAgICAgICAgIC8vIHNlZSBpZiB0aGUgbGF0ZXN0IHggbWFya2VyIG9yIHBvc3QgbG9jYXRpb24gaXMgd2l0aGluIHVzZXIncyB2aWV3XG4gICAgICAgICAgICBpZiAoIShzY29wZS5wb3N0TG9jYXRpb24ubGF0IDwgY3VycmVudF9tYXBfbncubGF0KSB8fFxuICAgICAgICAgICAgICAgICEoc2NvcGUucG9zdExvY2F0aW9uLmxhdCA+IGN1cnJlbnRfbWFwX3NlLmxhdCkgfHxcbiAgICAgICAgICAgICAgICAhKHNjb3BlLnBvc3RMb2NhdGlvbi5sb24gPCBjdXJyZW50X21hcF9zZS5sb24pIHx8XG4gICAgICAgICAgICAgICAgIShzY29wZS5wb3N0TG9jYXRpb24ubG9uID4gY3VycmVudF9tYXBfbncubG9uKSApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgLy8gaWYgaXQgaXMgbm90IHdpdGhpbiB1c2VyJ3MgdmlldywgdGhlbiBqdXN0IHVzZSBtYXAgY2VudGVyXG4gICAgICAgICAgICAgICAgY3VycmVudF9tYXBfY2VudGVyID0ge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IG1hcC5nZXRDZW50ZXIoKS5sYXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbG9uOiBtYXAuZ2V0Q2VudGVyKCkubG5nKClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGlmIGl0IGlzIHdpdGhpbiB1c2VyJ3MgdmlldywgdXNlIHggbWFya2VyIGxvY2F0aW9uIGEuay5hIHBvc3QgbG9jYXRpb25cbiAgICAgICAgICAgICAgICBjdXJyZW50X21hcF9jZW50ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdDogc2NvcGUucG9zdExvY2F0aW9uLmxhdCxcbiAgICAgICAgICAgICAgICAgICAgbG9uOiBzY29wZS5wb3N0TG9jYXRpb24ubG9uXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFNlc3Npb25TdmMudXBkYXRlV2F0Y2hMb2NhdGlvbihjdXJyZW50X21hcF9udywgY3VycmVudF9tYXBfc2UsIGN1cnJlbnRfbWFwX2NlbnRlciwgc2NvcGUuZ3VpZCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBFVkVOVCBIQU5ETEVSUyAtIERSQVdcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gdXBkYXRlIHJlc3BvbnNlcyBzdWNoIGFzIHZpc3VhbGl6YXRpb24gb2YgbGlzdGVuZXJzXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdSZXNwb25zZXMocG9zdCl7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZWZlcmVuY2UgcG9zdDonLCBwb3N0KTtcblxuICAgICAgICAgICAgU2Vzc2lvblN2Yy5mZXRjaCgpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihzZXNzaW9ucyl7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlc3Npb25zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlc3Npb24gPSBzZXNzaW9uc1tpXTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBza2lwIG15IHNlc3Npb24gLSBubyBuZWVkIHRvIGRyYXcg64K0IOyekOyLoOydmCDshLjshZjsnYAg6re466a07ZWE7JqU6rCAIOyXhuuLpC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uZ3VpZCA9PSBzY29wZS5ndWlkKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAgICAgIC8vIHNlc3Npb24ncyB3YXRjaCBsb2NhdGlvbiB3aWxsIGJlIGJvdW5jZWQhXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Nlc3Npb24gd2F0Y2ggbG9jYXRpb246Jywgc2Vzc2lvbi53YXRjaGxvYyk7XG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Bvc3QgbG9jYXRpb246JywgcG9zdC5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3YXRjaF9sb2NhdGlvbiA9IGFuZ3VsYXIuZnJvbUpzb24oc2Vzc2lvbi53YXRjaGxvYyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3N0X2xvY2F0aW9uICA9IGFuZ3VsYXIuZnJvbUpzb24ocG9zdC5sb2NhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyDsnKDsoIDqsIAg67O06rOgIOyeiOuKlCDrsJTsmrTrjZTrpqwg7JWI7JeQIOq3uCBzZXNzaW9uKOuLpOuluOycoOyggCkg7LK07YKBXG5cbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhjdXJyZW50X21hcF9zZSwgY3VycmVudF9tYXBfbncpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVCb3VuZHMoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEod2F0Y2hfbG9jYXRpb24uY2VudGVyX2xhdCA8IGN1cnJlbnRfbWFwX253LmxhdCgpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgISh3YXRjaF9sb2NhdGlvbi5jZW50ZXJfbGF0ID4gY3VycmVudF9tYXBfc2UubGF0KCkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhKHdhdGNoX2xvY2F0aW9uLmNlbnRlcl9sb24gPCBjdXJyZW50X21hcF9zZS5sbmcoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICEod2F0Y2hfbG9jYXRpb24uY2VudGVyX2xvbiA+IGN1cnJlbnRfbWFwX253LmxuZygpKSApXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2Vzc2lvbijri6TrpbjsnKDsoIAp65Ok7J20IOq3uCDtj6zsiqTtirjrpbwg67O06rOgIOyeiOyngCDslYrsnLzrqbQg7Iqk7YK1LlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShwb3N0X2xvY2F0aW9uLmxhdCA8IHdhdGNoX2xvY2F0aW9uLm53X2xhdCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICEocG9zdF9sb2NhdGlvbi5sYXQgPiB3YXRjaF9sb2NhdGlvbi5zZV9sYXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhKHBvc3RfbG9jYXRpb24ubG9uIDwgd2F0Y2hfbG9jYXRpb24uc2VfbG9uKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIShwb3N0X2xvY2F0aW9uLmxvbiA+IHdhdGNoX2xvY2F0aW9uLm53X2xvbikgKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgZ29vZ2xlTG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyh3YXRjaF9sb2NhdGlvbi5jZW50ZXJfbGF0LCB3YXRjaF9sb2NhdGlvbi5jZW50ZXJfbG9uKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBtYXJrZXIgb3B0aW9uIHNldHRpbmdcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlck9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogZ29vZ2xlTG9jLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FuaW1hdGlvbjogZ29vZ2xlLm1hcHMuQW5pbWF0aW9uLkJPVU5DRSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlVzZXJQaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGltYWdlTGlzdGVuZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpbWl6ZWQ6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIobWFya2VyT3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJfbG9jYXRpb25fbWFya2VyX2xpZmVzcGFuID0gMTgwMDtcblxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChcbiAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbihvbGRfbWFya2VyKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkX21hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0obWFya2VyKSksIFxuICAgICAgICAgICAgICAgICAgICB1c2VyX2xvY2F0aW9uX21hcmtlcl9saWZlc3Bhbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVBbmREcmF3UG9zdHMoKXtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gZm9yIGNoZWNraW5nIGxvY2FsIHBvc3RzIC0gaXNQb2ludGluZ1lvdVxuICAgICAgICAgICAgaXNHdWlkdGd0Q2hhbmdlZCA9IHByZXZHdWlkdGd0ICE9IHNjb3BlLmd1aWR0Z3Q7IC8vIHNlZSBpZiBteSBndWlkdGd0IGhhcyBjaGFuZ2VkO1xuICAgICAgICAgICAgcHJldkd1aWR0Z3QgPSBzY29wZS5ndWlkdGd0OyAvLyB1cGRhdGUgcHJldmlvdXMgZ3VpZHRndFxuXG4gICAgICAgICAgICAvL3ZhciBndWlkT2JqID0ge2d1aWQ6IHNjb3BlLmd1aWR9IC8vIGZvciBzb2NrZXQgZmV0Y2ggb3B0aW1pemF0aW9uIFRPRE9cbiAgICAgICAgICAgIFBvc3RzU3ZjLmZldGNoKClcbiAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHBvc3RzKXtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zdHMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdCA9IHBvc3RzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gU1RBUlQgLSBDSEVDSyBJRiBJVFMgV0lUSElOIFZJRVcgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBhbmd1bGFyLmZyb21Kc29uKHBvc3QubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ29vZ2xlTG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQsIGxvY2F0aW9uLmxvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQm91bmRzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGdvb2dsZUxvYy5sYXQoKSA8IGN1cnJlbnRfbWFwX253LmxhdCgpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIShnb29nbGVMb2MubGF0KCkgPiBjdXJyZW50X21hcF9zZS5sYXQoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICEoZ29vZ2xlTG9jLmxuZygpIDwgY3VycmVudF9tYXBfc2UubG5nKCkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhKGdvb2dsZUxvYy5sbmcoKSA+IGN1cnJlbnRfbWFwX253LmxuZygpKSApXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBza2lwIHRoaXMgcG9zdCAtIG5vIG5lZWQgdG8gZHJhd1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gRU5EIC0gQ0hFQ0sgSUYgSVRTIFdJVEhJTiBWSUVXIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gU1RBUlQgLSBDSEVDSyBXRSBIQVZFIFRPIFJFRFJBVyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBtYXJrZXJzIHBvc3QgaXMgZXhpc2l0aW5nIG9uZSwgd2UgZG9uJ3Qgd2FudCB0byBkcmF3IGl0IGFnYWluLlxuICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGRyYXcgbmV3IG9uZXMhXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBtYXJrZXI7IG1hcmtlciA9IG1hcmtlcnNPbk1hcFtqXTsgaisrKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy/snbTrtoDrtoQg66Gc7KeB7J2EIOuLpOyLnCDsp5zslbztlahcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0FscmVhZHlEcmF3biA9IHBvc3QuX2lkID09IG1hcmtlci5wb3N0Ll9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0FscmVhZHlEcmF3bikgLy8g7J2066+4IOq3uOugpOyhjOuKlOyngCDthYzsiqTtirhcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNHdWlkdGd0Q2hhbmdlZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuRHJhd1Bvc3QocG9zdC5faWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hcmtlci5wb3N0Lmd1aWR0Z3QgPT0gcG9zdC5ndWlkdGd0KXsgIC8vIOydtOuvuCDqt7jroKTsp4TqsoPspJEsIGd1aWR0Z3TsnbQg67CU64CM7JeI64qU6rCAXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3QgPSBudWxsOyAvLyDsnbTrr7gg6re466Ck7KeEIO2PrOyKpO2KuOudvOuptCwgbnVsbOuhnC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7IC8vIOydtCBsb29w7J2AIHBvc3QuX2lk66eMIOqygOyCrOyaqeyehOycvOuhnCwg66eM7JW9IOqyuey5mOuptCDrsJTroZwgbG9vcOydhCDrqYjstrDrj4Qg6rSc7LCu64ukLn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bkRyYXdQb3N0KHBvc3QuX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3QgPT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gc2tpcCB0aGlzIHBvc3QgLSBubyBuZWVkIHRvIGRyYXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vIEVORCAtIENIRUNLIFdFIEhBVkUgVE8gUkVEUkFXIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gU1RBUlQgLSBEUkFXSU5HIFBPU1QgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAvLyBtYXJrZXIgb3B0aW9uIHNldHRpbmdcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlck9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogZ29vZ2xlTG9jLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJCdWJibGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGltYWdlUG9zdFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcihtYXJrZXJPcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gYWRkIG1hcmtlciB0byBhcnJheSwgdGhpcyBtZWFucyB0aGF0IGl0IGhhcyBiZWVuIGRyYXduIHRvIG1hcFxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzT25NYXAucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXI6IG1hcmtlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ICA6IHBvc3RcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gU1RBUlQgLSBEUkFXSU5HIE1FU1NBR0UgV0lORE9XIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvdXBsaW5nX3N0YXR1cyA9IGNhbGN1bGF0ZUNvdXBsaW5nKHBvc3QuZ3VpZCwgcG9zdC5ndWlkdGd0KTtcblxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwicG9zdC5pc0xvY2FsXCIsIHBvc3QuaXNsb2NhbCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsb2NhbF9zdGF0dXMgPSBwb3N0LmlzbG9jYWw7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g7Iqk7L2U7ZSE7JeQ7ISc67aA7YSwIOyDiOuhnOyatCDssKjsnbzrk5wg7Iqk7L2U7ZSE66W8IOunjOuTpOyWtCBlYWNoIGZvciBsb29w7JeQ7IScIOyCrOyaqe2VnOuLpC5cbiAgICAgICAgICAgICAgICAgICAgLy8gLS0+IO2VtOyVvCwg6rCBIERPTeydtCDqsIHqsIHsnZggc2NvcGXrpbwg6rCA7KC47IScIHBvc3QgbXNn6rCAIOyViCDqsrnsuZzri6QuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBzY29wZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50LiRuZXcodHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wZW5JbmZvV2luZG93ID0gKGZ1bmN0aW9uKG1hcmtlciwgY2hpbGRfc2NvcGUsIHBvc3QsIGNvdXBsaW5nX3N0YXR1cywgbG9jYWxfc3RhdHVzKXtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIG5ldyB3aW5kb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb1dpbmRvd09wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpeGVsT2Zmc2V0OiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgtMzkuNSwgMTYuMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVBdXRvUGFuOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5mb1dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KGluZm9XaW5kb3dPcHRpb25zKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCBjdXJyZW50IHRpbWUgYW5kIHN1YnRyYWN0IGl0IGZyb20gcG9zdCdzIGVuZCB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoYXQgd2lsbCBiZSBhY2N1cmF0ZSBwb3N0IHRpbWUgZm9yIGluc3RhbnQgcG9zdHMgYW5kIGxvbmcgcG9zdHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREYXRlICAgICAgPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZU1pbGxpID0gY3VycmVudERhdGUuZ2V0VGltZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3N0bGlmZSAgICAgICAgID0gKChwb3N0LmxpZmVlbmQgLSBjdXJyZW50VGltZU1pbGxpKSA+PSAwKSA/IChwb3N0LmxpZmVlbmQgLSBjdXJyZW50VGltZU1pbGxpKSA6IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlmZXBlcmNlbnRhZ2UgPSAocG9zdGxpZmUgLyBwb3N0LmxpZmVzcGFuKS50b0ZpeGVkKDIpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RvIG1ha2UgZGF0YSBhdmFpbGFibGUgdG8gdGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZF9zY29wZS5tc2cgICAgICAgICAgICAgICAgPSBwb3N0LmJvZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfc2NvcGUucG9zdGxpZmUgICAgICAgICAgID0gcG9zdGxpZmU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfc2NvcGUucG9zdGd1aWQgICAgICAgICAgID0gcG9zdC5ndWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX3Njb3BlLnBvc3RndWlkdGd0ICAgICAgICA9IHBvc3QuZ3VpZHRndDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZF9zY29wZS5wb3N0Y291cGxlc3RhdHVzICAgPSBjb3VwbGluZ19zdGF0dXM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID0gbGlmZXBlcmNlbnRhZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfc2NvcGUucG9zdGxvY2Fsc3RhdHVzICAgID0gbG9jYWxfc3RhdHVzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIGVuYWJsZXMgY2hhbmdpbmcgY291cGxpbmcgdmFsdWUgaW5zdGFudGx5LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX3Njb3BlLiRvbignc2V0OmNvdXBsaW5nJywgZnVuY3Rpb24oXywgY291cGxpbmdfdXBkYXRlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfc2NvcGUucG9zdGNvdXBsZXN0YXR1cyA9IGNvdXBsaW5nX3VwZGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29tcGlsZSBpdCBiZWZvcmUgbG9hZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgID0gJzxkaXYgbWFwLW1zZz48L2Rpdj4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb21waWxlZCA9ICRjb21waWxlKGNvbnRlbnQpKGNoaWxkX3Njb3BlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cuc2V0Q29udGVudCggY29tcGlsZWRbMF0gKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKGluZm9XaW5kb3csJ2Nsb3NlY2xpY2snLGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3N0Lmd1aWQgPT0gc2NvcGUuZ3VpZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3YWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiQXJlIHlvdSBzdXJlP1wiLCAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiWW91IHdpbGwgbm90IGJlIGFibGUgdG8gcmVjb3ZlciB0aGlzIGltYWdpbmFyeSBmaWxlIVwiLCAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLCAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiBcIiNERDZCNTVcIiwgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIGRlbGV0ZSBpdCFcIiwgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZU9uQ29uZmlybTogZmFsc2UgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGlzQ29uZmlybSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzQ29uZmlybSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBvc3RzU3ZjLnJlbW92ZShwb3N0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dhbChcIkRlbGV0ZWQhXCIsIFwiWW91ciBpbWFnaW5hcnkgZmlsZSBoYXMgYmVlbiBkZWxldGVkLlwiLCBcInN1Y2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5vcGVuKG1hcCAsIG1hcmtlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mb1dpbmRvdy5vcGVuKG1hcCAsIG1hcmtlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KShtYXJrZXIsIGNoaWxkLCBwb3N0LCBjb3VwbGluZ19zdGF0dXMsIGxvY2FsX3N0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBvcGVuSW5mb1dpbmRvdygpO1xuICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vIEVORCAtIERSQVdJTkcgTUVTU0FHRSBXSU5ET1cgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8gRU5EIC0gRFJBV0lORyBQT1NUIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAgICAgICAgIH0gLy8gZW5kIG9mIGZvci1sb29wXG4gICAgICAgICAgICB9KTsgLy8gZW5kIG9mIHBvc3QgZmV0Y2ggc3VjY2Vzc1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZHJhd0Ryb3BEb3duKGxvY2F0aW9uKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZ29vZ2xlTG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQsIGxvY2F0aW9uLmxvbik7XG5cbiAgICAgICAgICAgIHVwZGF0ZUJvdW5kcygpO1xuICAgICAgICAgICAgLy8g67CU7Jq0642U66asIOyViOyXkCDsnojripTsp4DrtoDthLAg7LK07YGs66W8IO2VmOyepVxuICAgICAgICAgICAgaWYgKCEoZ29vZ2xlTG9jLmxhdCgpIDwgY3VycmVudF9tYXBfbncubGF0KCkpIHx8XG4gICAgICAgICAgICAgICAgIShnb29nbGVMb2MubGF0KCkgPiBjdXJyZW50X21hcF9zZS5sYXQoKSkgfHxcbiAgICAgICAgICAgICAgICAhKGdvb2dsZUxvYy5sbmcoKSA8IGN1cnJlbnRfbWFwX3NlLmxuZygpKSB8fFxuICAgICAgICAgICAgICAgICEoZ29vZ2xlTG9jLmxuZygpID4gY3VycmVudF9tYXBfbncubG5nKCkpIClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm47IC8vIHNraXAgdGhpcyBwb3N0IC0gbm8gbmVlZCB0byBkcmF3XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG1hcmtlciBvcHRpb24gc2V0dGluZ1xuICAgICAgICAgICAgdmFyIG1hcmtlck9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGdvb2dsZUxvYyxcbiAgICAgICAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5EUk9QLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIlVzZXJQaW5cIixcbiAgICAgICAgICAgICAgICBpY29uOiBpbWFnZVVzZXJMb2dpblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIobWFya2VyT3B0aW9ucyk7XG5cbiAgICAgICAgICAgICR0aW1lb3V0KFxuICAgICAgICAgICAgICAgIChmdW5jdGlvbihvbGRfbWFya2VyKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRfbWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KG1hcmtlcikpLCBcbiAgICAgICAgICAgIDIwMDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdW5EcmF3UG9zdChwb3N0aWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJzdGFydGluZyByZW1vdmUgcG9zdFwiKTtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwLCBtYXJrZXI7IG1hcmtlciA9IG1hcmtlcnNPbk1hcFtrXTsgaysrKSB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhwb3N0aWQpO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cobWFya2VyLnBvc3QuX2lkKTtcbiAgICAgICAgICAgICAgICBpZiAocG9zdGlkID09IG1hcmtlci5wb3N0Ll9pZCkge1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXIubWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc09uTWFwLnNwbGljZShrLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZHJhd0FuZFNldFBsYWNlKGxvY2F0aW9uKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgZ29vZ2xlTG9jID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhsb2NhdGlvbi5sYXQsIGxvY2F0aW9uLmxvbik7XG4gICAgICAgICAgICBkcmF3SGVscGVyTWFya2VyKGdvb2dsZUxvYyk7XG4gICAgICAgICAgICBzZXRQbGFjZShnb29nbGVMb2MpO1xuXG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgc2VydmVyIGdldHMgdXBkYXRlZCB3aGVuZXZlciBzZXR0aW5nIG5ldyBwbGFjZSB3aXRoIG1hcmtlclxuICAgICAgICAgICAgdXBkYXRlV2F0Y2hMb2NhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZHJhdyBtYXAgd2l0aCBoZWxwZXIgbWFya2Vyc1xuICAgICAgICBmdW5jdGlvbiBkcmF3SGVscGVyTWFya2VyKGxvY2F0aW9uKXtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IGhlbHBlck1hcmtlcnNbaV07IGkrKykge1xuICAgICAgICAgICAgICAgIG1hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWxwZXJNYXJrZXJzID0gW107XG4gICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGxvY2F0aW9uLCBcbiAgICAgICAgICAgICAgICBtYXA6IG1hcCxcbiAgICAgICAgICAgICAgICBpY29uOiBpbWFnZVRhcmdldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBoZWxwZXJNYXJrZXJzLnB1c2gobWFya2VyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVuRHJhd0hlbHBlck1hcmtlcigpe1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG1hcmtlcjsgbWFya2VyID0gaGVscGVyTWFya2Vyc1tpXTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyLnNldE1hcChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGhlbHBlck1hcmtlcnMgPSBbXTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gVVRJTFxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBmdW5jdGlvbiBzZXRQbGFjZShsb2NhdGlvbilcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gYnJvYWRjYXN0IGxvY2F0aW9uIGluZm9yKGxvbixsYXQpXG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnc2V0OmxvYycsIGxvY2F0aW9uKTtcblxuICAgICAgICAgICAgdmFyIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XG5cbiAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBwbGFjZSBmb3JtYXR0ZWRfYWRkcmVzcyBhbmQgZHJhdyBpY29uXG4gICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKCB7ICdsYXRMbmcnOiBsb2NhdGlvbiB9LCBmdW5jdGlvbihyZXN1bHRzLCBzdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAvLyBhcyB1c2VyIGNsaWNrcyBvbiB0aGUgbWFwLFxuICAgICAgICAgICAgICAgIC8vIHdlIGhhdmUgdG8gc2F2ZSB0aGUgZm9ybWF0dGVkIGFkZHJlc3MgaW4gJHNjb3BlIGFuZFxuICAgICAgICAgICAgICAgIC8vIGl0IHdpbGwgYmUgdXNlZCB0aHJvdWdoIHBvc3RzLmN0cmxcbiAgICAgICAgICAgICAgICAvLyBlbWl0IGJyb2FkY2FzZSAncGxhY2UnIGFuZCBzZW5kIHRoaXMgdG8gYXBwbGljYXRpb24uY3RybFxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBmb3JtYXR0ZWRfYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kZW1pdCgnc2V0OnBsYWNlJywgcmVzdWx0c1sxXS5mb3JtYXR0ZWRfYWRkcmVzcyk7IFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgc3dhbChcIlwiLFwiTG9jYXRpb24gZG9lcyBub3QgZXhpc3RzXCIpO1xuICAgICAgICAgICAgICAgICAgICBzY29wZS4kZW1pdCgnc2V0OnBsYWNlJywgXCJMb2NhdGlvbiBkb2VzIG5vdCBleGlzdHNcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGVDb3VwbGluZyhwb3N0X2d1aWQsIHBvc3RfZ3VpZHRndClcbiAgICAgICAge1xuICAgICAgICAgICAgLyogY291cGxpbmcgc3RhdHVzXG4gICAgICAgICAgICAgICAgMCAtIG5vIHN0YXR1c1xuICAgICAgICAgICAgICAgIDEgLSBpIGxpa2UgeW91XG4gICAgICAgICAgICAgICAgMiAtIHlvdSBsaWtlIGlcbiAgICAgICAgICAgICAgICA0IC0gd2UgbGlrZSBlYWNoIG90aGVyIC8vIGRpc2FibGVkLlxuICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgdmFyIGlzUG9pbnRpbmdZb3UgICAgID0gc2NvcGUuZ3VpZHRndCA9PSBwb3N0X2d1aWQ7XG4gICAgICAgICAgICB2YXIgaXNQb2ludGluZ01lICAgICAgPSBzY29wZS5ndWlkICAgID09IHBvc3RfZ3VpZHRndDtcbiAgICAgICAgICAgIHZhciBpc015UG9zdCAgICAgICAgICA9IHNjb3BlLmd1aWQgICAgPT0gcG9zdF9ndWlkO1xuICAgICAgICAgICAgdmFyIGlzUG9pbnRpbmdTb21lb25lID0gc2NvcGUuZ3VpZHRndCAhPSAnMCc7XG5cbiAgICAgICAgICAgIGlmIChpc015UG9zdCAmJiBpc1BvaW50aW5nU29tZW9uZSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gMjsgLy8gZm9yIG15IHZpZXcncyBteSBwb3N0IHRvIGJlIFwiSSBsaWtlIHNvbWVvbmVcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNQb2ludGluZ1lvdSAmJiBpc1BvaW50aW5nTWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc1BvaW50aW5nWW91ICYmICFpc1BvaW50aW5nTWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghaXNQb2ludGluZ1lvdSAmJiBpc1BvaW50aW5nTWUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBVSVxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBmdW5jdGlvbiBzZXRVSVNlYXJjaExvY2F0aW9uVG9nZ2xlKClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRpbWVTbGlkZXIgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1zZWFyY2gtdG9nZ2xlJykpO1xuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfTEVGVF0ucHVzaCh0aW1lU2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFVJTW92ZVRvQ3VyckxvY0J0bigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBjdXJyTG9jQnRuID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtYnRuLWN1cnInKSk7IFxuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfUklHSFRdLnB1c2goY3VyckxvY0J0bik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRVSVBvc3RGb3JtKClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHBvc3RGb3JtID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtcG9zdGluZycpKTsgXG4gICAgICAgICAgICBtYXAuY29udHJvbHNbZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLkJPVFRPTV9DRU5URVJdLnB1c2gocG9zdEZvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0VUlQb3N0QnRuKClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHBvc3RCdG4gPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1idG4tc3VibWl0JykpO1xuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5CT1RUT01fQ0VOVEVSXS5wdXNoKHBvc3RCdG4pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0VUlUaW1lU2xpZGVyKClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHRpbWVTbGlkZXIgPSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC10aW1lLXNsaWRlcicpKTtcbiAgICAgICAgICAgIG1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uQk9UVE9NX0NFTlRFUl0ucHVzaCh0aW1lU2xpZGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFVJU2VhcmNoQm94KClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBzZWFyY2ggYm94IGFuZCBsaW5rIGl0IHRvIHRoZSBVSSBlbGVtZW50LlxuICAgICAgICAgICAgdmFyIGlucHV0ID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwYWMtaW5wdXQnKSk7IC8vIEB0eXBlIHtIVE1MSW5wdXRFbGVtZW50fSAgXG4gICAgICAgICAgICBtYXAuY29udHJvbHNbZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLlRPUF9MRUZUXS5wdXNoKGlucHV0KTtcblxuICAgICAgICAgICAgdmFyIHNlYXJjaEJveCA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuU2VhcmNoQm94KChpbnB1dCkpOyAvLyBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gXG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgdGhlIGV2ZW50IGZpcmVkIHdoZW4gdGhlIHVzZXIgc2VsZWN0cyBhbiBpdGVtIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBwaWNrIGxpc3QuIFJldHJpZXZlIHRoZSBtYXRjaGluZyBwbGFjZXMgZm9yIHRoYXQgaXRlbS5cbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKHNlYXJjaEJveCwgJ3BsYWNlc19jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlcyA9IHNlYXJjaEJveC5nZXRQbGFjZXMoKTtcblxuICAgICAgICAgICAgICAgIGlmIChwbGFjZXMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB0YWtlIG9ubHkgMSBzcG90XG4gICAgICAgICAgICAgICAgdmFyIHBsYWNlID0gcGxhY2VzWzBdO1xuXG4gICAgICAgICAgICAgICAgLy8gd2hlbiBzZWFyY2ggaGFwcGVucywgbG9jYXRpb24gd2lsbCBiZSB1cGRhdGVkIGFzIHdlbGwgZm9yIHBvc3RcbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdDogcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubGF0KCksXG4gICAgICAgICAgICAgICAgICAgIGxvbjogcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubG5nKClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShsb2NhdGlvbik7XG5cbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubGF0aXR1ZGU7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBwbGFjZS5nZW9tZXRyeS5sb2NhdGlvbi5sb25naXR1ZGU7XG5cbiAgICAgICAgICAgICAgICBtYXAucGFuVG8ocGxhY2UuZ2VvbWV0cnkubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIG1hcC5zZXRab29tKDE2KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gRVZFTlRcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgZnVuY3Rpb24gc2V0RXZlbnRDbGljaygpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGNsaWNrIGV2ZW50IG9uIG1hcCB0byBkcmF3IFggbWFya2VyIGFuZCBzZXQgUG9zdCBsb2NhdGlvblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwX29yaWdpbiwgJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhdDogZXZlbnQubGF0TG5nLmxhdCgpLFxuICAgICAgICAgICAgICAgICAgICBsb246IGV2ZW50LmxhdExuZy5sbmcoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0RXZlbnRDZW50ZXJDaGFuZ2VkKClcbiAgICAgICAge1xuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwX29yaWdpbiwgJ2NlbnRlcl9jaGFuZ2VkJywgZnVuY3Rpb24oKXsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gd2hlbiBtYXAgY2VudGVyIGNoYW5nZSwgdXBkYXRlIGxhc3QgbG9jYXRpb24gaW4gbWVtb3J5LFxuICAgICAgICAgICAgICAgIC8vIHNvIGJyb3dzZXIgd2lsbCByZW1lbWJlciBpdCBuZXh0IHRpbWUgeW91IGNvbWUhXG4gICAgICAgICAgICAgICAgdXBkYXRlRGVmYXVsdExvY2F0aW9uKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldEV2ZW50Qm91bmRzQ2hhbmdlZCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcF9vcmlnaW4sICdib3VuZHNfY2hhbmdlZCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiBtYXAgY2VudGVyIGNoYW5nZSwgdXBkYXRlIGJvdW5kcyBpbmZvIGZvciBtYXBcbiAgICAgICAgICAgICAgICB1cGRhdGVCb3VuZHMoKTsgIFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRFdmVudERyYWdFbmQoKVxuICAgICAgICB7XG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXBfb3JpZ2luLCAnZHJhZ2VuZCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIG1hcCBhcyBkcmFnIGVuZFxuICAgICAgICAgICAgICAgIHVwZGF0ZUFuZERyYXdQb3N0cygpO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHdhdGNobG9jIHdoZW4gY2VudGVyIGNoYW5nZWQuXG4gICAgICAgICAgICAgICAgdXBkYXRlV2F0Y2hMb2NhdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRFdmVudFJlc2l6ZSgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcF9vcmlnaW4sICdyZXNpemUnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBtYXAgYXMgZHJhZyBlbmRcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmREcmF3UG9zdHMoKTtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB3YXRjaGxvYyB3aGVuIGNlbnRlciBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgIHVwZGF0ZVdhdGNoTG9jYXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0RXZlbnRab29tQ2hhbmdlZCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcF9vcmlnaW4sICd6b29tX2NoYW5nZWQnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBtYXAgYXMgZHJhZyBlbmRcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmREcmF3UG9zdHMoKTtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB3YXRjaGxvYyB3aGVuIGNlbnRlciBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgIHVwZGF0ZVdhdGNoTG9jYXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gU0VUVVAgRk9SIE1BUFxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBtYXAgaW5pdGlhbCBjb25maWdzXG4gICAgICAgIGZ1bmN0aW9uIGluaXRpYWxNYXBEYXRhKCl7XG4gICAgICAgICAgICBpbml0aWFsTWFwQ2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZygzNC4wNSwgLTExOC4yNCk7XG4gICAgICAgIFxuICAgICAgICAgICAgaWYgKCFpc05hTih3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlKSAmJiAhaXNOYU4od2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUpKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGluaXRpYWxNYXBDZW50ZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHdpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUsIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0UGxhY2UoaW5pdGlhbE1hcENlbnRlcik7XG5cbiAgICAgICAgICAgIG1hcE9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGNlbnRlciAgICAgIDogaW5pdGlhbE1hcENlbnRlcixcbiAgICAgICAgICAgICAgICAgICAgem9vbSAgICAgICAgOiAxNSxcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsd2hlZWwgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdHJlZXRWaWV3Q29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1hcFR5cGVDb250cm9sOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgcGFuQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHpvb21Db250cm9sOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgbWFwVHlwZUNvbnRyb2xPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgbWFwVHlwZUlkczogW2dvb2dsZS5tYXBzLk1hcFR5cGVJZC5ST0FETUFQLCBDTE9VRF9NQVBfSURdXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG1hcFR5cGVJZDogQ0xPVURfTUFQX0lEXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0TWFudWFsRXZlbnRzKCl7XG4gICAgICAgICAgICBmdW5jdGlvbiBDbG91ZE1hcChvcHRpb25zKXtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIkluaXRpYWxpemluZyBtYXBcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGluc3RhbnRpYXRlIGdvb2dsZSBtYXBcbiAgICAgICAgICAgIG1hcF9vcmlnaW4gPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKGVsZW1lbnRbMF0sIG1hcE9wdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBzZXQgcHJvdG90eXBlIG9mIGN1c3RvbSBtYXAgd2l0aCBvcmlnaW4gbWFwXG4gICAgICAgICAgICBDbG91ZE1hcC5wcm90b3R5cGUgPSBtYXBfb3JpZ2luO1xuXG4gICAgICAgICAgICAvLyBkcmF3IHggbWFya2VyXG4gICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVEcmF3WE1hcmtlcihsb2NhdGlvbil7XG4gICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcih0aGlzLCAnZHJhd1hNYXJrZXInLCBsb2NhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDbG91ZE1hcC5wcm90b3R5cGUuZHJhd1hNYXJrZXIgPSBoYW5kbGVEcmF3WE1hcmtlcjtcblxuICAgICAgICAgICAgLy8gZHJhdyBjdXJyZW50IGxvY2F0aW9uIG1hcmtlclxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhd0N1cnJMb2NhdGlvbk1hcmtlcihsb2NhdGlvbil7XG4gICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcih0aGlzLCAnZHJhd0N1cnJMb2NhdGlvbk1hcmtlcicsIGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENsb3VkTWFwLnByb3RvdHlwZS5kcmF3Q3VyckxvY2F0aW9uTWFya2VyID0gaGFuZGxlRHJhd0N1cnJMb2NhdGlvbk1hcmtlcjtcblxuICAgICAgICAgICAgLy8gZHJhdyBwb3N0c1xuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlVXBkYXRlQW5kRHJhd1Bvc3RzKCl7XG4gICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcih0aGlzLCAndXBkYXRlQW5kRHJhd1Bvc3RzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDbG91ZE1hcC5wcm90b3R5cGUudXBkYXRlQW5kRHJhd1Bvc3RzID0gaGFuZGxlVXBkYXRlQW5kRHJhd1Bvc3RzO1xuXG4gICAgICAgICAgICAvLyBkcmF3IHJlc3BvbnNlc1xuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhd1Jlc3BvbnNlcyhwb3N0KXtcbiAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKHRoaXMsICdkcmF3UmVzcG9uc2VzJywgcG9zdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDbG91ZE1hcC5wcm90b3R5cGUuZHJhd1Jlc3BvbnNlcyA9IGhhbmRsZURyYXdSZXNwb25zZXM7XG5cbiAgICAgICAgICAgIC8vIHVuZHJhdyBwb3N0c1xuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlVW5EcmF3UG9zdChwb3N0aWQpe1xuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgJ3VuRHJhd1Bvc3QnLCBwb3N0aWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2xvdWRNYXAucHJvdG90eXBlLnVuRHJhd1Bvc3QgPSBoYW5kbGVVbkRyYXdQb3N0O1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgY3VzdG9tIG1hcCBmb3IgYXBwXG4gICAgICAgICAgICBtYXAgPSBuZXcgQ2xvdWRNYXAoKTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnZHJhd1hNYXJrZXInLCBmdW5jdGlvbihsb2NhdGlvbil7XG4gICAgICAgICAgICAgICAgZHJhd0FuZFNldFBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdkcmF3Q3VyckxvY2F0aW9uTWFya2VyJywgZnVuY3Rpb24obG9jYXRpb24pe1xuICAgICAgICAgICAgICAgIGRyYXdEcm9wRG93bihsb2NhdGlvbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAndXBkYXRlQW5kRHJhd1Bvc3RzJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmREcmF3UG9zdHMoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICdkcmF3UmVzcG9uc2VzJywgZnVuY3Rpb24ocG9zdCl7XG4gICAgICAgICAgICAgICAgZHJhd1Jlc3BvbnNlcyhwb3N0KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXAsICd1bkRyYXdQb3N0JywgZnVuY3Rpb24ocG9zdGlkKXtcbiAgICAgICAgICAgICAgICB1bkRyYXdQb3N0KHBvc3RpZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFN0eWxlRm9yTWFwKClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8g6rmU64GU7J20IFxuICAgICAgICAgICAgLy92YXIgZmVhdHVyZU9wdHMgPSBbe1wiZmVhdHVyZVR5cGVcIjpcImFkbWluaXN0cmF0aXZlXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzLnRleHQuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiIzYxOTVhMFwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJsYW5kc2NhcGVcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNmMmYyZjJcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwibGFuZHNjYXBlXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2ZmZmZmZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJwb2lcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaS5wYXJrXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2U2ZjNkNlwifSx7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInNhdHVyYXRpb25cIjotMTAwfSx7XCJsaWdodG5lc3NcIjo0NX0se1widmlzaWJpbGl0eVwiOlwic2ltcGxpZmllZFwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmhpZ2h3YXlcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwic2ltcGxpZmllZFwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmhpZ2h3YXlcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZjRkMmM1XCJ9LHtcInZpc2liaWxpdHlcIjpcInNpbXBsaWZpZWRcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5oaWdod2F5XCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzLnRleHRcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiM0ZTRlNGVcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5hcnRlcmlhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNmNGY0ZjRcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5hcnRlcmlhbFwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVscy50ZXh0LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiM3ODc4NzhcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5hcnRlcmlhbFwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVscy5pY29uXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ0cmFuc2l0XCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ3YXRlclwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2VhZjZmOFwifSx7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ3YXRlclwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNlYWY2ZjhcIn1dfV07XG4gICAgICAgICAgICAvLyDsg4HtgbzsnbRcbiAgICAgICAgICAgIC8vdmFyIGZlYXR1cmVPcHRzID0gW3tcImZlYXR1cmVUeXBlXCI6XCJsYW5kc2NhcGUubWFuX21hZGVcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2Y3ZjFkZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJsYW5kc2NhcGUubmF0dXJhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5XCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZDBlM2I0XCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcImxhbmRzY2FwZS5uYXR1cmFsLnRlcnJhaW5cIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJwb2kuYnVzaW5lc3NcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaS5tZWRpY2FsXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNmYmQzZGFcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pLnBhcmtcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2JkZTZhYlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuc3Ryb2tlXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmhpZ2h3YXlcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZmZlMTVmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuaGlnaHdheVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LnN0cm9rZVwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2VmZDE1MVwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmFydGVyaWFsXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2ZmZmZmZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmxvY2FsXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiYmxhY2tcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwidHJhbnNpdC5zdGF0aW9uLmFpcnBvcnRcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjY2ZiMmRiXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcIndhdGVyXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNhMmRhZjJcIn1dfV07XG4gICAgICAgICAgICAvLyDrmJHrmJHsnbRcbiAgICAgICAgICAgIHZhciBmZWF0dXJlT3B0cyA9IFt7XCJmZWF0dXJlVHlwZVwiOlwid2F0ZXJcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjN2ZjOGVkXCJ9LHtcInNhdHVyYXRpb25cIjo1NX0se1wibGlnaHRuZXNzXCI6LTZ9LHtcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcIndhdGVyXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzXCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiIzdmYzhlZFwifSx7XCJzYXR1cmF0aW9uXCI6NTV9LHtcImxpZ2h0bmVzc1wiOi02fSx7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pLnBhcmtcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJodWVcIjpcIiM4M2NlYWRcIn0se1wic2F0dXJhdGlvblwiOjF9LHtcImxpZ2h0bmVzc1wiOi0xNX0se1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwibGFuZHNjYXBlXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjZjNmNGY0XCJ9LHtcInNhdHVyYXRpb25cIjotODR9LHtcImxpZ2h0bmVzc1wiOjU5fSx7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJsYW5kc2NhcGVcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHNcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjZmZmZmZmXCJ9LHtcInNhdHVyYXRpb25cIjotMTAwfSx7XCJsaWdodG5lc3NcIjoxMDB9LHtcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjZmZmZmZmXCJ9LHtcInNhdHVyYXRpb25cIjotMTAwfSx7XCJsaWdodG5lc3NcIjoxMDB9LHtcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWRcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHNcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjYmJiYmJiXCJ9LHtcInNhdHVyYXRpb25cIjotMTAwfSx7XCJsaWdodG5lc3NcIjoyNn0se1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5hcnRlcmlhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5XCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiI2ZmY2MwMFwifSx7XCJzYXR1cmF0aW9uXCI6MTAwfSx7XCJsaWdodG5lc3NcIjotMzV9LHtcInZpc2liaWxpdHlcIjpcInNpbXBsaWZpZWRcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5oaWdod2F5XCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjZmZjYzAwXCJ9LHtcInNhdHVyYXRpb25cIjoxMDB9LHtcImxpZ2h0bmVzc1wiOi0yMn0se1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pLnNjaG9vbFwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJodWVcIjpcIiNkN2U0ZTRcIn0se1wic2F0dXJhdGlvblwiOi02MH0se1wibGlnaHRuZXNzXCI6MjN9LHtcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX1dO1xuICAgICAgICAgICAgLy8g7LSI66Gd7J20XG4gICAgICAgICAgICAvL3ZhciBmZWF0dXJlT3B0cyA9IFt7XCJmZWF0dXJlVHlwZVwiOlwibGFuZHNjYXBlXCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiI0ZGQTgwMFwifSx7XCJzYXR1cmF0aW9uXCI6MH0se1wibGlnaHRuZXNzXCI6MH0se1wiZ2FtbWFcIjoxfV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmhpZ2h3YXlcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjNTNGRjAwXCJ9LHtcInNhdHVyYXRpb25cIjotNzN9LHtcImxpZ2h0bmVzc1wiOjQwfSx7XCJnYW1tYVwiOjF9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjRkJGRjAwXCJ9LHtcInNhdHVyYXRpb25cIjowfSx7XCJsaWdodG5lc3NcIjowfSx7XCJnYW1tYVwiOjF9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQubG9jYWxcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjMDBGRkZEXCJ9LHtcInNhdHVyYXRpb25cIjowfSx7XCJsaWdodG5lc3NcIjozMH0se1wiZ2FtbWFcIjoxfV19LHtcImZlYXR1cmVUeXBlXCI6XCJ3YXRlclwiLFwic3R5bGVyc1wiOlt7XCJodWVcIjpcIiMwMEJGRkZcIn0se1wic2F0dXJhdGlvblwiOjZ9LHtcImxpZ2h0bmVzc1wiOjh9LHtcImdhbW1hXCI6MX1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pXCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiIzY3OTcxNFwifSx7XCJzYXR1cmF0aW9uXCI6MzMuNH0se1wibGlnaHRuZXNzXCI6LTI1LjR9LHtcImdhbW1hXCI6MX1dfV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBzdHlsZWRNYXBPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdDdXN0b20gU3R5bGUnXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBjdXN0b21NYXBUeXBlID0gbmV3IGdvb2dsZS5tYXBzLlN0eWxlZE1hcFR5cGUoZmVhdHVyZU9wdHMsIHN0eWxlZE1hcE9wdGlvbnMpO1xuICAgICAgICAgICAgbWFwLm1hcFR5cGVzLnNldChDTE9VRF9NQVBfSUQsIGN1c3RvbU1hcFR5cGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW5pdCB0aGUgbWFwXG4gICAgICAgIGZ1bmN0aW9uIGluaXRNYXAoKSB7XG4gICAgICAgICAgICBpZiAobWFwID09PSB2b2lkIDApIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsTWFwRGF0YSgpO1xuXG4gICAgICAgICAgICAgICAgc2V0TWFudWFsRXZlbnRzKCk7XG5cbiAgICAgICAgICAgICAgICBzZXRTdHlsZUZvck1hcCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBicm9hZGNhc3QgdG8gc2VuZCBtYXAgdG8gYXBwbGljYXRpb24gY3RybFxuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3NldDptYXAnLCBtYXApO1xuXG4gICAgICAgICAgICAvLyBhZGQgVUkgZWxlbWVudHMgdG8gbWFwXG4gICAgICAgICAgICBzZXRVSVNlYXJjaExvY2F0aW9uVG9nZ2xlKCk7XG4gICAgICAgICAgICBzZXRVSVNlYXJjaEJveCgpO1xuICAgICAgICAgICAgc2V0VUlNb3ZlVG9DdXJyTG9jQnRuKCk7XG4gICAgICAgICAgICBzZXRVSVBvc3RGb3JtKCk7XG4gICAgICAgICAgICBzZXRVSVBvc3RCdG4oKTtcbiAgICAgICAgICAgIHNldFVJVGltZVNsaWRlcigpO1xuXG4gICAgICAgICAgICAvLyBhZGQgb3JpZ2luIG5hdGl2ZSBFdmVudCBoYW5kbGVycyB0byBtYXBcbiAgICAgICAgICAgIHNldEV2ZW50Q2xpY2soKTtcbiAgICAgICAgICAgIHNldEV2ZW50Q2VudGVyQ2hhbmdlZCgpO1xuICAgICAgICAgICAgc2V0RXZlbnREcmFnRW5kKCk7XG4gICAgICAgICAgICBzZXRFdmVudFJlc2l6ZSgpO1xuICAgICAgICAgICAgc2V0RXZlbnRab29tQ2hhbmdlZCgpO1xuICAgICAgICAgICAgc2V0RXZlbnRCb3VuZHNDaGFuZ2VkKCk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSB2ZXJ5IGZpcnN0IHRpbWUgZm9yIGFwcFxuICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICB1cGRhdGVEZWZhdWx0TG9jYXRpb24oKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVCb3VuZHMoKTtcbiAgICAgICAgICAgICAgICB1cGRhdGVXYXRjaExvY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdXBkYXRlQW5kRHJhd1Bvc3RzKCk7XG4gICAgICAgICAgICB9LCA4MDApO1xuICAgICAgICB9IFxuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIEVYRUNVVEVcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgaW5pdE1hcCgpO1xuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGlkPVwibWFwLWNhbnZhc1wiPjwvZGl2PicsXG4gICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgIGxpbms6IGxpbmtcbiAgICB9O1xufSk7XG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmRpcmVjdGl2ZSgnbWFwTXNnJywgZnVuY3Rpb24gKCR0aW1lb3V0LCBTZXNzaW9uU3ZjLCBQb3N0c1N2Yykge1xuXG4gICAgdmFyIGxpbmsgPSBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHsgICAgICAgIFxuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIENPVVBMSU5HIENMQVNTXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8qIGNvdXBsaW5nIHN0YXR1c1xuICAgICAgICAgIDAgLSBubyBzdGF0dXNcbiAgICAgICAgICAxIC0gaSBsaWtlIHlvdVxuICAgICAgICAgIDIgLSB5b3UgbGlrZSBpXG4gICAgICAgICAgNCAtIHdlIGxpa2UgZWFjaCBvdGhlclxuICAgICAgICAqL1xuICAgICAgICBzY29wZS5nZXRfY291cGxpbmcgPSBmdW5jdGlvbihjb3VwbGluZ19zdGF0dXMpe1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChjb3VwbGluZ19zdGF0dXMgPT0gNCl7XG4gICAgICAgICAgICByZXR1cm4gXCJjb3VwbGluZyBjb3VwbGluZy1jb3VwbGVcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoY291cGxpbmdfc3RhdHVzID09IDEpe1xuICAgICAgICAgICAgcmV0dXJuIFwiY291cGxpbmcgY291cGxpbmctaWxpa2V5b3VcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoY291cGxpbmdfc3RhdHVzID09IDIpe1xuICAgICAgICAgICAgcmV0dXJuIFwiY291cGxpbmcgY291cGxpbmcteW91bGlrZWlcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJjb3VwbGluZyBjb3VwbGluZy1ub25lXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIERPQ1VNRU5UIFJFQURZXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAkdGltZW91dCh1cGRhdGVHdWlkVGFyZ2V0LCAxMDApO1xuXG4gICAgICAgICAgJHRpbWVvdXQodXBkYXRlUG9zdFRpbWVyLCAxMCk7XG5cbiAgICAgICAgICAkdGltZW91dChjdXN0b21pemVJbmZvV2luZG93LCAxMCk7XG5cbiAgICAgICAgICAkdGltZW91dChjdXN0b21pemVDbG9zZUJ0biwgMTApO1xuXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcInBvc3QgbG9jYWwgc3RhdHVzOlwiLCBzY29wZS5wb3N0bG9jYWxzdGF0dXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVHdWlkVGFyZ2V0KCl7XG4gICAgICAgICAgLy8gdXBkYXRlIHN0YXR1cyBmb3IgZ3VpZCB0YXJnZXRcbiAgICAgICAgICB2YXIgcG9zdGd1aWQgID0gc2NvcGUucG9zdGd1aWQ7XG4gICAgICAgICAgdmFyIG15Z3VpZCAgICA9IHNjb3BlLiRwYXJlbnQuZ3VpZDtcbiAgICAgICAgICB2YXIgbXlndWlkdGd0ID0gc2NvcGUuJHBhcmVudC5ndWlkdGd0O1xuXG4gICAgICAgICAgZWxlbWVudC5jaGlsZHJlbigpLm9uKCdjbGljaycsZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgdmFyIHVwZGF0ZV9ndWlkdGd0ID0gcG9zdGd1aWQ7XG5cbiAgICAgICAgICAgIC8vIGNsaWNraW5nIG15IG1lc3NhZ2Ugd2luZG93XG4gICAgICAgICAgICAvLyBpZiBpdHMgb24gY291cGxpbmcsIGJyZWFrIGl0IVxuICAgICAgICAgICAgaWYgKHBvc3RndWlkID09IG15Z3VpZCl7XG4gICAgICAgICAgICAgIGlmIChzY29wZS4kcGFyZW50Lmd1aWR0Z3QgIT0gJzAnKXtcbiAgICAgICAgICAgICAgICB1cGRhdGVfZ3VpZHRndCA9ICcwJzsgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNsaWtpbmcgdGhlIG9uZSB0aGF0IEkgbGlrZWRcbiAgICAgICAgICAgIC8vIHRvIGRpc2xpa2UgdGhlIG1lc3NhZ2Ugd2luZG93XG4gICAgICAgICAgICBpZiAocG9zdGd1aWQgPT0gbXlndWlkdGd0KSB7XG4gICAgICAgICAgICAgIHVwZGF0ZV9ndWlkdGd0ID0gJzAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBwcm9wYWdhdGUgdG8gdXBwZXIgc2NvcGUgZm9yIGd1aWR0Z3QgdXBkYXRlXG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnc2V0Omd1aWR0Z3QnLCB1cGRhdGVfZ3VpZHRndCk7IFxuXG4gICAgICAgICAgICAvLyB1cGRhdGUgc2Vzc2lvbiBpbmZvcm1hdGlvbiBvZiBtaW5lIHNvIG15IHNlc3Npb24gdGVsbHMgbWUgdGhhdCxcbiAgICAgICAgICAgIC8vIEkgbGlrZSB0aGlzIGd1aWQgYXQgdGhpcyBtb21lbnQgaW4gc2VydmVyIGRiXG4gICAgICAgICAgICBTZXNzaW9uU3ZjLnVwZGF0ZUNvdXBsaW5nKG15Z3VpZCwgdXBkYXRlX2d1aWR0Z3QpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRvYyl7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiU3VjY2Vzc2Z1bGx5IHVkcGF0ZWQgY291cGxpbmdcIiwgZG9jKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdXBkYXRlIG15IHBvc3QncyBndWlkdGd0IHRvIGJlIHRoaXMgcG9zdCdzIGd1aWQgaW4gc2VydmVyIGRiXG4gICAgICAgICAgICAvLyB0aGlzIHVwZGF0ZSBpcyBmb3IgdGhlIHBlb3BsZSB3aG8gYXJlIGxvb2tpbmcgYXQgbXkgcG9zdHNcbiAgICAgICAgICAgIHZhciB1cGRhdGVzID0ge1xuICAgICAgICAgICAgICBndWlkICAgIDogbXlndWlkLFxuICAgICAgICAgICAgICBndWlkdGd0IDogdXBkYXRlX2d1aWR0Z3RcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQb3N0c1N2Yy51cGRhdGVHdWlkdGd0KHVwZGF0ZXMpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRvYyl7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiU3VjY2Vzc2Z1bGx5IHVkcGF0ZWQgcG9zdCdzIGd1aWR0Z3RcIiwgZG9jKTtcbiAgICAgICAgICAgICAgICAgIC8vIGFmdGVyIGNvdXBsaW5nIHVwZGF0ZSwgbWFwIGhhcyB0byBiZSB1cGRhdGVzIGFzIHdlbGxcbiAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIC8vIE1JR0hUIEhBVkUgVE8gQ09NRSBCQUNLIEZPUiBPUFRJTUlaQVRJT05cbiAgICAgICAgICAgIC8vIHRoaXMgaGF2ZSB0byBiZSB1cGRhdGUgdG8gYmUgY29tbXVuaWNhdGVkIHRocm91Z2ggdGhlIHNlcnZlclxuICAgICAgICAgICAgaWYgKHNjb3BlLiRwYXJlbnQuZ3VpZHRndCA9PSAwKXtcbiAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3NldDpjb3VwbGluZycsIDEpOyAvLyBwcm9wYWdhdGUgdG8gdXBwZXIgc2NvcGUgZm9yIGNvdXBsaW5nIHVwZGF0ZVxuICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTsgLy8gZm9yY2UgdG8gdXBkYXRlIERPTVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NvcGUucG9zdGNvdXBsZXN0YXR1cyA9PSAxICYmIHNjb3BlLiRwYXJlbnQuZ3VpZHRndCAhPSAwKXtcbiAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3NldDpjb3VwbGluZycsIDApOyAvLyBwcm9wYWdhdGUgdG8gdXBwZXIgc2NvcGUgZm9yIGNvdXBsaW5nIHVwZGF0ZVxuICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTsgLy8gZm9yY2UgdG8gdXBkYXRlIERPTVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVQb3N0VGltZXIoKXtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiTGlmZSAlOlwiLCBzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gc2NvcGUucG9zdGxpZmUgKyBcIm1zXCI7XG5cbiAgICAgICAgICAgIHZhciBwb3N0YmFybGlmZSA9IGVsZW1lbnQuY2hpbGRyZW4oKS5jaGlsZHJlbihcIi5wb3N0bGlmZWJhclwiKTtcblxuICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb24nLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPiAwLjk1KXtcbiAgICAgICAgICAgICAgLyogQ2hyb21lLCBTYWZhcmksIE9wZXJhICovXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2EnKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9hJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPD0gMC45NSAmJiBzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPiAwLjkpe1xuICAgICAgICAgICAgICAvKiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEgKi9cbiAgICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnLXdlYmtpdC1hbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fYicpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNjb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA8PSAwLjkgJiYgc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID4gMC44NSl7XG4gICAgICAgICAgICAgIC8qIENocm9tZSwgU2FmYXJpLCBPcGVyYSAqL1xuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9jJyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCdhbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlIDw9IDAuODUgJiYgc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID4gMC43NSl7XG4gICAgICAgICAgICAgIC8qIENocm9tZSwgU2FmYXJpLCBPcGVyYSAqL1xuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9kJyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCdhbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlIDw9IDAuNzUgJiYgc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID4gMC42KXtcbiAgICAgICAgICAgICAgLyogQ2hyb21lLCBTYWZhcmksIE9wZXJhICovXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2UnKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPD0gMC42ICYmIHNjb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA+IDAuNSl7XG4gICAgICAgICAgICAgIC8qIENocm9tZSwgU2FmYXJpLCBPcGVyYSAqL1xuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9mJyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCdhbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fZicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlIDw9IDAuNSAmJiBzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPiAwLjMpe1xuICAgICAgICAgICAgICAvKiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEgKi9cbiAgICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnLXdlYmtpdC1hbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fZycpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNjb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA8PSAwLjMgJiYgc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID4gMC4yKXtcbiAgICAgICAgICAgICAgLyogQ2hyb21lLCBTYWZhcmksIE9wZXJhICovXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2gnKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9oJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPD0gMC4yICYmIHNjb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA+IDAuMSl7XG4gICAgICAgICAgICAgIC8qIENocm9tZSwgU2FmYXJpLCBPcGVyYSAqL1xuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9pJyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCdhbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1faScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgLyogQ2hyb21lLCBTYWZhcmksIE9wZXJhICovXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2onKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9qJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjdXN0b21pemVJbmZvV2luZG93KCl7XG4gICAgICAgICAgLy8gUmVmZXJlbmNlIHRvIHRoZSBESVYgdGhhdCB3cmFwcyB0aGUgYm90dG9tIG9mIGluZm93aW5kb3dcbiAgICAgICAgICB2YXIgaXdPdXRlciA9ICQoJy5nbS1zdHlsZS1pdycpO1xuICAgICAgICAgIFxuICAgICAgICAgIHZhciBpd0JhY2tncm91bmQgPSBpd091dGVyLnByZXYoKTtcblxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgYmFja2dyb3VuZCBzaGFkb3cgRElWXG4gICAgICAgICAgIGl3QmFja2dyb3VuZC5jaGlsZHJlbignOm50aC1jaGlsZCgyKScpLmNzcyh7J2Rpc3BsYXknIDogJ25vbmUnfSk7XG5cbiAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSB3aGl0ZSBiYWNrZ3JvdW5kIERJVlxuICAgICAgICAgICBpd0JhY2tncm91bmQuY2hpbGRyZW4oJzpudGgtY2hpbGQoNCknKS5jc3MoeydkaXNwbGF5JyA6ICdub25lJ30pO1xuXG4gICAgICAgICAgLy8gQ2hhbmdlcyB0aGUgZGVzaXJlZCB0YWlsIHNoYWRvdyBjb2xvci5cbiAgICAgICAgICBpd0JhY2tncm91bmQuY2hpbGRyZW4oJzpudGgtY2hpbGQoMyknKS5maW5kKCdkaXYnKS5jaGlsZHJlbigpLmNzcyh7XG4gICAgICAgICAgICAnYm94LXNoYWRvdyc6ICcwIDFweCA2cHggcmdiYSgxNzgsIDE3OCwgMTc4LCAwLjYpJywgXG4gICAgICAgICAgICAnei1pbmRleCcgOiAnMScsXG4gICAgICAgICAgICAnYm9yZGVyJzogJzBweCd9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGN1c3RvbWl6ZUNsb3NlQnRuKCl7XG4gICAgICAgICAgLy8gUmVmZXJlbmNlIHRvIHRoZSBESVYgdGhhdCB3cmFwcyB0aGUgYm90dG9tIG9mIGluZm93aW5kb3dcbiAgICAgICAgICB2YXIgaXdPdXRlciA9ICQoJy5nbS1zdHlsZS1pdycpO1xuXG4gICAgICAgICAgdmFyIGl3Q2xvc2VCdG4gPSBpd091dGVyLm5leHQoKTtcblxuICAgICAgICAgIC8qXG4gICAgICAgICAgY29uc29sZS5sb2coXCJwb3N0bG9jYWwgbGVhbnRoOlwiLCBpd091dGVyLnBhcmVudCgpLmZpbmQoJyNwb3N0bG9jYWwnKS5sZW5ndGgpO1xuICAgICAgICAgIGlmIChzY29wZS5wb3N0bG9jYWxzdGF0dXMgPT0gZmFsc2UgJiYgMCA9PSBpd091dGVyLnBhcmVudCgpLmZpbmQoJyNwb3N0bG9jYWwnKS5sZW5ndGgpe1xuICAgICAgICAgICAgaXdDbG9zZUJ0bi5hZnRlcihcIjxpbWcgaWQ9J3Bvc3Rsb2NhbCcgc3JjPSdodHRwOi8vY2RuLWltZy5lYXN5aWNvbi5uZXQvcG5nLzI0LzI0NDAucG5nJyB3aWR0aD0nMjAnLCBoZWlnaHQ9JzIwJy8+XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAqL1xuXG4gICAgICAgICAgLy8gQXBwbHkgdGhlIGRlc2lyZWQgZWZmZWN0IHRvIHRoZSBjbG9zZSBidXR0b25cbiAgICAgICAgICBpd0Nsb3NlQnRuLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAnMC44JywgLy8gYnkgZGVmYXVsdCB0aGUgY2xvc2UgYnV0dG9uIGhhcyBhbiBvcGFjaXR5IG9mIDAuN1xuICAgICAgICAgICAgcmlnaHQ6ICcyMHB4JywgdG9wOiAnMjBweCcsIC8vIGJ1dHRvbiByZXBvc2l0aW9uaW5nXG4gICAgICAgICAgfSk7IFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy93aW5kb3cuaHRtbCcsXG4gICAgICAgIGxpbms6IGxpbmtcbiAgICB9O1xufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXHIuY29udHJvbGxlcignUG9zdHNDdHJsJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICRzY29wZSwgQ29uZmlnU3ZjLCBQb3N0c1N2YywgVXRpbFN2YywgJHdpbmRvdywgJGRvY3VtZW50LCAkdGltZW91dCl7XHJcclx0LyogZW1pdCBicm9hZGNhc3QgZm9yIGN1cnJlbnQgcGFnZUlkICovXHJcdCRzY29wZS4kZW1pdCgnc2V0OnBhZ2VjaGFuZ2UnLCAkc2NvcGUucGFnZUlkLnBvc3QpO1xyXHJcdCRzY29wZS5wb3N0cyA9IFtdO1xyXHJcdC8qIGFzIHNlcnZlciB0ZWxscyB0aGVyZSB3YXMgbmV3IHBvc3QsIGxldHMgcmUtbG9hZCBsaXN0IGRhdGEgKi9cclx0JHNjb3BlLiRvbignd3M6bmV3X3Bvc3QnLCBmdW5jdGlvbihfLCBwb3N0KXtcclx0XHQkc2NvcGUucmVxdWVzdEZldGNoKCk7XHJcdH0pO1xyXHJcdCRzY29wZS5hZGRQb3N0ID0gZnVuY3Rpb24oKSB7XHJcdFx0LyogY2hlY2sgaWYgdGhlIHBvc3QgY29udGVudCBpcyB0aGVyZSAtIG9ubHkgZm9yIFdFQiBmb3IgZW50ZXIgYnV0dG9uIHRvIHBvc3QgKi9cclx0XHRpZiAoISRzY29wZS5jb250ZW50KXtcclx0XHRcdGNvbnNvbGUubG9nKFwiVXNlciBhdHRlbXB0ZWQgdG8gcG9zdCB3aXRoIDAgd29yZHMuXCIpXHJcdFx0XHRyZXR1cm47XHJcdFx0fVxyXHJcdFx0LyogZ2V0IGF1dG9jb21wbGV0ZWQgcGxhY2UgYW5kIHJlc2V0KHNldCB0byB1bmRlZmluZWQpICovXHJcdFx0dmFyIHBsYWNlICAgID0gJHNjb3BlLnBvc3RwbGFjZTtcclx0XHR2YXIgbG9jYXRpb24gPSAkc2NvcGUucG9zdExvY2F0aW9uO1xyXHJcdFx0dmFyIGxvY2FsX3N0YXR1cztcclx0XHR2YXIgcG9zdExvY2F0aW9uRnJvbVVzZXJMb2NhdGlvbiA9IFV0aWxTdmMuZ2V0RGlzdGFuY2VGcm9tTGF0TG9uSW5LbShsb2NhdGlvbi5sYXQsIGxvY2F0aW9uLmxvbiwgJHNjb3BlLnVzZXJMb2NhdGlvbi5sYXQsICRzY29wZS51c2VyTG9jYXRpb24ubG9uKTtcclx0XHRjb25zb2xlLmxvZyhcInBvc3QgbG9jYXRpb24gZnJvbSB1c2VyIGxvY2F0aW9uIDogXCIsIHBvc3RMb2NhdGlvbkZyb21Vc2VyTG9jYXRpb24pO1xyXHRcdC8qIGlmIGxlc3MgdGhhbiAza20gKi9cclx0XHRpZiAocG9zdExvY2F0aW9uRnJvbVVzZXJMb2NhdGlvbiA8IDMpe1xyXHRcdFx0Y29uc29sZS5sb2coXCJwb3N0TG9jYXRpb25Gcm9tVXNlckxvY2F0aW9uIDwgM1wiLCAocG9zdExvY2F0aW9uRnJvbVVzZXJMb2NhdGlvbiA8IDMpKTtcclx0XHRcdGxvY2FsX3N0YXR1cyA9IHRydWU7XHJcdFx0fVxyXHRcdGVsc2Uge1xyXHRcdFx0Y29uc29sZS5sb2coXCJwb3N0TG9jYXRpb25Gcm9tVXNlckxvY2F0aW9uIDwgM1wiLCAocG9zdExvY2F0aW9uRnJvbVVzZXJMb2NhdGlvbiA8IDMpKTtcclx0XHRcdGxvY2FsX3N0YXR1cyA9IGZhbHNlO1xyXHRcdH1cclx0XHRcclx0XHR2YXIgbG9jYXRpb25KU09OID0gSlNPTi5zdHJpbmdpZnkobG9jYXRpb24pO1xyXHJcdFx0dmFyIHJlbGF0aXZlTGlmZVNwYW47XHJcdFx0aWYgKCRzY29wZS50aW1ldmFsdWUgPD0gQ29uZmlnU3ZjLm1heEluc3RhbnRMaWZlU3Bhbil7XHJcdFx0XHR2YXIgY2hhckxlbiA9ICRzY29wZS5jb250ZW50Lmxlbmd0aDtcclx0XHRcdGlmIChjaGFyTGVuIDwgNSlcclx0XHRcdHtcclx0XHRcdFx0cmVsYXRpdmVMaWZlU3BhbiA9IDQwMDA7XHJcdFx0XHR9XHJcdFx0XHRlbHNlXHJcdFx0XHR7XHJcdFx0XHRcdHJlbGF0aXZlTGlmZVNwYW4gPSBjaGFyTGVuICogVXRpbFN2Yy5tYXBSYW5nZShjaGFyTGVuLCA1LCAyMCwgNzAwLCA0MDApO1xyXHRcdFx0fVxyXHRcdH1cclx0XHRlbHNlIHtcclx0XHRcdHJlbGF0aXZlTGlmZVNwYW4gPSAkc2NvcGUudGltZXZhbHVlO1xyXHRcdH1cclxyXHRcdFBvc3RzU3ZjLmNyZWF0ZShcclx0XHR7XHJcdFx0XHRib2R5ICAgIDogICRzY29wZS5jb250ZW50LFxyXHRcdFx0bG9jYXRpb246ICBsb2NhdGlvbkpTT04sXHJcdFx0XHRwbGFjZSAgIDogIHBsYWNlLFxyXHRcdFx0Z3VpZCAgICA6ICAkc2NvcGUuZ3VpZCxcclx0XHRcdGd1aWR0Z3QgOiAgJHNjb3BlLmd1aWR0Z3QsXHJcdFx0XHRsaWZlc3BhbjogIHJlbGF0aXZlTGlmZVNwYW4sXHJcdFx0XHRpc2xvY2FsIDogIGxvY2FsX3N0YXR1c1xyXHRcdH0pXHJcdFx0LnN1Y2Nlc3MoZnVuY3Rpb24ocG9zdCl7XHJcdFx0XHRcdFx0XHJcdFx0XHQvKiByZXNldCBpbnB1dCBmb3JtcyAqL1xyXHRcdFx0JHNjb3BlLmNvbnRlbnQgID0gbnVsbDtcclx0XHR9KVxyXHRcdC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMpe1xyXHRcdFx0c3dhbChcIlBvc3QgZmFpbGVkXCIsIFwiUGxlYXNlIGNvbXBsZXRlIHRoZSBmcm9tIGNvcnJlY3RseVwiLCBcImVycm9yXCIpO1xyXHRcdH0pO1xyXHR9O1xyXHJcdC8qIGFzIHNlcnZlciB0ZWxscyB0aGVyZSB3YXMgbmV3IHBvc3QsIGxldHMgcmUtbG9hZCBsaXN0IGRhdGEgKi9cclx0JHNjb3BlLnJlcXVlc3RGZXRjaCA9IGZ1bmN0aW9uKCkge1xyXHRcdFBvc3RzU3ZjLmZldGNoKClcclx0XHQuc3VjY2VzcyhmdW5jdGlvbihwb3N0cyl7XHJcdFx0XHQkc2NvcGUucG9zdHMgPSBwb3N0cztcclx0XHR9KTtcclx0fTtcclxyXHQvKiB1cGRhdGUgZ3VpZCBvZiBwb3N0ICovXHJcdCRzY29wZS51cGRhdGVHdWlkdGd0ID0gZnVuY3Rpb24obXlndWlkLCBndWlkdGd0KSB7XHJcdFx0dmFyIHVwZGF0ZXMgPSB7XHJcdFx0XHRndWlkICAgIDogbXlndWlkLFxyXHRcdFx0Z3VpZHRndCA6IGd1aWR0Z3Rcclx0XHR9O1xyXHJcdFx0Y29uc29sZS5sb2coXCJ1ZHBhdGUgdG8gcG9zdCBndWlkdGd0OlwiLCB1cGRhdGVzKVxyXHJcdFx0UG9zdHNTdmMudXBkYXRlR3VpZHRndCh1cGRhdGVzKTtcclx0fVxyXHJcdC8qJHNjb3BlLnJlcXVlc3RGZXRjaCgpOyovXHJ9KTtcciIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ1Bvc3RzU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuXHR0aGlzLmZldGNoID0gZnVuY3Rpb24oZ3VpZE9iail7XG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9wb3N0cycsIGd1aWRPYmopO1xuXHR9O1xuXG5cdHRoaXMuY3JlYXRlID0gZnVuY3Rpb24ocG9zdCl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMnLCBwb3N0KTtcblx0fTtcblxuXHR0aGlzLnJlbW92ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xuXHRcdC8vY29uc29sZS5sb2coXCJkZWxldGluZyBwb3N0aW5nXCIpO1xuXHRcdC8vY29uc29sZS5sb2coJ3Bvc3QuX2lkOicsIHBvc3QuX2lkKTtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cy9wb3N0c19kZWxldGUnLCBwb3N0KTtcblx0fTtcblxuXHR0aGlzLnVwZGF0ZUd1aWR0Z3QgPSBmdW5jdGlvbih1cGRhdGVzKXtcblx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cy91cGRhdGVfZ3VpZHRndCcsIHVwZGF0ZXMpO1xuXHR9XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdTZXNzaW9uU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuXHR0aGlzLmZldGNoID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Nlc3Npb25zJyk7XG5cdH07XG5cblx0dGhpcy5lbnRlciA9IGZ1bmN0aW9uKHNlc3Npb24pe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywgc2Vzc2lvbik7XG5cdH07XG5cblx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbihndWlkKXtcblx0XHQvL2NvbnNvbGUubG9nKFwiZGVsZXRpbmcgc2Vzc2lvblwiKTtcblx0XHQvL2NvbnNvbGUubG9nKCdzZXNzaW9uLmd1aWQ6JywgZ3VpZCk7XG5cdFx0dmFyIHNlc3Npb24gPSB7Z3VpZDogZ3VpZH07XG5cdFx0cmV0dXJuICRodHRwLnB1dCgnL2FwaS9zZXNzaW9ucycsIHNlc3Npb24pO1xuXHR9O1xuXG5cdHRoaXMudXBkYXRlV2F0Y2hMb2NhdGlvbiA9IGZ1bmN0aW9uKGN1cnJlbnRfbWFwX253LCBjdXJyZW50X21hcF9zZSwgY3VycmVudF9tYXBfY2VudGVyLCBndWlkKXtcblx0XHR2YXIgd2F0Y2hsb2MgPSB7XG4gICAgICAgICAgICBud19sYXQgICAgIDogY3VycmVudF9tYXBfbncubGF0LFxuICAgICAgICAgICAgbndfbG9uICAgICA6IGN1cnJlbnRfbWFwX253LmxvbixcbiAgICAgICAgICAgIHNlX2xhdCAgICAgOiBjdXJyZW50X21hcF9zZS5sYXQsXG4gICAgICAgICAgICBzZV9sb25cdCAgIDogY3VycmVudF9tYXBfc2UubG9uLFxuICAgICAgICAgICAgY2VudGVyX2xhdCA6IGN1cnJlbnRfbWFwX2NlbnRlci5sYXQsXG4gICAgICAgICAgICBjZW50ZXJfbG9uIDogY3VycmVudF9tYXBfY2VudGVyLmxvblxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdhdGNobG9jSlNPTiA9IEpTT04uc3RyaW5naWZ5KHdhdGNobG9jKTtcblxuICAgICAgICB2YXIgdXBkYXRlZHNlc3Npb24gPSB7XG4gICAgICAgICAgICB3YXRjaGxvYzogd2F0Y2hsb2NKU09OLFxuICAgICAgICAgICAgZ3VpZCAgICA6IGd1aWRcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB1cGRhdGUgd2F0Y2hsb2Mgd2hlbiBjZW50ZXIgY2hhbmdlZC5cbiAgICAgICAgY29uc29sZS5sb2coXCJ1cGRhdGluZyB3YXRjaCBsb2NhdGlvblwiKTtcblxuXHRcdC8vY29uc29sZS5sb2coXCJ1cGRhdGVkc2Vzc2lvbjpcIiwgdXBkYXRlZHNlc3Npb24pO1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zL3VwZGF0ZV9zZXNzaW9uJywgdXBkYXRlZHNlc3Npb24pO1xuXHR9O1xuXG5cdHRoaXMudXBkYXRlQ291cGxpbmcgPSBmdW5jdGlvbihndWlkLCBndWlkdGd0KXtcblx0XHRcblx0XHR2YXIgdXBkYXRlZGd1aWR0Z3QgPSB7XG5cdFx0XHRndWlkICAgOiBndWlkLFxuXHRcdFx0Z3VpZHRndDogZ3VpZHRndFxuXHRcdH07XG5cblx0XHQvLyB1cGRhdGUgd2F0Y2hsb2Mgd2hlbiBjZW50ZXIgY2hhbmdlZC5cbiAgICAgICAgY29uc29sZS5sb2coXCJ1cGRhdGluZyBjb3VwbGluZ1wiKTtcblxuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zL3VwZGF0ZV9jb3VwbGluZycsIHVwZGF0ZWRndWlkdGd0KVxuXHR9O1xufSk7XG4iLCIiLCJcbmFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG5cdCduZ1JvdXRlJyxcblx0J25nQW5pbWF0ZScsXG5cdCd1aS5zbGlkZXInXG5dKTtcblxuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBmdW5jdGlvbihTZXNzaW9uU3ZjLCBVdGlsU3ZjLCBDb25maWdTdmMsICRyb290U2NvcGUsICRzY29wZSwgJHdpbmRvdywgJGh0dHAsICR0aW1lb3V0KXtcblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gSU5JVElBTFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgICAvLyBsb2FkIGFuZCBzZXQgbGF0ZXN0IGd1aWRcblx0aWYgKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZCA9PSAndW5kZWZpbmVkJyB8fCBcblx0XHR3aW5kb3cubG9jYWxTdG9yYWdlLmd1aWQgPT0gJ251bGwnIHx8XG5cdFx0IXdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZClcblx0e1xuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZCA9IFV0aWxTdmMuZ2V0R3VpZCgpO1xuXHR9XG5cdCRzY29wZS5ndWlkID0gd2luZG93LmxvY2FsU3RvcmFnZS5ndWlkO1xuXG5cdC8vIGxvYWQgYW5kIHNldCBsYXRlc3QgZ3VpZHRndFxuXHRpZiAod2luZG93LmxvY2FsU3RvcmFnZS5ndWlkdGd0ID09ICd1bmRlZmluZWQnIHx8IFxuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZHRndCA9PSAnbnVsbCcgfHxcblx0XHQhd2luZG93LmxvY2FsU3RvcmFnZS5ndWlkdGd0KVxuXHR7XG5cdFx0d2luZG93LmxvY2FsU3RvcmFnZS5ndWlkdGd0ID0gXCIwXCI7XG5cdH1cblx0JHNjb3BlLmd1aWR0Z3QgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmd1aWR0Z3Q7IC8vIGludGVyZXN0ZWQgb3Bwb25lbnQgZ3VpZCBudW1iZXJcblxuXHQkc2NvcGUucGFnZUlkID0geyBcblx0XHRwb3N0IDogMCxcblx0fTtcblxuXHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblxuXHQvLyB2YWx1ZSBmcm9tIHRpbWUgc2xpZGVyIGluIFVJXG5cdC8vIGRlZmF1bHQgaXMgbWF4IGluc3RhbnQgbGlmZSBzcGFuXG4gICAgJHNjb3BlLnRpbWV2YWx1ZSA9IENvbmZpZ1N2Yy5tYXhJbnN0YW50TGlmZVNwYW47XG5cblxuXHQvLyB1c2VyJ3MgY3VycmVudCBsb2NhdGlvbiBzdG9yYWdlXG5cdCRzY29wZS51c2VyTG9jYXRpb24gPSB7XG5cdFx0bGF0OiAwLjAsXG5cdFx0bG9uOiAwLjBcblx0fTtcblxuXHQvKlxuXHQvLyBUT0RPIDogbG9nIG91dCAoc2Vzc2lvbiByZW1vdmUgZnJvbSBzZXJ2ZXIpXG5cdGRvY3VtZW50Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oKXtcblx0XHRTZXNzaW9uU3ZjLnJlbW92ZSgkc2NvcGUuZ3VpZCk7XG5cdH07XG5cblx0d2luZG93Lm9uYmVmb3JldW5sb2FkID0gZnVuY3Rpb24oKXtcblx0XHRTZXNzaW9uU3ZjLnJlbW92ZSgkc2NvcGUuZ3VpZCk7XG5cdH07XG5cdCovXG5cblx0JHNjb3BlLnRvZ2dsZVNlYXJjaExvY2F0aW9uID0gZmFsc2U7XG5cdCRzY29wZS50b2dnbGVUaW1lU2xpZGVyID0gZmFsc2U7XG5cblx0Ly8gZXZlbnQgaGFuZGVyIGZvciBtYXAgVUlzXG5cdCR0aW1lb3V0KGZ1bmN0aW9uKCl7XG5cdFx0Ly8gZW5hYmxlcyBlbnRlciBrZXkgdG8gc3VibWl0IHBvc3QgZm9ybVxuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtcG9zdGluZycpLm9ua2V5cHJlc3MgPSBmdW5jdGlvbihldmVudCl7XG5cdFx0XHQvL2NvbnNvbGUubG9nKFwiSW5zaWRlIGtleXByZXNzXCIsZXZlbnQud2hpY2gpO1xuXHRcdFx0aWYgKGV2ZW50LndoaWNoID09ICcxMycpe1xuXHRcdFx0XHQvL2NvbnNvbGUubG9nKFwiZW50ZXIgcHJlc3NlZFwiKTtcblx0XHRcdFx0JCgnZm9ybSNtYXAtcG9zdGluZy1mb3JtJykuc3VibWl0KCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1wb3N0aW5nJykub25mb2N1cyA9IGZ1bmN0aW9uKGV2ZW50KXtcblx0XHRcdGNvbnNvbGUubG9nKFwib24gZm9jdXNcIik7XG5cdFx0XHQkc2NvcGUudG9nZ2xlVGltZVNsaWRlciA9IHRydWU7XG5cdFx0fVxuXG5cdFx0ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1wb3N0aW5nJykub25ibHVyID0gZnVuY3Rpb24oZXZlbnQpe1xuXHRcdFx0Y29uc29sZS5sb2coXCJvbiBibHVyXCIpO1xuXHRcdFx0JHNjb3BlLnRvZ2dsZVRpbWVTbGlkZXIgPSBmYWxzZTtcblx0XHR9XG5cblx0XHQkKCcubmF2LWJ1cmdlcicpLmNsaWNrKGZ1bmN0aW9uKCkge1xuXHRcdCAgJCgnLm5hdi1idXJnZXInKS50b2dnbGVDbGFzcygnYWN0aXZlJyk7XG5cdFx0ICAvLyQoJy5jb250cm9scycpLnRvZ2dsZUNsYXNzKCdhY3RpdmUnKTtcblx0XHQgICRzY29wZS50b2dnbGVTZWFyY2hMb2NhdGlvbiA9ICEkc2NvcGUudG9nZ2xlU2VhcmNoTG9jYXRpb247XG5cdFx0ICAkc2NvcGUuJGFwcGx5KCk7XG5cdFx0fSk7XG5cblx0fSk7XG5cbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIFNPQ0tFVFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cdHZhciB1cmw7XG5cdHZhciBob3N0bmFtZSA9IGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lO1xuXG5cdGlmIChob3N0bmFtZSA9PSBDb25maWdTdmMubG9jYWwpe1xuXHRcdHVybCA9IENvbmZpZ1N2Yy53ZWJfc29ja2V0ICsgQ29uZmlnU3ZjLmxvY2FsICsgJzonICsgQ29uZmlnU3ZjLnBvcnQ7XG5cdH1cblx0ZWxzZSBpZiAoaG9zdG5hbWUgPT0gQ29uZmlnU3ZjLmxvY2FsX2lwKSB7XG5cdFx0dXJsID0gQ29uZmlnU3ZjLndlYl9zb2NrZXQgKyBDb25maWdTdmMubG9jYWxfaXAgKyAnOicgKyBDb25maWdTdmMucG9ydDsgLy8gZGV2ZWxvcG1ldCBvbiBzb2NrZXQgbG9jYWxseSBcblx0fVxuXHRlbHNlIHtcblx0XHR1cmwgPSBDb25maWdTdmMud2ViX3NvY2tldF9zZWN1cmUgKyBDb25maWdTdmMuZGVwbG95X2RuczsgLy8gcHJvZHVjdGlvbiBkZXBsb3kgdmVyc2lvbiAtIHN0aWxsIGRlYnVnIG1vZGVcblx0fVxuXG5cdC8qIOqwnOuwnOqzvOygleydtCDrgZ3rgpjqs6Ag67Cw7Y+s7Iuc7JeQ64qUIOychOu2gOu2hOydhCDsp4DsmrDqs6Ag7JWE656YIOy9lOuTnOunjCDrgqjqsqjrj4Qg65Cc64ukLlxuXHR1cmwgPSAnd3NzOi8vZnJvemVuLWJhZGxhbmRzLTg2NDkuaGVyb2t1YXBwLmNvbSc7XG5cdCovXG5cdHZhciBjb25uZWN0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Y29ubmVjdGlvbiA9IG5ldyBXZWJTb2NrZXQodXJsKTtcblxuXHRcdGNvbm5lY3Rpb24ub25vcGVuID0gZnVuY3Rpb24oKXtcblxuXHRcdFx0Ly8gc2VuZCBndWlkIHRvIHNlcnZlciBmb3Igd3MgaWRlbnRpZmljYXRpb25cblx0XHRcdGNvbm5lY3Rpb24uc2VuZCgkc2NvcGUuZ3VpZCk7XG5cblx0XHRcdGZ1bmN0aW9uIGdldEN1cnJMb2NTdWNjZXNzKHBvcykge1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8vLy8vLy8vLy8vLy8vLy8vIFBIWVNJQ0FMIExPQ0FUSU9OXG5cdFx0XHRcdC8vIOunqOyymOydjOyXkOuKlCDsnKDsoIDsnZgg7Iuk7KCcIOychOy5mCjslbHsl5Ag7J6F7J6l7ZaI7J2E65WM7J2YIOychOy5mCnsmYAg7IS87YSwIO2PrOyngOyFmOydhCDqsJnsnbQg67O064K06rOgLFxuXHRcdFx0XHQvLyDshLzthLAg7Y+s7KeA7IWY7J2AIOqzhOyGjSDsl4XrjbDsnbTtirgg65CY7Ja07JW8IO2VnOuLpC5cblx0ICAgICAgICAgICAgdmFyIGNyZCA9IHBvcy5jb29yZHM7XG5cblx0ICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoY3JkLmxhdGl0dWRlLCBjcmQubG9uZ2l0dWRlKTtcblxuXHQgICAgICAgICAgICAvLyBzYXZlIHRoZSB1c2VyIGxvY2F0aW9uIGludG8gYXBwbGljYXRpb24gc2NvcGUgdmFyaWFibGVcblx0ICAgICAgICAgICAgJHNjb3BlLnVzZXJMb2NhdGlvbiA9IHtcblx0ICAgICAgICAgICAgXHRsYXQ6IGNyZC5sYXRpdHVkZSxcblx0ICAgICAgICAgICAgXHRsb246IGNyZC5sb25naXR1ZGVcblx0ICAgICAgICAgICAgfTtcblxuXHQgICAgICAgICAgICB2YXIgbG9jYXRpb24gPSB7XG5cdCAgICAgICAgXHRcdGxhdDpnb29nbGVMb2MubGF0KCksXG5cdCAgICAgICAgXHRcdGxvbjpnb29nbGVMb2MubG5nKClcblx0ICAgICAgICBcdH07XG5cdCAgICAgICAgXHR2YXIgbG9jYXRpb25KU09OID0gSlNPTi5zdHJpbmdpZnkobG9jYXRpb24pO1xuXHQgICAgICAgIFx0Ly9jb25zb2xlLmxvZyhcInNldHRpbmcgbG9jYXRpb25cIiwgbG9jYXRpb25KU09OKTtcblxuXHQgICAgICAgIFx0Ly8vLy8vLy8vLy8vLy8vLy8vIFdBVENIIExPQ0FUSU9OXG5cdCAgICAgICAgXHR2YXIgYm91bmRzID0gJHNjb3BlLm1hcC5nZXRCb3VuZHMoKTtcblx0ICAgICAgICAgICAgdmFyIG5lID0gYm91bmRzLmdldE5vcnRoRWFzdCgpOyAvLyBMYXRMbmcgb2YgdGhlIG5vcnRoLWVhc3QgY29ybmVyXG5cdCAgICAgICAgICAgIHZhciBzdyA9IGJvdW5kcy5nZXRTb3V0aFdlc3QoKTsgLy8gTGF0TG5nIG9mIHRoZSBzb3V0aC13ZXN0IGNvcmRlclxuXHQgICAgICAgICAgICAvL1lvdSBnZXQgbm9ydGgtd2VzdCBhbmQgc291dGgtZWFzdCBjb3JuZXJzIGZyb20gdGhlIHR3byBhYm92ZTpcblxuXHQgICAgICAgICAgICB2YXIgY3VycmVudF9tYXBfbncgPSB7IFxuXHQgICAgICAgICAgICAgICAgbGF0OiBuZS5sYXQoKSwgXG5cdCAgICAgICAgICAgICAgICBsb246IHN3LmxuZygpXG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIHZhciBjdXJyZW50X21hcF9zZSA9IHtcblx0ICAgICAgICAgICAgICAgIGxhdDogc3cubGF0KCksIFxuXHQgICAgICAgICAgICAgICAgbG9uOiBuZS5sbmcoKVxuXHQgICAgICAgICAgICB9O1xuXG5cdCAgICAgICAgICAgIHZhciBjdXJyZW50X21hcF9jZW50ZXIgPSB7XG5cdCAgICAgICAgICAgIFx0bGF0OndpbmRvdy5sb2NhbFN0b3JhZ2UubGF0aXR1ZGUsXG5cdCAgICAgICAgICAgIFx0bG9uOndpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlXG5cdCAgICAgICAgXHR9O1xuXG5cdCAgICAgICAgICAgIHZhciB3YXRjaGxvYyA9IHtcblx0XHQgICAgICAgICAgICBud19sYXQgICAgOiBjdXJyZW50X21hcF9udy5sYXQsXG5cdFx0ICAgICAgICAgICAgbndfbG9uICAgIDogY3VycmVudF9tYXBfbncubG9uLFxuXHRcdCAgICAgICAgICAgIHNlX2xhdCAgICA6IGN1cnJlbnRfbWFwX3NlLmxhdCxcblx0XHQgICAgICAgICAgICBzZV9sb25cdCAgOiBjdXJyZW50X21hcF9zZS5sb24sXG5cdFx0ICAgICAgICAgICAgY2VudGVyX2xhdDogY3VycmVudF9tYXBfY2VudGVyLmxhdCxcblx0XHQgICAgICAgICAgICBjZW50ZXJfbG9uOiBjdXJyZW50X21hcF9jZW50ZXIubG9uXG5cdFx0ICAgICAgICB9XG5cblx0ICAgICAgICBcdHZhciB3YXRjaGxvY0pTT04gPSBKU09OLnN0cmluZ2lmeSh3YXRjaGxvYyk7XG5cdCAgICAgICAgXHQvL2NvbnNvbGUubG9nKFwic2V0dGluZyB3YXRjaGxvY1wiLCB3YXRjaGxvY0pTT04pO1xuXHQgICAgICAgICAgICBcblx0ICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vIExPQ0FUSU9OIFVQREFURSBXSVRIIFNFU1NJT04gRU5URVJcblx0ICAgICAgICAgICAgLy/sl6zquLDshJwg67mE64+Z6riw7KCB7Jy866GcIOycoOyggOydmCDroZzsvIDsnbTshZjsnYQg7Ja76rOgIOyEuOyFmOydhCDrs7TrgrzsiJgg7J6I64ukLlxuXHRcdFx0XHR2YXIgc2Vzc2lvbiA9IHtcblx0XHRcdFx0XHRndWlkdGd0IDogJHNjb3BlLmd1aWR0Z3QsXG5cdFx0XHRcdFx0Z3VpZCAgICA6ICRzY29wZS5ndWlkLFxuXHRcdFx0XHRcdGxvY2F0aW9uOiBsb2NhdGlvbkpTT04sXG5cdFx0XHRcdFx0d2F0Y2hsb2M6IHdhdGNobG9jSlNPTlxuXHRcdFx0XHR9O1xuXHRcdFx0XHRTZXNzaW9uU3ZjLmVudGVyKHNlc3Npb24pOyAvLyDshJzrsoTsl5DshJwg7Jyg7KCA6rCAIOuTpOyWtOyYtOydhCDslYzrprDri6QuXG5cdCAgICAgICAgfVxuXG5cdCAgICAgICAgZnVuY3Rpb24gZ2V0Q3VyckxvY0Vycm9yKGVycikge1xuXHQgICAgICAgIFx0c3dhbChcIlwiLCBcIk5lZWQgdG8gdHVybiBvbiBsb2NhdGlvbiBzZXJ2aWNlIGZvciBwcm9wZXIgdXNlLlwiKTtcblx0ICAgICAgICAgICAgY29uc29sZS53YXJuKCdFUlJPUignICsgZXJyLmNvZGUgKyAnKTogJyArIGVyci5tZXNzYWdlKTtcblx0ICAgICAgICB9XG5cblx0ICAgICAgICAvKiBpbml0IG1hcCBhbmQgcGxhY2Ugc29tZSBtYXJrZXJzLCBzbyBldmVyeXRoaW5nIHN0YXJ0IHdpdGggdGhpcyBmdW5jdGlvbi4gKi9cblx0ICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGdldEN1cnJMb2NTdWNjZXNzLCBnZXRDdXJyTG9jRXJyb3IpO1xuXG5cdFx0XHRjb25zb2xlLmxvZygnV2ViU29ja2V0IGNvbm5lY3RlZCcpO1xuXHRcdH07XG5cblx0XHRjb25uZWN0aW9uLm9uY2xvc2UgPSBmdW5jdGlvbigpe1xuXG5cdFx0XHRjb25zb2xlLmxvZygnV2ViU29ja2V0IGNsb3NlZC4gUmVjb25lY3RpbmcuLi4nKTtcblx0XHRcdCR0aW1lb3V0KGNvbm5lY3QsIDIwMDApO1xuXHRcdH07XG5cblx0XHRjb25uZWN0aW9uLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpe1xuXHRcdFx0Ly9jb25zb2xlLmxvZygnYnJvYWRjYXN0IG1zZyBmcm9tIHNlcnZlcjonLCBlKTtcblx0XHRcdHZhciBwYXlsb2FkID0gSlNPTi5wYXJzZShlLmRhdGEpO1xuXG5cdFx0XHQvKlxuXHRcdFx0XHR3czpuZXdfcG9zdCAgICAtIOyDiOuhnOyatCDtj6zsiqTtirjqsIAg7Jis65287JmU7J2E65WMIGZyb250LWVuZOyXkOyEnCDrp7XsnbQg64uk7IucIOyXheuNsOydtO2KuCDtlbTslbwg65Cc64uk6rOgIOyVjOugpOykgOuLpCFcblx0XHRcdFx0d3M6bmV3X3Nlc3Npb24gLSBzZXNzaW9u7J20IOyDiOuhnCDrk6TslrTsmKTrqbQg65Cc64uk6rOgIOyVjOugpOykgOuLpCFcblx0XHRcdFx0d3M6cmVtb3ZlX3Bvc3QgLSDtj6zsiqTtirjqsIAg7Iuc6rCE7J20IOuLpCDrkJjslrTshJwg7IKs65287KeI65WMIVxuXHRcdFx0XHTrp6TsmrDspJHsmpQhIFxuXHRcdFx0Ki9cblx0XHRcdGNvbnNvbGUubG9nKCd3czonICsgcGF5bG9hZC50eXBlKTtcblx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgnd3M6JyArIHBheWxvYWQudHlwZSwgcGF5bG9hZC5kYXRhKTtcblx0XHR9O1xuXHR9O1xuXHRjb25uZWN0KCk7XG5cblx0Ly8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBTT0NLRVQgQlJPQURDQVNUIFJFQ0VJVkVSXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gYXMgc2VydmVyIHNvY2tldCBzZW5kICd3czpuZXdfcG9zdCcgLCB3ZSBjYW4gdXBkYXRlIHRoZSBtYXAhXG5cdCRzY29wZS4kb24oJ3dzOm5ld19wb3N0JywgZnVuY3Rpb24oXywgcG9zdCl7XG5cdFx0Ly8gdXBkYXRlIHBvc3RzIG9uIG1hcFxuXHRcdCRzY29wZS5tYXAudXBkYXRlQW5kRHJhd1Bvc3RzKCk7XG5cblx0XHQvLyBzaG93IHJlc3BvbnNpdmUgdXNlcnMgb25seSB0byB0aGUgdXNlciB3aG8gd3JvdGUgdGhpcyBwb3N0XG5cdFx0aWYgKHBvc3QuZ3VpZCA9PSAkc2NvcGUuZ3VpZClcblx0XHR7XG5cdFx0XHQvL2NvbnNvbGUubG9nKCdzdGFydCBkcmF3aW5nIHJlc3BvbnNlcy4uJyk7XG5cdFx0XHQkc2NvcGUubWFwLmRyYXdSZXNwb25zZXMocG9zdCk7XG5cdFx0fVxuXHR9KTtcblxuXHQvLyBhcyBzZXJ2ZXIgc29ja2V0IHNlbmQgJ3dzOm5ld19wb3N0JyAsIHdlIGNhbiB1cGRhdGUgdGhlIG1hcCFcblx0JHNjb3BlLiRvbignd3M6bmV3X3Nlc3Npb24nLCBmdW5jdGlvbihfLCBzZXNzaW9uKXtcblx0XHR2YXIgbG9jYXRpb24gPSBhbmd1bGFyLmZyb21Kc29uKHNlc3Npb24ubG9jYXRpb24pO1xuXHRcdCRzY29wZS5tYXAuZHJhd0N1cnJMb2NhdGlvbk1hcmtlcihsb2NhdGlvbik7XG5cblx0fSk7XG5cblx0Ly8gd2hlbiBzZXJ2ZXIgcmVtb3ZlIHRoZSBwb3N0IGFmdGVyIHRpbWUgZm9yIGxvbmdlciBvbmVzLCBcblx0Ly8gdXBkYXRlIG1hcCB3aXRoIGNvcmVzcG9uZGluZyBpbmZvXG5cdCRzY29wZS4kb24oJ3dzOnJlbW92ZV9wb3N0JywgZnVuY3Rpb24oXywgcG9zdGlkKXtcblx0XHQkc2NvcGUubWFwLnVuRHJhd1Bvc3QocG9zdGlkKTtcblx0fSk7XG5cblx0JHNjb3BlLiRvbignd3M6dXBkYXRlX2d1aWR0Z3QnLCBmdW5jdGlvbihfLCB1cGRhdGVkU2Vzc2lvbil7XG5cdFx0Ly8gdXBkYXRlIHBvc3RzIG9uIG1hcFxuXHRcdCRzY29wZS5tYXAudXBkYXRlQW5kRHJhd1Bvc3RzKCk7XG5cdH0pO1xuXG5cdC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gQVBQTElDQVRJT04gTEVWRUwgRlVOQ1RJT05TXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblx0Ly8gc2VlIGlmIGl0cyBtb2JpbGUgcGhvbmVcblx0JHNjb3BlLmlzTW9iaWxlID0gZnVuY3Rpb24oKXtcblx0XHRpZiggbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQW5kcm9pZC9pKVxuXHRcdCB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC93ZWJPUy9pKVxuXHRcdCB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGhvbmUvaSlcblx0XHQgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKVxuXHRcdCB8fCBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUG9kL2kpXG5cdFx0IHx8IG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0JsYWNrQmVycnkvaSlcblx0XHQgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvV2luZG93cyBQaG9uZS9pKVxuXHRcdCApe1xuXHRcdCAgICByZXR1cm4gdHJ1ZTtcblx0XHQgIH1cblx0XHQgZWxzZSB7XG5cdFx0ICAgIHJldHVybiBmYWxzZTtcblx0XHQgIH1cblx0fTtcblxuXHQvKiBtb3ZlIHRvIGN1cnJlbnQgbG9jYXRpb24gKi9cblx0JHNjb3BlLm1vdmVUb0N1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uKCl7XG5cdFx0ZnVuY3Rpb24gZ2V0Q3VyckxvY1N1Y2Nlc3MocG9zKSB7XG4gICAgICAgICAgICAvKiBtYWtlIHN1cmUgdG8gY2hlY2sgd2UgYXJlIG9uIHBvc3QgcGFnZSB3aXRoIG1hcCBmaXJzdCAqL1xuICAgICAgICAgICAgaWYgKCRzY29wZS5jdXJyZW50UGFnZUlkICE9ICRzY29wZS5wYWdlSWQucG9zdClcbiAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIHZhciBjcmQgPSBwb3MuY29vcmRzO1xuXG4gICAgICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlID0gY3JkLmxhdGl0dWRlO1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sb25naXR1ZGUgPSBjcmQubG9uZ2l0dWRlO1xuXG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSB7XG4gICAgICAgICAgICBcdGxhdDogY3JkLmxhdGl0dWRlLCBcbiAgICAgICAgICAgIFx0bG9uOiBjcmQubG9uZ2l0dWRlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBkcmF3IGRyb3AgZG93biB1c2VyIHBvc2l0aW9uXG4gICAgICAgICAgIFx0JHNjb3BlLm1hcC5kcmF3Q3VyckxvY2F0aW9uTWFya2VyKGxvY2F0aW9uKTtcblxuICAgICAgICAgICBcdC8vIGRyYXcgeCBtYXJrZXJcblx0ICAgICAgICAkc2NvcGUubWFwLmRyYXdYTWFya2VyKGxvY2F0aW9uKTtcblxuXHQgICAgICAgIHZhciBnb29nbGVMb2MgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmxhdCwgbG9jYXRpb24ubG9uKTtcblxuXHQgICAgICAgIC8vIG1vdmUgdG8gdGhlIGxvY2F0aW9uIGFuZCB6b29tIGludG8gcmlnaHQgYW1vdW50XG4gICAgICAgICAgICAkc2NvcGUubWFwLnBhblRvKGdvb2dsZUxvYylcbiAgICAgICAgICAgICRzY29wZS5tYXAuc2V0Wm9vbSgxNSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRDdXJyTG9jRXJyb3IoZXJyKSB7XG4gICAgICAgIFx0c3dhbChcIlwiLCBcIk5lZWQgdG8gdHVybiBvbiBsb2NhdGlvbiBzZXJ2aWNlIGZvciBwcm9wZXIgdXNlLlwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRVJST1IoJyArIGVyci5jb2RlICsgJyk6ICcgKyBlcnIubWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiBpbml0IG1hcCBhbmQgcGxhY2Ugc29tZSBtYXJrZXJzLCBzbyBldmVyeXRoaW5nIHN0YXJ0IHdpdGggdGhpcyBmdW5jdGlvbi4gKi9cbiAgICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihnZXRDdXJyTG9jU3VjY2VzcywgZ2V0Q3VyckxvY0Vycm9yKTtcblxuICAgICAgICBzd2FsKHsgICB0aXRsZTogXCJcIiwgICB0ZXh0OiBcIk1vdmluZyB0byBjdXJyZW50IGxvY2F0aW9uLi5cIiwgICB0aW1lcjogMTUwMCwgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UgfSk7XG5cdH07XG5cblx0JHNjb3BlLm1vdmVUb1Bvc3RMb2NhdGlvbiA9IGZ1bmN0aW9uKCl7XG5cdFx0dmFyIGxhdERlbHRhID0gMC4wO1xuXG5cdFx0aWYgKCRzY29wZS5pc01vYmlsZSgpKXtcblx0XHRcdHZhciBib3VuZHMgPSAkc2NvcGUubWFwLmdldEJvdW5kcygpO1xuXHQgICAgICAgIHZhciBuZSA9IGJvdW5kcy5nZXROb3J0aEVhc3QoKTsgLy8gTGF0TG5nIG9mIHRoZSBub3J0aC1lYXN0IGNvcm5lclxuXHQgICAgICAgIHZhciBzdyA9IGJvdW5kcy5nZXRTb3V0aFdlc3QoKTsgLy8gTGF0TG5nIG9mIHRoZSBzb3V0aC13ZXN0IGNvcmRlclxuXHQgICAgICAgIGN1cnJlbnRfbWFwX253ID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhuZS5sYXQoKSwgc3cubG5nKCkpO1xuXHQgICAgICAgIGN1cnJlbnRfbWFwX3NlID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhzdy5sYXQoKSwgbmUubG5nKCkpO1xuXG5cdCAgICAgICAgdmFyIGxhdERlbHRhX2NlbnRlcjJub3J0aCA9IDAuNSAqIE1hdGguYWJzKCRzY29wZS5wb3N0TG9jYXRpb24ubGF0IC0gY3VycmVudF9tYXBfbncubGF0KCkpO1xuXHQgICAgICAgIHZhciBsYXREZWx0YV9jZW50ZXIyc291dGggPSAwLjUgKiBNYXRoLmFicygkc2NvcGUucG9zdExvY2F0aW9uLmxhdCAtIGN1cnJlbnRfbWFwX3NlLmxhdCgpKTtcblxuXHQgICAgICAgIGlmIChsYXREZWx0YV9jZW50ZXIybm9ydGggPiBsYXREZWx0YV9jZW50ZXIyc291dGgpe1xuXHQgICAgICAgIFx0bGF0RGVsdGEgPSBsYXREZWx0YV9jZW50ZXIyc291dGg7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGVsc2Uge1xuXHQgICAgICAgIFx0bGF0RGVsdGEgPSBsYXREZWx0YV9jZW50ZXIybm9ydGg7XG5cdCAgICAgICAgfVxuXHRcdH1cblxuXHRcdHZhciBnb29nbGVMb2MgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKCRzY29wZS5wb3N0TG9jYXRpb24ubGF0ICsgbGF0RGVsdGEsICRzY29wZS5wb3N0TG9jYXRpb24ubG9uKTtcblx0XHQkc2NvcGUubWFwLnBhblRvKGdvb2dsZUxvYyk7XG5cdH07XG5cblx0JHNjb3BlLmNvbGxhcHNlID0gZnVuY3Rpb24oKXtcblx0XHQkc2NvcGUubmF2Q29sbGFwc2VkID0gdHJ1ZTtcblx0fTtcblxuXHQvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIEdFTkVSQUwgQlJPQURDQVNUIFJFQ0VJVkVSXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAkc2NvcGUuJG9uKCdzZXQ6bWFwJywgZnVuY3Rpb24oXywgbWFwKXtcblx0XHQkc2NvcGUubWFwID0gbWFwO1xuXHR9KTtcblxuICAgICRzY29wZS4kb24oJ3NldDpndWlkdGd0JywgZnVuY3Rpb24oXywgZ3VpZHRndCl7XG5cdFx0JHNjb3BlLmd1aWR0Z3QgPSBndWlkdGd0O1xuXG5cdFx0Ly8gaXRzIHZlcnkgaW1wb3JhbnQgdG8gc2V0IGxvY2FsIHN0b3JhZ2UgZ3VpZHRndFxuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ3VpZHRndCA9IGd1aWR0Z3Q7XG5cdH0pO1xuXG5cdCRzY29wZS4kb24oJ3NldDpwYWdlY2hhbmdlJywgZnVuY3Rpb24oXywgcGFnZUlkKXtcblx0XHQkc2NvcGUuY3VycmVudFBhZ2VJZCA9IHBhZ2VJZDtcblx0fSk7XG5cblx0JHNjb3BlLiRvbignc2V0OmxvYycsIGZ1bmN0aW9uKF8sIGxvY2F0aW9uKXtcblx0XHR2YXIgbGF0ID0gbG9jYXRpb24ubGF0KCk7XG5cdFx0dmFyIGxvbiA9IGxvY2F0aW9uLmxuZygpO1xuXHRcdCRzY29wZS5wb3N0TG9jYXRpb24gPSB7XG5cdFx0XHRsYXQ6IGxhdCxcblx0XHRcdGxvbjogbG9uXG5cdFx0fTtcblx0fSk7XG5cblx0JHNjb3BlLiRvbignc2V0OnBsYWNlJywgZnVuY3Rpb24oXywgcGxhY2Upe1xuXHRcdC8vIEZvcmNpbmcgdGhlIHVwZGF0ZSB3aXRoICRhcHBseSgpIG1ldGhvZCBvbiAkc2NvcGVcblx0XHQvLyBwcm9ibGVtIHJlbGF0ZWQgbm90ZTogaHR0cDovL3d3dy5qZWZmcnlob3VzZXIuY29tL2luZGV4LmNmbS8yMDE0LzYvMi9Ib3ctZG8tSS1ydW4tY29kZS13aGVuLWEtdmFyaWFibGUtY2hhbmdlcy13aXRoLUFuZ3VsYXJKU1xuXHRcdCRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKXtcblx0XHRcdFx0JHNjb3BlLnBvc3RwbGFjZSA9IHBsYWNlO1xuXHRcdFx0fVxuXHRcdCk7XG5cdH0pO1xufSk7XG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25zdGFudCgnQ29uZmlnU3ZjJywge1xuXHRcIndlYl9zb2NrZXRcIlx0XHQ6IFwid3M6Ly9cIixcblx0XCJ3ZWJfc29ja2V0X3NlY3VyZVwiIDogXCJ3c3M6Ly9cIixcblx0XCJsb2NhbFwiXHRcdFx0XHQ6IFwibG9jYWxob3N0XCIsXG5cdFwibG9jYWxfaXBcIlx0XHRcdDogXCIxOTIuMTY4LjAuNFwiLFxuXHRcImRlcGxveV9kbnNcIlx0XHQ6IFwiY2xvdWR0YWxrLmhlcm9rdWFwcC5jb21cIixcblx0XCJwb3J0XCJcdFx0XHRcdDogXCI1MDAwXCIsXG5cdFwibWF4SW5zdGFudExpZmVTcGFuXCI6IDUwMDAsXG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29uZmlnKGZ1bmN0aW9uICgkcm91dGVQcm92aWRlcil7XG5cdCRyb3V0ZVByb3ZpZGVyXG5cdC53aGVuKCcvJywgXG5cdFx0e1xuXHRcdFx0Y29udHJvbGxlcjogJ1Bvc3RzQ3RybCcsIFxuXHRcdFx0dGVtcGxhdGVVcmw6ICcvdGVtcGxhdGVzL3Bvc3RzLmh0bWwnXG5cdFx0fSlcblx0Ly8gUmVkaXJlY3QgdG8gdGhlIHJvb3QgcGFnZS5cblx0Lm90aGVyd2lzZShcblx0XHR7XG4gICBcdFx0XHRyZWRpcmVjdFRvOiAnLydcblx0XHR9KTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdVdGlsU3ZjJywgZnVuY3Rpb24oKXtcblx0dmFyIHN2YyA9IHRoaXM7XG5cblx0c3ZjLmRlZzJyYWQgPSBmdW5jdGlvbihkZWcpIHtcblx0ICByZXR1cm4gZGVnICogKE1hdGguUEkvMTgwKTtcblx0fTtcblxuXHRzdmMuZ2V0RGlzdGFuY2VGcm9tTGF0TG9uSW5LbSA9IGZ1bmN0aW9uIChsYXQxLGxvbjEsbGF0Mixsb24yKSB7XG5cdCAgdmFyIFIgPSA2MzcxO1xuXHQgIHZhciBkTGF0ID0gc3ZjLmRlZzJyYWQobGF0Mi1sYXQxKTtcblx0ICB2YXIgZExvbiA9IHN2Yy5kZWcycmFkKGxvbjItbG9uMSk7IFxuXHQgIHZhciBhID0gXG5cdCAgICBNYXRoLnNpbihkTGF0LzIpICogTWF0aC5zaW4oZExhdC8yKSArXG5cdCAgICBNYXRoLmNvcyhzdmMuZGVnMnJhZChsYXQxKSkgKiBNYXRoLmNvcyhzdmMuZGVnMnJhZChsYXQyKSkgKiBcblx0ICAgIE1hdGguc2luKGRMb24vMikgKiBNYXRoLnNpbihkTG9uLzIpXG5cdCAgICA7IFxuXHQgIHZhciBjID0gMiAqIE1hdGguYXRhbjIoTWF0aC5zcXJ0KGEpLCBNYXRoLnNxcnQoMS1hKSk7IFxuXHQgIHZhciBkID0gUiAqIGM7XG5cdCAgcmV0dXJuIGQ7XG5cdH07XG5cblx0c3ZjLm1hcFJhbmdlID0gZnVuY3Rpb24gKHZhbHVlLCBsb3cxLCBoaWdoMSwgbG93MiwgaGlnaDIpIHtcblx0ICAgIHJldHVybiBsb3cyICsgKGhpZ2gyIC0gbG93MikgKiAodmFsdWUgLSBsb3cxKSAvIChoaWdoMSAtIGxvdzEpO1xuXHR9O1xuXG5cdHN2Yy5nZXRHdWlkID0gZnVuY3Rpb24gKCkge1xuXHRcdGZ1bmN0aW9uIHM0KCkge1xuXHRcdCAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcblx0XHQgICAgICAudG9TdHJpbmcoMTYpXG5cdFx0ICAgICAgLnN1YnN0cmluZygxKTtcblx0XHR9XG5cdCAgXHRyZXR1cm4gczQoKSArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgczQoKSArIHM0KCk7XG5cdH07XG59KTtcbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnJ1bihmdW5jdGlvbigkcm9vdFNjb3BlLCAkdGltZW91dCwgU2Vzc2lvblN2Yyl7XG5cblxufSk7XG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5kaXJlY3RpdmUoJ2FwcE1hcCcsIGZ1bmN0aW9uKFBvc3RzU3ZjLCBVdGlsU3ZjLCBDb25maWdTdmMsIFNlc3Npb25TdmMsICRjb21waWxlLCAkdGltZW91dCkge1xuICAgIC8vIGRpcmVjdGl2ZSBsaW5rIGZ1bmN0aW9uXG4gICAgdmFyIGxpbmsgPSBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcblxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBHTE9CQUwgVkFSSUFCTEVTIElOIExJTksgRlVOQ1RJT05cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgdmFyIG1hcDsgLy8gZXhwYW5kIGZyb20gZ29vZ2xlIG1hcCBmb3IgbWFudWFsbHkgY3JlYXRlZCBldmVudHNcbiAgICAgICAgdmFyIG1hcF9vcmlnaW47IC8vIGZvciBvcmlnaW5hbCBnb29nbGUgbWFwIGV2ZW50IGZ1bmN0aW9uIGxpbmtzXG4gICAgICAgIHZhciBjdXJyZW50X21hcF9udztcbiAgICAgICAgdmFyIGN1cnJlbnRfbWFwX3NlO1xuICAgICAgICB2YXIgbWFwT3B0aW9ucztcbiAgICAgICAgdmFyIGluaXRpYWxNYXBDZW50ZXI7XG4gICAgICAgIHZhciBDTE9VRF9NQVBfSUQgPSAnY3VzdG9tX3N0eWxlJzsgLy8gbWFwIHN0eWxlXG4gICAgICAgIHZhciBoZWxwZXJNYXJrZXJzID0gW107XG4gICAgICAgIHZhciBtYXJrZXJzT25NYXAgPSBbXTtcblxuICAgICAgICB2YXIgcHJldkd1aWR0Z3QgPSAnMCc7XG4gICAgICAgIHZhciBpc0d1aWR0Z3RDaGFuZ2VkO1xuXG4gICAgICAgIHZhciBpbWFnZVBvc3QgPSB7XG4gICAgICAgICAgICB1cmw6ICdodHRwczovL2NhdGNobWUuaWZ5b3VjYW4uY29tL2ltYWdlcy9waWN0dXJlcy9JWUNfSWNvbnMvSVlDX0xvY2F0aW9uX0ljb25fU21hbGwucG5nJyxcbiAgICAgICAgICAgIHNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDEwMCwgMTAwKSxcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDAsIDApLFxuICAgICAgICAgICAgYW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMTcsIDM0KSxcbiAgICAgICAgICAgIHNjYWxlZFNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDEsIDEpXG4gICAgICAgIH07XG4gICAgICAgIHZhciBpbWFnZVRhcmdldCA9IHtcbiAgICAgICAgICAgIHVybDogJ2h0dHA6Ly93d3cuY2xrZXIuY29tL2NsaXBhcnRzL1UvUC9qL00vSS9pL3gtbWFyay15ZWxsb3ctbWQucG5nJyxcbiAgICAgICAgICAgIHNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDEwMCwgMTAwKSxcbiAgICAgICAgICAgIG9yaWdpbjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDAsIDApLFxuICAgICAgICAgICAgYW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMTcsIDM0KSxcbiAgICAgICAgICAgIHNjYWxlZFNpemU6IG5ldyBnb29nbGUubWFwcy5TaXplKDI1LCAyNSlcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGltYWdlVXNlckxvZ2luID0ge1xuICAgICAgICAgICAgdXJsOiAnaHR0cDovL3d3dy5jbGtlci5jb20vY2xpcGFydHMvcS9vLzIvSy9nL1YvbG9jYXRpb24tc3ltYm9sLW1hcC1tZC5wbmcnLFxuICAgICAgICAgICAgc2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMTAwLCAxMDApLFxuICAgICAgICAgICAgb3JpZ2luOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoMCwgMCksXG4gICAgICAgICAgICBhbmNob3I6IG5ldyBnb29nbGUubWFwcy5Qb2ludCgxNywgMzQpLFxuICAgICAgICAgICAgc2NhbGVkU2l6ZTogbmV3IGdvb2dsZS5tYXBzLlNpemUoMjAsIDMzKVxuICAgICAgICB9O1xuICAgICAgICB2YXIgaW1hZ2VMaXN0ZW5lciA9IHtcbiAgICAgICAgICAgIHVybDogJ2h0dHA6Ly8yLmJwLmJsb2dzcG90LmNvbS8tZGpNYV9uNW5BRU0vVDFHdnhfLTctekkvQUFBQUFBQUFBUTQvLTFONmxsZVF2WmMvczE2MDAvYmxpbmtpbmdfZG90LmdpZicsXG4gICAgICAgICAgICBzaXplOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgxMDAsIDEwMCksXG4gICAgICAgICAgICBvcmlnaW46IG5ldyBnb29nbGUubWFwcy5Qb2ludCgwLCAwKSxcbiAgICAgICAgICAgIGFuY2hvcjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KDEwLCAxMCksXG4gICAgICAgICAgICBzY2FsZWRTaXplOiBuZXcgZ29vZ2xlLm1hcHMuU2l6ZSgxNywgMTcpXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gRVZFTlQgSEFORExFUlMgLSBVUERBVEVcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlRGVmYXVsdExvY2F0aW9uKClcbiAgICAgICAge1xuICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSA9IG1hcC5nZXRDZW50ZXIoKS5sYXQoKTtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gbWFwLmdldENlbnRlcigpLmxuZygpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQm91bmRzKClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IG1hcC5nZXRCb3VuZHMoKTtcbiAgICAgICAgICAgIHZhciBuZSA9IGJvdW5kcy5nZXROb3J0aEVhc3QoKTsgLy8gTGF0TG5nIG9mIHRoZSBub3J0aC1lYXN0IGNvcm5lclxuICAgICAgICAgICAgdmFyIHN3ID0gYm91bmRzLmdldFNvdXRoV2VzdCgpOyAvLyBMYXRMbmcgb2YgdGhlIHNvdXRoLXdlc3QgY29yZGVyXG4gICAgICAgICAgICAvL1lvdSBnZXQgbm9ydGgtd2VzdCBhbmQgc291dGgtZWFzdCBjb3JuZXJzIGZyb20gdGhlIHR3byBhYm92ZTpcblxuICAgICAgICAgICAgY3VycmVudF9tYXBfbncgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKG5lLmxhdCgpLCBzdy5sbmcoKSk7XG4gICAgICAgICAgICBjdXJyZW50X21hcF9zZSA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoc3cubGF0KCksIG5lLmxuZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVdhdGNoTG9jYXRpb24oKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgYm91bmRzID0gbWFwLmdldEJvdW5kcygpO1xuICAgICAgICAgICAgdmFyIG5lID0gYm91bmRzLmdldE5vcnRoRWFzdCgpOyAvLyBMYXRMbmcgb2YgdGhlIG5vcnRoLWVhc3QgY29ybmVyXG4gICAgICAgICAgICB2YXIgc3cgPSBib3VuZHMuZ2V0U291dGhXZXN0KCk7IC8vIExhdExuZyBvZiB0aGUgc291dGgtd2VzdCBjb3JkZXJcbiAgICAgICAgICAgIC8vWW91IGdldCBub3J0aC13ZXN0IGFuZCBzb3V0aC1lYXN0IGNvcm5lcnMgZnJvbSB0aGUgdHdvIGFib3ZlOlxuXG4gICAgICAgICAgICBjdXJyZW50X21hcF9udyA9IHsgXG4gICAgICAgICAgICAgICAgbGF0OiBuZS5sYXQoKSwgXG4gICAgICAgICAgICAgICAgbG9uOiBzdy5sbmcoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGN1cnJlbnRfbWFwX3NlID0ge1xuICAgICAgICAgICAgICAgIGxhdDogc3cubGF0KCksIFxuICAgICAgICAgICAgICAgIGxvbjogbmUubG5nKClcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBjdXJyZW50X21hcF9jZW50ZXIgO1xuXG4gICAgICAgICAgICAvLyBzZWUgaWYgdGhlIGxhdGVzdCB4IG1hcmtlciBvciBwb3N0IGxvY2F0aW9uIGlzIHdpdGhpbiB1c2VyJ3Mgdmlld1xuICAgICAgICAgICAgaWYgKCEoc2NvcGUucG9zdExvY2F0aW9uLmxhdCA8IGN1cnJlbnRfbWFwX253LmxhdCkgfHxcbiAgICAgICAgICAgICAgICAhKHNjb3BlLnBvc3RMb2NhdGlvbi5sYXQgPiBjdXJyZW50X21hcF9zZS5sYXQpIHx8XG4gICAgICAgICAgICAgICAgIShzY29wZS5wb3N0TG9jYXRpb24ubG9uIDwgY3VycmVudF9tYXBfc2UubG9uKSB8fFxuICAgICAgICAgICAgICAgICEoc2NvcGUucG9zdExvY2F0aW9uLmxvbiA+IGN1cnJlbnRfbWFwX253LmxvbikgKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIC8vIGlmIGl0IGlzIG5vdCB3aXRoaW4gdXNlcidzIHZpZXcsIHRoZW4ganVzdCB1c2UgbWFwIGNlbnRlclxuICAgICAgICAgICAgICAgIGN1cnJlbnRfbWFwX2NlbnRlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGF0OiBtYXAuZ2V0Q2VudGVyKCkubGF0KCksXG4gICAgICAgICAgICAgICAgICAgIGxvbjogbWFwLmdldENlbnRlcigpLmxuZygpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAvLyBpZiBpdCBpcyB3aXRoaW4gdXNlcidzIHZpZXcsIHVzZSB4IG1hcmtlciBsb2NhdGlvbiBhLmsuYSBwb3N0IGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgY3VycmVudF9tYXBfY2VudGVyID0ge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IHNjb3BlLnBvc3RMb2NhdGlvbi5sYXQsXG4gICAgICAgICAgICAgICAgICAgIGxvbjogc2NvcGUucG9zdExvY2F0aW9uLmxvblxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBTZXNzaW9uU3ZjLnVwZGF0ZVdhdGNoTG9jYXRpb24oY3VycmVudF9tYXBfbncsIGN1cnJlbnRfbWFwX3NlLCBjdXJyZW50X21hcF9jZW50ZXIsIHNjb3BlLmd1aWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gRVZFTlQgSEFORExFUlMgLSBEUkFXXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIHVwZGF0ZSByZXNwb25zZXMgc3VjaCBhcyB2aXN1YWxpemF0aW9uIG9mIGxpc3RlbmVyc1xuICAgICAgICBmdW5jdGlvbiBkcmF3UmVzcG9uc2VzKHBvc3Qpe1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVmZXJlbmNlIHBvc3Q6JywgcG9zdCk7XG5cbiAgICAgICAgICAgIFNlc3Npb25TdmMuZmV0Y2goKVxuICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oc2Vzc2lvbnMpe1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXNzaW9ucy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXNzaW9uID0gc2Vzc2lvbnNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCBteSBzZXNzaW9uIC0gbm8gbmVlZCB0byBkcmF3IOuCtCDsnpDsi6DsnZgg7IS47IWY7J2AIOq3uOumtO2VhOyalOqwgCDsl4bri6QuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLmd1aWQgPT0gc2NvcGUuZ3VpZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAvLyBzZXNzaW9uJ3Mgd2F0Y2ggbG9jYXRpb24gd2lsbCBiZSBib3VuY2VkIVxuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdzZXNzaW9uIHdhdGNoIGxvY2F0aW9uOicsIHNlc3Npb24ud2F0Y2hsb2MpO1xuICAgICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdwb3N0IGxvY2F0aW9uOicsIHBvc3QubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgd2F0Y2hfbG9jYXRpb24gPSBhbmd1bGFyLmZyb21Kc29uKHNlc3Npb24ud2F0Y2hsb2MpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdF9sb2NhdGlvbiAgPSBhbmd1bGFyLmZyb21Kc29uKHBvc3QubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8g7Jyg7KCA6rCAIOuztOqzoCDsnojripQg67CU7Jq0642U66asIOyViOyXkCDqt7ggc2Vzc2lvbijri6TrpbjsnKDsoIApIOyytO2CgVxuXG4gICAgICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coY3VycmVudF9tYXBfc2UsIGN1cnJlbnRfbWFwX253KTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQm91bmRzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHdhdGNoX2xvY2F0aW9uLmNlbnRlcl9sYXQgPCBjdXJyZW50X21hcF9udy5sYXQoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICEod2F0Y2hfbG9jYXRpb24uY2VudGVyX2xhdCA+IGN1cnJlbnRfbWFwX3NlLmxhdCgpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgISh3YXRjaF9sb2NhdGlvbi5jZW50ZXJfbG9uIDwgY3VycmVudF9tYXBfc2UubG5nKCkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhKHdhdGNoX2xvY2F0aW9uLmNlbnRlcl9sb24gPiBjdXJyZW50X21hcF9udy5sbmcoKSkgKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHNlc3Npb24o64uk66W47Jyg7KCAKeuTpOydtCDqt7gg7Y+s7Iqk7Yq466W8IOuztOqzoCDsnojsp4Ag7JWK7Jy866m0IOyKpO2CtS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEocG9zdF9sb2NhdGlvbi5sYXQgPCB3YXRjaF9sb2NhdGlvbi5ud19sYXQpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhKHBvc3RfbG9jYXRpb24ubGF0ID4gd2F0Y2hfbG9jYXRpb24uc2VfbGF0KSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIShwb3N0X2xvY2F0aW9uLmxvbiA8IHdhdGNoX2xvY2F0aW9uLnNlX2xvbikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICEocG9zdF9sb2NhdGlvbi5sb24gPiB3YXRjaF9sb2NhdGlvbi5ud19sb24pIClcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcod2F0Y2hfbG9jYXRpb24uY2VudGVyX2xhdCwgd2F0Y2hfbG9jYXRpb24uY2VudGVyX2xvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbWFya2VyIG9wdGlvbiBzZXR0aW5nXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGdvb2dsZUxvYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hbmltYXRpb246IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5CT1VOQ0UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJVc2VyUGluXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpbWFnZUxpc3RlbmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW1pemVkOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKG1hcmtlck9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB1c2VyX2xvY2F0aW9uX21hcmtlcl9saWZlc3BhbiA9IDE4MDA7XG5cbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24ob2xkX21hcmtlcil7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZF9tYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KG1hcmtlcikpLCBcbiAgICAgICAgICAgICAgICAgICAgdXNlcl9sb2NhdGlvbl9tYXJrZXJfbGlmZXNwYW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlQW5kRHJhd1Bvc3RzKCl7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGZvciBjaGVja2luZyBsb2NhbCBwb3N0cyAtIGlzUG9pbnRpbmdZb3VcbiAgICAgICAgICAgIGlzR3VpZHRndENoYW5nZWQgPSBwcmV2R3VpZHRndCAhPSBzY29wZS5ndWlkdGd0OyAvLyBzZWUgaWYgbXkgZ3VpZHRndCBoYXMgY2hhbmdlZDtcbiAgICAgICAgICAgIHByZXZHdWlkdGd0ID0gc2NvcGUuZ3VpZHRndDsgLy8gdXBkYXRlIHByZXZpb3VzIGd1aWR0Z3RcblxuICAgICAgICAgICAgLy92YXIgZ3VpZE9iaiA9IHtndWlkOiBzY29wZS5ndWlkfSAvLyBmb3Igc29ja2V0IGZldGNoIG9wdGltaXphdGlvbiBUT0RPXG4gICAgICAgICAgICBQb3N0c1N2Yy5mZXRjaCgpXG4gICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihwb3N0cyl7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc3RzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3QgPSBwb3N0c1tpXTtcblxuICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFNUQVJUIC0gQ0hFQ0sgSUYgSVRTIFdJVEhJTiBWSUVXIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gYW5ndWxhci5mcm9tSnNvbihwb3N0LmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0LCBsb2NhdGlvbi5sb24pO1xuXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUJvdW5kcygpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShnb29nbGVMb2MubGF0KCkgPCBjdXJyZW50X21hcF9udy5sYXQoKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICEoZ29vZ2xlTG9jLmxhdCgpID4gY3VycmVudF9tYXBfc2UubGF0KCkpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhKGdvb2dsZUxvYy5sbmcoKSA8IGN1cnJlbnRfbWFwX3NlLmxuZygpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIShnb29nbGVMb2MubG5nKCkgPiBjdXJyZW50X21hcF9udy5sbmcoKSkgKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gc2tpcCB0aGlzIHBvc3QgLSBubyBuZWVkIHRvIGRyYXdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vIEVORCAtIENIRUNLIElGIElUUyBXSVRISU4gVklFVyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFNUQVJUIC0gQ0hFQ0sgV0UgSEFWRSBUTyBSRURSQVcgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbWFya2VycyBwb3N0IGlzIGV4aXNpdGluZyBvbmUsIHdlIGRvbid0IHdhbnQgdG8gZHJhdyBpdCBhZ2Fpbi5cbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSBkcmF3IG5ldyBvbmVzIVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgbWFya2VyOyBtYXJrZXIgPSBtYXJrZXJzT25NYXBbal07IGorKyl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8v7J2067aA67aEIOuhnOyngeydhCDri6Tsi5wg7Kec7JW87ZWoXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNBbHJlYWR5RHJhd24gPSBwb3N0Ll9pZCA9PSBtYXJrZXIucG9zdC5faWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBbHJlYWR5RHJhd24pIC8vIOydtOuvuCDqt7jroKTsoYzripTsp4Ag7YWM7Iqk7Yq4XG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzR3VpZHRndENoYW5nZWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bkRyYXdQb3N0KHBvc3QuX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXJrZXIucG9zdC5ndWlkdGd0ID09IHBvc3QuZ3VpZHRndCl7ICAvLyDsnbTrr7gg6re466Ck7KeE6rKD7KSRLCBndWlkdGd07J20IOuwlOuAjOyXiOuKlOqwgFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ID0gbnVsbDsgLy8g7J2066+4IOq3uOugpOynhCDtj6zsiqTtirjrnbzrqbQsIG51bGzroZwuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOyAvLyDsnbQgbG9vcOydgCBwb3N0Ll9pZOunjCDqsoDsgqzsmqnsnoTsnLzroZwsIOunjOyVvSDqsrnsuZjrqbQg67CU66GcIGxvb3DsnYQg66mI7Law64+EIOq0nOywruuLpC59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5EcmF3UG9zdChwb3N0Ll9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3N0ID09IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7IC8vIHNraXAgdGhpcyBwb3N0IC0gbm8gbmVlZCB0byBkcmF3XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBFTkQgLSBDSEVDSyBXRSBIQVZFIFRPIFJFRFJBVyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cblxuICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFNUQVJUIC0gRFJBV0lORyBQT1NUIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gbWFya2VyIG9wdGlvbiBzZXR0aW5nXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGdvb2dsZUxvYyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcDogbWFwLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiQnViYmxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpbWFnZVBvc3RcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIobWFya2VyT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZCBtYXJrZXIgdG8gYXJyYXksIHRoaXMgbWVhbnMgdGhhdCBpdCBoYXMgYmVlbiBkcmF3biB0byBtYXBcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc09uTWFwLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyOiBtYXJrZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdCAgOiBwb3N0XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vIFNUQVJUIC0gRFJBV0lORyBNRVNTQUdFIFdJTkRPVyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb3VwbGluZ19zdGF0dXMgPSBjYWxjdWxhdGVDb3VwbGluZyhwb3N0Lmd1aWQsIHBvc3QuZ3VpZHRndCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcInBvc3QuaXNMb2NhbFwiLCBwb3N0LmlzbG9jYWwpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYWxfc3RhdHVzID0gcG9zdC5pc2xvY2FsO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIOyKpOy9lO2UhOyXkOyEnOu2gO2EsCDsg4jroZzsmrQg7LCo7J2865OcIOyKpOy9lO2UhOulvCDrp4zrk6TslrQgZWFjaCBmb3IgbG9vcOyXkOyEnCDsgqzsmqntlZzri6QuXG4gICAgICAgICAgICAgICAgICAgIC8vIC0tPiDtlbTslbwsIOqwgSBET03snbQg6rCB6rCB7J2YIHNjb3Bl66W8IOqwgOyguOyEnCBwb3N0IG1zZ+qwgCDslYgg6rK57Lmc64ukLlxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gc2NvcGU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcGVuSW5mb1dpbmRvdyA9IChmdW5jdGlvbihtYXJrZXIsIGNoaWxkX3Njb3BlLCBwb3N0LCBjb3VwbGluZ19zdGF0dXMsIGxvY2FsX3N0YXR1cyl7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgd2luZG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZm9XaW5kb3dPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbE9mZnNldDogbmV3IGdvb2dsZS5tYXBzLlNpemUoLTM5LjUsIDE2LjApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlQXV0b1BhbjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZm9XaW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdyhpbmZvV2luZG93T3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgY3VycmVudCB0aW1lIGFuZCBzdWJ0cmFjdCBpdCBmcm9tIHBvc3QncyBlbmQgdGltZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IHdpbGwgYmUgYWNjdXJhdGUgcG9zdCB0aW1lIGZvciBpbnN0YW50IHBvc3RzIGFuZCBsb25nIHBvc3RzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50RGF0ZSAgICAgID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFRpbWVNaWxsaSA9IGN1cnJlbnREYXRlLmdldFRpbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdGxpZmUgICAgICAgICA9ICgocG9zdC5saWZlZW5kIC0gY3VycmVudFRpbWVNaWxsaSkgPj0gMCkgPyAocG9zdC5saWZlZW5kIC0gY3VycmVudFRpbWVNaWxsaSkgOiAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpZmVwZXJjZW50YWdlID0gKHBvc3RsaWZlIC8gcG9zdC5saWZlc3BhbikudG9GaXhlZCgyKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90byBtYWtlIGRhdGEgYXZhaWxhYmxlIHRvIHRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfc2NvcGUubXNnICAgICAgICAgICAgICAgID0gcG9zdC5ib2R5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX3Njb3BlLnBvc3RsaWZlICAgICAgICAgICA9IHBvc3RsaWZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX3Njb3BlLnBvc3RndWlkICAgICAgICAgICA9IHBvc3QuZ3VpZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZF9zY29wZS5wb3N0Z3VpZHRndCAgICAgICAgPSBwb3N0Lmd1aWR0Z3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRfc2NvcGUucG9zdGNvdXBsZXN0YXR1cyAgID0gY291cGxpbmdfc3RhdHVzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX3Njb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA9IGxpZmVwZXJjZW50YWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX3Njb3BlLnBvc3Rsb2NhbHN0YXR1cyAgICA9IGxvY2FsX3N0YXR1cztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBlbmFibGVzIGNoYW5naW5nIGNvdXBsaW5nIHZhbHVlIGluc3RhbnRseS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZF9zY29wZS4kb24oJ3NldDpjb3VwbGluZycsIGZ1bmN0aW9uKF8sIGNvdXBsaW5nX3VwZGF0ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkX3Njb3BlLnBvc3Rjb3VwbGVzdGF0dXMgPSBjb3VwbGluZ191cGRhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbXBpbGUgaXQgYmVmb3JlIGxvYWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ICA9ICc8ZGl2IG1hcC1tc2c+PC9kaXY+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29tcGlsZWQgPSAkY29tcGlsZShjb250ZW50KShjaGlsZF9zY29wZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvV2luZG93LnNldENvbnRlbnQoIGNvbXBpbGVkWzBdICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihpbmZvV2luZG93LCdjbG9zZWNsaWNrJyxmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zdC5ndWlkID09IHNjb3BlLmd1aWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2FsKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkFyZSB5b3Ugc3VyZT9cIiwgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIllvdSB3aWxsIG5vdCBiZSBhYmxlIHRvIHJlY292ZXIgdGhpcyBpbWFnaW5hcnkgZmlsZSFcIiwgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcIndhcm5pbmdcIiwgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiB0cnVlLCAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogXCIjREQ2QjU1XCIsICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCBkZWxldGUgaXQhXCIsICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VPbkNvbmZpcm06IGZhbHNlIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihpc0NvbmZpcm0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0NvbmZpcm0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3N0c1N2Yy5yZW1vdmUocG9zdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3YWwoXCJEZWxldGVkIVwiLCBcIllvdXIgaW1hZ2luYXJ5IGZpbGUgaGFzIGJlZW4gZGVsZXRlZC5cIiwgXCJzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cub3BlbihtYXAgLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9XaW5kb3cub3BlbihtYXAgLCBtYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSkobWFya2VyLCBjaGlsZCwgcG9zdCwgY291cGxpbmdfc3RhdHVzLCBsb2NhbF9zdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgb3BlbkluZm9XaW5kb3coKTtcbiAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLyBFTkQgLSBEUkFXSU5HIE1FU1NBR0UgV0lORE9XIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgICAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vIEVORCAtIERSQVdJTkcgUE9TVCAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgICAgICAgICAgICB9IC8vIGVuZCBvZiBmb3ItbG9vcFxuICAgICAgICAgICAgfSk7IC8vIGVuZCBvZiBwb3N0IGZldGNoIHN1Y2Nlc3NcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdEcm9wRG93bihsb2NhdGlvbilcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0LCBsb2NhdGlvbi5sb24pO1xuXG4gICAgICAgICAgICB1cGRhdGVCb3VuZHMoKTtcbiAgICAgICAgICAgIC8vIOuwlOyatOuNlOumrCDslYjsl5Ag7J6I64qU7KeA67aA7YSwIOyytO2BrOulvCDtlZjsnqVcbiAgICAgICAgICAgIGlmICghKGdvb2dsZUxvYy5sYXQoKSA8IGN1cnJlbnRfbWFwX253LmxhdCgpKSB8fFxuICAgICAgICAgICAgICAgICEoZ29vZ2xlTG9jLmxhdCgpID4gY3VycmVudF9tYXBfc2UubGF0KCkpIHx8XG4gICAgICAgICAgICAgICAgIShnb29nbGVMb2MubG5nKCkgPCBjdXJyZW50X21hcF9zZS5sbmcoKSkgfHxcbiAgICAgICAgICAgICAgICAhKGdvb2dsZUxvYy5sbmcoKSA+IGN1cnJlbnRfbWFwX253LmxuZygpKSApXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAvLyBza2lwIHRoaXMgcG9zdCAtIG5vIG5lZWQgdG8gZHJhd1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBtYXJrZXIgb3B0aW9uIHNldHRpbmdcbiAgICAgICAgICAgIHZhciBtYXJrZXJPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBnb29nbGVMb2MsXG4gICAgICAgICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiBnb29nbGUubWFwcy5BbmltYXRpb24uRFJPUCxcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJVc2VyUGluXCIsXG4gICAgICAgICAgICAgICAgaWNvbjogaW1hZ2VVc2VyTG9naW5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKG1hcmtlck9wdGlvbnMpO1xuXG4gICAgICAgICAgICAkdGltZW91dChcbiAgICAgICAgICAgICAgICAoZnVuY3Rpb24ob2xkX21hcmtlcil7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgb2xkX21hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfShtYXJrZXIpKSwgXG4gICAgICAgICAgICAyMDAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVuRHJhd1Bvc3QocG9zdGlkKVxuICAgICAgICB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwic3RhcnRpbmcgcmVtb3ZlIHBvc3RcIik7XG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMCwgbWFya2VyOyBtYXJrZXIgPSBtYXJrZXJzT25NYXBba107IGsrKykge1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2cocG9zdGlkKTtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKG1hcmtlci5wb3N0Ll9pZCk7XG4gICAgICAgICAgICAgICAgaWYgKHBvc3RpZCA9PSBtYXJrZXIucG9zdC5faWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyLm1hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnNPbk1hcC5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdBbmRTZXRQbGFjZShsb2NhdGlvbilcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIGdvb2dsZUxvYyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24ubGF0LCBsb2NhdGlvbi5sb24pO1xuICAgICAgICAgICAgZHJhd0hlbHBlck1hcmtlcihnb29nbGVMb2MpO1xuICAgICAgICAgICAgc2V0UGxhY2UoZ29vZ2xlTG9jKTtcblxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHNlcnZlciBnZXRzIHVwZGF0ZWQgd2hlbmV2ZXIgc2V0dGluZyBuZXcgcGxhY2Ugd2l0aCBtYXJrZXJcbiAgICAgICAgICAgIHVwZGF0ZVdhdGNoTG9jYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRyYXcgbWFwIHdpdGggaGVscGVyIG1hcmtlcnNcbiAgICAgICAgZnVuY3Rpb24gZHJhd0hlbHBlck1hcmtlcihsb2NhdGlvbil7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbWFya2VyOyBtYXJrZXIgPSBoZWxwZXJNYXJrZXJzW2ldOyBpKyspIHtcbiAgICAgICAgICAgICAgICBtYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaGVscGVyTWFya2VycyA9IFtdO1xuICAgICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBsb2NhdGlvbiwgXG4gICAgICAgICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgICAgICAgaWNvbjogaW1hZ2VUYXJnZXRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaGVscGVyTWFya2Vycy5wdXNoKG1hcmtlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1bkRyYXdIZWxwZXJNYXJrZXIoKXtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXJrZXI7IG1hcmtlciA9IGhlbHBlck1hcmtlcnNbaV07IGkrKykge1xuICAgICAgICAgICAgICAgIG1hcmtlci5zZXRNYXAobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoZWxwZXJNYXJrZXJzID0gW107XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFVUSUxcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgZnVuY3Rpb24gc2V0UGxhY2UobG9jYXRpb24pXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIGJyb2FkY2FzdCBsb2NhdGlvbiBpbmZvcihsb24sbGF0KVxuICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3NldDpsb2MnLCBsb2NhdGlvbik7XG5cbiAgICAgICAgICAgIHZhciBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpO1xuXG4gICAgICAgICAgICAvLyBicm9hZGNhc3QgcGxhY2UgZm9ybWF0dGVkX2FkZHJlc3MgYW5kIGRyYXcgaWNvblxuICAgICAgICAgICAgZ2VvY29kZXIuZ2VvY29kZSggeyAnbGF0TG5nJzogbG9jYXRpb24gfSwgZnVuY3Rpb24ocmVzdWx0cywgc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgLy8gYXMgdXNlciBjbGlja3Mgb24gdGhlIG1hcCxcbiAgICAgICAgICAgICAgICAvLyB3ZSBoYXZlIHRvIHNhdmUgdGhlIGZvcm1hdHRlZCBhZGRyZXNzIGluICRzY29wZSBhbmRcbiAgICAgICAgICAgICAgICAvLyBpdCB3aWxsIGJlIHVzZWQgdGhyb3VnaCBwb3N0cy5jdHJsXG4gICAgICAgICAgICAgICAgLy8gZW1pdCBicm9hZGNhc2UgJ3BsYWNlJyBhbmQgc2VuZCB0aGlzIHRvIGFwcGxpY2F0aW9uLmN0cmxcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBicm9hZGNhc3QgZm9ybWF0dGVkX2FkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3NldDpwbGFjZScsIHJlc3VsdHNbMV0uZm9ybWF0dGVkX2FkZHJlc3MpOyBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2goZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHN3YWwoXCJcIixcIkxvY2F0aW9uIGRvZXMgbm90IGV4aXN0c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3NldDpwbGFjZScsIFwiTG9jYXRpb24gZG9lcyBub3QgZXhpc3RzXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2FsY3VsYXRlQ291cGxpbmcocG9zdF9ndWlkLCBwb3N0X2d1aWR0Z3QpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8qIGNvdXBsaW5nIHN0YXR1c1xuICAgICAgICAgICAgICAgIDAgLSBubyBzdGF0dXNcbiAgICAgICAgICAgICAgICAxIC0gaSBsaWtlIHlvdVxuICAgICAgICAgICAgICAgIDIgLSB5b3UgbGlrZSBpXG4gICAgICAgICAgICAgICAgNCAtIHdlIGxpa2UgZWFjaCBvdGhlciAvLyBkaXNhYmxlZC5cbiAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIHZhciBpc1BvaW50aW5nWW91ICAgICA9IHNjb3BlLmd1aWR0Z3QgPT0gcG9zdF9ndWlkO1xuICAgICAgICAgICAgdmFyIGlzUG9pbnRpbmdNZSAgICAgID0gc2NvcGUuZ3VpZCAgICA9PSBwb3N0X2d1aWR0Z3Q7XG4gICAgICAgICAgICB2YXIgaXNNeVBvc3QgICAgICAgICAgPSBzY29wZS5ndWlkICAgID09IHBvc3RfZ3VpZDtcbiAgICAgICAgICAgIHZhciBpc1BvaW50aW5nU29tZW9uZSA9IHNjb3BlLmd1aWR0Z3QgIT0gJzAnO1xuXG4gICAgICAgICAgICBpZiAoaXNNeVBvc3QgJiYgaXNQb2ludGluZ1NvbWVvbmUpXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDI7IC8vIGZvciBteSB2aWV3J3MgbXkgcG9zdCB0byBiZSBcIkkgbGlrZSBzb21lb25lXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzUG9pbnRpbmdZb3UgJiYgaXNQb2ludGluZ01lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNQb2ludGluZ1lvdSAmJiAhaXNQb2ludGluZ01lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWlzUG9pbnRpbmdZb3UgJiYgaXNQb2ludGluZ01lKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gVUlcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgZnVuY3Rpb24gc2V0VUlTZWFyY2hMb2NhdGlvblRvZ2dsZSgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB0aW1lU2xpZGVyID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtc2VhcmNoLXRvZ2dsZScpKTtcbiAgICAgICAgICAgIG1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uVE9QX0xFRlRdLnB1c2godGltZVNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRVSU1vdmVUb0N1cnJMb2NCdG4oKVxuICAgICAgICB7XG4gICAgICAgICAgICB2YXIgY3VyckxvY0J0biA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwLWJ0bi1jdXJyJykpOyBcbiAgICAgICAgICAgIG1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uVE9QX1JJR0hUXS5wdXNoKGN1cnJMb2NCdG4pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0VUlQb3N0Rm9ybSgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwb3N0Rm9ybSA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwLXBvc3RpbmcnKSk7IFxuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5CT1RUT01fQ0VOVEVSXS5wdXNoKHBvc3RGb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFVJUG9zdEJ0bigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwb3N0QnRuID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtYnRuLXN1Ym1pdCcpKTtcbiAgICAgICAgICAgIG1hcC5jb250cm9sc1tnb29nbGUubWFwcy5Db250cm9sUG9zaXRpb24uQk9UVE9NX0NFTlRFUl0ucHVzaChwb3N0QnRuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFVJVGltZVNsaWRlcigpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHZhciB0aW1lU2xpZGVyID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXAtdGltZS1zbGlkZXInKSk7XG4gICAgICAgICAgICBtYXAuY29udHJvbHNbZ29vZ2xlLm1hcHMuQ29udHJvbFBvc2l0aW9uLkJPVFRPTV9DRU5URVJdLnB1c2godGltZVNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRVSVNlYXJjaEJveCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgc2VhcmNoIGJveCBhbmQgbGluayBpdCB0byB0aGUgVUkgZWxlbWVudC5cbiAgICAgICAgICAgIHZhciBpbnB1dCA9IChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFjLWlucHV0JykpOyAvLyBAdHlwZSB7SFRNTElucHV0RWxlbWVudH0gIFxuICAgICAgICAgICAgbWFwLmNvbnRyb2xzW2dvb2dsZS5tYXBzLkNvbnRyb2xQb3NpdGlvbi5UT1BfTEVGVF0ucHVzaChpbnB1dCk7XG5cbiAgICAgICAgICAgIHZhciBzZWFyY2hCb3ggPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLlNlYXJjaEJveCgoaW5wdXQpKTsgLy8gQHR5cGUge0hUTUxJbnB1dEVsZW1lbnR9IFxuXG4gICAgICAgICAgICAvLyBMaXN0ZW4gZm9yIHRoZSBldmVudCBmaXJlZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYW4gaXRlbSBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gcGljayBsaXN0LiBSZXRyaWV2ZSB0aGUgbWF0Y2hpbmcgcGxhY2VzIGZvciB0aGF0IGl0ZW0uXG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihzZWFyY2hCb3gsICdwbGFjZXNfY2hhbmdlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBwbGFjZXMgPSBzZWFyY2hCb3guZ2V0UGxhY2VzKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocGxhY2VzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gdGFrZSBvbmx5IDEgc3BvdFxuICAgICAgICAgICAgICAgIHZhciBwbGFjZSA9IHBsYWNlc1swXTtcblxuICAgICAgICAgICAgICAgIC8vIHdoZW4gc2VhcmNoIGhhcHBlbnMsIGxvY2F0aW9uIHdpbGwgYmUgdXBkYXRlZCBhcyB3ZWxsIGZvciBwb3N0XG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxhdCgpLFxuICAgICAgICAgICAgICAgICAgICBsb246IHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxuZygpXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBkcmF3QW5kU2V0UGxhY2UobG9jYXRpb24pO1xuXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSA9IHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxhdGl0dWRlO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlID0gcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubG9uZ2l0dWRlO1xuXG4gICAgICAgICAgICAgICAgbWFwLnBhblRvKHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgICBtYXAuc2V0Wm9vbSgxNik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIEVWRU5UXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGZ1bmN0aW9uIHNldEV2ZW50Q2xpY2soKVxuICAgICAgICB7XG4gICAgICAgICAgICAvLyBjbGljayBldmVudCBvbiBtYXAgdG8gZHJhdyBYIG1hcmtlciBhbmQgc2V0IFBvc3QgbG9jYXRpb25cbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcF9vcmlnaW4sICdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBsYXQ6IGV2ZW50LmxhdExuZy5sYXQoKSxcbiAgICAgICAgICAgICAgICAgICAgbG9uOiBldmVudC5sYXRMbmcubG5nKClcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShsb2NhdGlvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldEV2ZW50Q2VudGVyQ2hhbmdlZCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcF9vcmlnaW4sICdjZW50ZXJfY2hhbmdlZCcsIGZ1bmN0aW9uKCl7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIHdoZW4gbWFwIGNlbnRlciBjaGFuZ2UsIHVwZGF0ZSBsYXN0IGxvY2F0aW9uIGluIG1lbW9yeSxcbiAgICAgICAgICAgICAgICAvLyBzbyBicm93c2VyIHdpbGwgcmVtZW1iZXIgaXQgbmV4dCB0aW1lIHlvdSBjb21lIVxuICAgICAgICAgICAgICAgIHVwZGF0ZURlZmF1bHRMb2NhdGlvbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRFdmVudEJvdW5kc0NoYW5nZWQoKVxuICAgICAgICB7XG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXBfb3JpZ2luLCAnYm91bmRzX2NoYW5nZWQnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIHdoZW4gbWFwIGNlbnRlciBjaGFuZ2UsIHVwZGF0ZSBib3VuZHMgaW5mbyBmb3IgbWFwXG4gICAgICAgICAgICAgICAgdXBkYXRlQm91bmRzKCk7ICBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0RXZlbnREcmFnRW5kKClcbiAgICAgICAge1xuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwX29yaWdpbiwgJ2RyYWdlbmQnLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBtYXAgYXMgZHJhZyBlbmRcbiAgICAgICAgICAgICAgICB1cGRhdGVBbmREcmF3UG9zdHMoKTtcblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB3YXRjaGxvYyB3aGVuIGNlbnRlciBjaGFuZ2VkLlxuICAgICAgICAgICAgICAgIHVwZGF0ZVdhdGNoTG9jYXRpb24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0RXZlbnRSZXNpemUoKVxuICAgICAgICB7XG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXBfb3JpZ2luLCAncmVzaXplJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgbWFwIGFzIGRyYWcgZW5kXG4gICAgICAgICAgICAgICAgdXBkYXRlQW5kRHJhd1Bvc3RzKCk7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgd2F0Y2hsb2Mgd2hlbiBjZW50ZXIgY2hhbmdlZC5cbiAgICAgICAgICAgICAgICB1cGRhdGVXYXRjaExvY2F0aW9uKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldEV2ZW50Wm9vbUNoYW5nZWQoKVxuICAgICAgICB7XG4gICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXBfb3JpZ2luLCAnem9vbV9jaGFuZ2VkJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgbWFwIGFzIGRyYWcgZW5kXG4gICAgICAgICAgICAgICAgdXBkYXRlQW5kRHJhd1Bvc3RzKCk7XG5cbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgd2F0Y2hsb2Mgd2hlbiBjZW50ZXIgY2hhbmdlZC5cbiAgICAgICAgICAgICAgICB1cGRhdGVXYXRjaExvY2F0aW9uKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIFNFVFVQIEZPUiBNQVBcbiAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgLy8gbWFwIGluaXRpYWwgY29uZmlnc1xuICAgICAgICBmdW5jdGlvbiBpbml0aWFsTWFwRGF0YSgpe1xuICAgICAgICAgICAgaW5pdGlhbE1hcENlbnRlciA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoMzQuMDUsIC0xMTguMjQpO1xuICAgICAgICBcbiAgICAgICAgICAgIGlmICghaXNOYU4od2luZG93LmxvY2FsU3RvcmFnZS5sYXRpdHVkZSkgJiYgIWlzTmFOKHdpbmRvdy5sb2NhbFN0b3JhZ2UubG9uZ2l0dWRlKSlcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpbml0aWFsTWFwQ2VudGVyID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyh3aW5kb3cubG9jYWxTdG9yYWdlLmxhdGl0dWRlLCB3aW5kb3cubG9jYWxTdG9yYWdlLmxvbmdpdHVkZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFBsYWNlKGluaXRpYWxNYXBDZW50ZXIpO1xuXG4gICAgICAgICAgICBtYXBPcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBjZW50ZXIgICAgICA6IGluaXRpYWxNYXBDZW50ZXIsXG4gICAgICAgICAgICAgICAgICAgIHpvb20gICAgICAgIDogMTUsXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbHdoZWVsIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RyZWV0Vmlld0NvbnRyb2w6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBtYXBUeXBlQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHBhbkNvbnRyb2w6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB6b29tQ29udHJvbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIG1hcFR5cGVDb250cm9sT3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcFR5cGVJZHM6IFtnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCwgQ0xPVURfTUFQX0lEXVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtYXBUeXBlSWQ6IENMT1VEX01BUF9JRFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldE1hbnVhbEV2ZW50cygpe1xuICAgICAgICAgICAgZnVuY3Rpb24gQ2xvdWRNYXAob3B0aW9ucyl7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coXCJJbml0aWFsaXppbmcgbWFwXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpbnN0YW50aWF0ZSBnb29nbGUgbWFwXG4gICAgICAgICAgICBtYXBfb3JpZ2luID0gbmV3IGdvb2dsZS5tYXBzLk1hcChlbGVtZW50WzBdLCBtYXBPcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gc2V0IHByb3RvdHlwZSBvZiBjdXN0b20gbWFwIHdpdGggb3JpZ2luIG1hcFxuICAgICAgICAgICAgQ2xvdWRNYXAucHJvdG90eXBlID0gbWFwX29yaWdpbjtcblxuICAgICAgICAgICAgLy8gZHJhdyB4IG1hcmtlclxuICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlRHJhd1hNYXJrZXIobG9jYXRpb24pe1xuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgJ2RyYXdYTWFya2VyJywgbG9jYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2xvdWRNYXAucHJvdG90eXBlLmRyYXdYTWFya2VyID0gaGFuZGxlRHJhd1hNYXJrZXI7XG5cbiAgICAgICAgICAgIC8vIGRyYXcgY3VycmVudCBsb2NhdGlvbiBtYXJrZXJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYXdDdXJyTG9jYXRpb25NYXJrZXIobG9jYXRpb24pe1xuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgJ2RyYXdDdXJyTG9jYXRpb25NYXJrZXInLCBsb2NhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBDbG91ZE1hcC5wcm90b3R5cGUuZHJhd0N1cnJMb2NhdGlvbk1hcmtlciA9IGhhbmRsZURyYXdDdXJyTG9jYXRpb25NYXJrZXI7XG5cbiAgICAgICAgICAgIC8vIGRyYXcgcG9zdHNcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZUFuZERyYXdQb3N0cygpe1xuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcywgJ3VwZGF0ZUFuZERyYXdQb3N0cycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2xvdWRNYXAucHJvdG90eXBlLnVwZGF0ZUFuZERyYXdQb3N0cyA9IGhhbmRsZVVwZGF0ZUFuZERyYXdQb3N0cztcblxuICAgICAgICAgICAgLy8gZHJhdyByZXNwb25zZXNcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZURyYXdSZXNwb25zZXMocG9zdCl7XG4gICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcih0aGlzLCAnZHJhd1Jlc3BvbnNlcycsIHBvc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgQ2xvdWRNYXAucHJvdG90eXBlLmRyYXdSZXNwb25zZXMgPSBoYW5kbGVEcmF3UmVzcG9uc2VzO1xuXG4gICAgICAgICAgICAvLyB1bmRyYXcgcG9zdHNcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZVVuRHJhd1Bvc3QocG9zdGlkKXtcbiAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC50cmlnZ2VyKHRoaXMsICd1bkRyYXdQb3N0JywgcG9zdGlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIENsb3VkTWFwLnByb3RvdHlwZS51bkRyYXdQb3N0ID0gaGFuZGxlVW5EcmF3UG9zdDtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIGN1c3RvbSBtYXAgZm9yIGFwcFxuICAgICAgICAgICAgbWFwID0gbmV3IENsb3VkTWFwKCk7XG5cbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ2RyYXdYTWFya2VyJywgZnVuY3Rpb24obG9jYXRpb24pe1xuICAgICAgICAgICAgICAgIGRyYXdBbmRTZXRQbGFjZShsb2NhdGlvbik7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnZHJhd0N1cnJMb2NhdGlvbk1hcmtlcicsIGZ1bmN0aW9uKGxvY2F0aW9uKXtcbiAgICAgICAgICAgICAgICBkcmF3RHJvcERvd24obG9jYXRpb24pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcCwgJ3VwZGF0ZUFuZERyYXdQb3N0cycsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdXBkYXRlQW5kRHJhd1Bvc3RzKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAnZHJhd1Jlc3BvbnNlcycsIGZ1bmN0aW9uKHBvc3Qpe1xuICAgICAgICAgICAgICAgIGRyYXdSZXNwb25zZXMocG9zdCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFwLCAndW5EcmF3UG9zdCcsIGZ1bmN0aW9uKHBvc3RpZCl7XG4gICAgICAgICAgICAgICAgdW5EcmF3UG9zdChwb3N0aWQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRTdHlsZUZvck1hcCgpXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8vIOq5lOuBlOydtCBcbiAgICAgICAgICAgIC8vdmFyIGZlYXR1cmVPcHRzID0gW3tcImZlYXR1cmVUeXBlXCI6XCJhZG1pbmlzdHJhdGl2ZVwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVscy50ZXh0LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiM2MTk1YTBcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwibGFuZHNjYXBlXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZjJmMmYyXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcImxhbmRzY2FwZVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNmZmZmZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJwb2kucGFya1wiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNlNmYzZDZcIn0se1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZFwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJzYXR1cmF0aW9uXCI6LTEwMH0se1wibGlnaHRuZXNzXCI6NDV9LHtcInZpc2liaWxpdHlcIjpcInNpbXBsaWZpZWRcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5oaWdod2F5XCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcInNpbXBsaWZpZWRcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5oaWdod2F5XCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2Y0ZDJjNVwifSx7XCJ2aXNpYmlsaXR5XCI6XCJzaW1wbGlmaWVkXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuaGlnaHdheVwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVscy50ZXh0XCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjNGU0ZTRlXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZjRmNGY0XCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHMudGV4dC5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjNzg3ODc4XCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcImVsZW1lbnRUeXBlXCI6XCJsYWJlbHMuaWNvblwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwidHJhbnNpdFwiLFwiZWxlbWVudFR5cGVcIjpcImFsbFwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwid2F0ZXJcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNlYWY2ZjhcIn0se1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwid2F0ZXJcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5maWxsXCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZWFmNmY4XCJ9XX1dO1xuICAgICAgICAgICAgLy8g7IOB7YG87J20XG4gICAgICAgICAgICAvL3ZhciBmZWF0dXJlT3B0cyA9IFt7XCJmZWF0dXJlVHlwZVwiOlwibGFuZHNjYXBlLm1hbl9tYWRlXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNmN2YxZGZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwibGFuZHNjYXBlLm5hdHVyYWxcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2QwZTNiNFwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJsYW5kc2NhcGUubmF0dXJhbC50ZXJyYWluXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaVwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVsc1wiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicG9pLmJ1c2luZXNzXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcInZpc2liaWxpdHlcIjpcIm9mZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJwb2kubWVkaWNhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5XCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjZmJkM2RhXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaS5wYXJrXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNiZGU2YWJcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LnN0cm9rZVwiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZFwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVsc1wiLFwic3R5bGVyc1wiOlt7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5oaWdod2F5XCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2ZmZTE1ZlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmhpZ2h3YXlcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeS5zdHJva2VcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNlZmQxNTFcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5hcnRlcmlhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcIiNmZmZmZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5sb2NhbFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5LmZpbGxcIixcInN0eWxlcnNcIjpbe1wiY29sb3JcIjpcImJsYWNrXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInRyYW5zaXQuc3RhdGlvbi5haXJwb3J0XCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnkuZmlsbFwiLFwic3R5bGVyc1wiOlt7XCJjb2xvclwiOlwiI2NmYjJkYlwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ3YXRlclwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5XCIsXCJzdHlsZXJzXCI6W3tcImNvbG9yXCI6XCIjYTJkYWYyXCJ9XX1dO1xuICAgICAgICAgICAgLy8g65iR65iR7J20XG4gICAgICAgICAgICB2YXIgZmVhdHVyZU9wdHMgPSBbe1wiZmVhdHVyZVR5cGVcIjpcIndhdGVyXCIsXCJlbGVtZW50VHlwZVwiOlwiYWxsXCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiIzdmYzhlZFwifSx7XCJzYXR1cmF0aW9uXCI6NTV9LHtcImxpZ2h0bmVzc1wiOi02fSx7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJ3YXRlclwiLFwiZWxlbWVudFR5cGVcIjpcImxhYmVsc1wiLFwic3R5bGVyc1wiOlt7XCJodWVcIjpcIiM3ZmM4ZWRcIn0se1wic2F0dXJhdGlvblwiOjU1fSx7XCJsaWdodG5lc3NcIjotNn0se1widmlzaWJpbGl0eVwiOlwib2ZmXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaS5wYXJrXCIsXCJlbGVtZW50VHlwZVwiOlwiZ2VvbWV0cnlcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjODNjZWFkXCJ9LHtcInNhdHVyYXRpb25cIjoxfSx7XCJsaWdodG5lc3NcIjotMTV9LHtcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcImxhbmRzY2FwZVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5XCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiI2YzZjRmNFwifSx7XCJzYXR1cmF0aW9uXCI6LTg0fSx7XCJsaWdodG5lc3NcIjo1OX0se1widmlzaWJpbGl0eVwiOlwib25cIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwibGFuZHNjYXBlXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzXCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiI2ZmZmZmZlwifSx7XCJzYXR1cmF0aW9uXCI6LTEwMH0se1wibGlnaHRuZXNzXCI6MTAwfSx7XCJ2aXNpYmlsaXR5XCI6XCJvZmZcIn1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZFwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5XCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiI2ZmZmZmZlwifSx7XCJzYXR1cmF0aW9uXCI6LTEwMH0se1wibGlnaHRuZXNzXCI6MTAwfSx7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkXCIsXCJlbGVtZW50VHlwZVwiOlwibGFiZWxzXCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiI2JiYmJiYlwifSx7XCJzYXR1cmF0aW9uXCI6LTEwMH0se1wibGlnaHRuZXNzXCI6MjZ9LHtcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuYXJ0ZXJpYWxcIixcImVsZW1lbnRUeXBlXCI6XCJnZW9tZXRyeVwiLFwic3R5bGVyc1wiOlt7XCJodWVcIjpcIiNmZmNjMDBcIn0se1wic2F0dXJhdGlvblwiOjEwMH0se1wibGlnaHRuZXNzXCI6LTM1fSx7XCJ2aXNpYmlsaXR5XCI6XCJzaW1wbGlmaWVkXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInJvYWQuaGlnaHdheVwiLFwiZWxlbWVudFR5cGVcIjpcImdlb21ldHJ5XCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiI2ZmY2MwMFwifSx7XCJzYXR1cmF0aW9uXCI6MTAwfSx7XCJsaWdodG5lc3NcIjotMjJ9LHtcInZpc2liaWxpdHlcIjpcIm9uXCJ9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaS5zY2hvb2xcIixcImVsZW1lbnRUeXBlXCI6XCJhbGxcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjZDdlNGU0XCJ9LHtcInNhdHVyYXRpb25cIjotNjB9LHtcImxpZ2h0bmVzc1wiOjIzfSx7XCJ2aXNpYmlsaXR5XCI6XCJvblwifV19XTtcbiAgICAgICAgICAgIC8vIOy0iOuhneydtFxuICAgICAgICAgICAgLy92YXIgZmVhdHVyZU9wdHMgPSBbe1wiZmVhdHVyZVR5cGVcIjpcImxhbmRzY2FwZVwiLFwic3R5bGVyc1wiOlt7XCJodWVcIjpcIiNGRkE4MDBcIn0se1wic2F0dXJhdGlvblwiOjB9LHtcImxpZ2h0bmVzc1wiOjB9LHtcImdhbW1hXCI6MX1dfSx7XCJmZWF0dXJlVHlwZVwiOlwicm9hZC5oaWdod2F5XCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiIzUzRkYwMFwifSx7XCJzYXR1cmF0aW9uXCI6LTczfSx7XCJsaWdodG5lc3NcIjo0MH0se1wiZ2FtbWFcIjoxfV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmFydGVyaWFsXCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiI0ZCRkYwMFwifSx7XCJzYXR1cmF0aW9uXCI6MH0se1wibGlnaHRuZXNzXCI6MH0se1wiZ2FtbWFcIjoxfV19LHtcImZlYXR1cmVUeXBlXCI6XCJyb2FkLmxvY2FsXCIsXCJzdHlsZXJzXCI6W3tcImh1ZVwiOlwiIzAwRkZGRFwifSx7XCJzYXR1cmF0aW9uXCI6MH0se1wibGlnaHRuZXNzXCI6MzB9LHtcImdhbW1hXCI6MX1dfSx7XCJmZWF0dXJlVHlwZVwiOlwid2F0ZXJcIixcInN0eWxlcnNcIjpbe1wiaHVlXCI6XCIjMDBCRkZGXCJ9LHtcInNhdHVyYXRpb25cIjo2fSx7XCJsaWdodG5lc3NcIjo4fSx7XCJnYW1tYVwiOjF9XX0se1wiZmVhdHVyZVR5cGVcIjpcInBvaVwiLFwic3R5bGVyc1wiOlt7XCJodWVcIjpcIiM2Nzk3MTRcIn0se1wic2F0dXJhdGlvblwiOjMzLjR9LHtcImxpZ2h0bmVzc1wiOi0yNS40fSx7XCJnYW1tYVwiOjF9XX1dO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgc3R5bGVkTWFwT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnQ3VzdG9tIFN0eWxlJ1xuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgY3VzdG9tTWFwVHlwZSA9IG5ldyBnb29nbGUubWFwcy5TdHlsZWRNYXBUeXBlKGZlYXR1cmVPcHRzLCBzdHlsZWRNYXBPcHRpb25zKTtcbiAgICAgICAgICAgIG1hcC5tYXBUeXBlcy5zZXQoQ0xPVURfTUFQX0lELCBjdXN0b21NYXBUeXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGluaXQgdGhlIG1hcFxuICAgICAgICBmdW5jdGlvbiBpbml0TWFwKCkge1xuICAgICAgICAgICAgaWYgKG1hcCA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgaW5pdGlhbE1hcERhdGEoKTtcblxuICAgICAgICAgICAgICAgIHNldE1hbnVhbEV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgc2V0U3R5bGVGb3JNYXAoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gYnJvYWRjYXN0IHRvIHNlbmQgbWFwIHRvIGFwcGxpY2F0aW9uIGN0cmxcbiAgICAgICAgICAgIHNjb3BlLiRlbWl0KCdzZXQ6bWFwJywgbWFwKTtcblxuICAgICAgICAgICAgLy8gYWRkIFVJIGVsZW1lbnRzIHRvIG1hcFxuICAgICAgICAgICAgc2V0VUlTZWFyY2hMb2NhdGlvblRvZ2dsZSgpO1xuICAgICAgICAgICAgc2V0VUlTZWFyY2hCb3goKTtcbiAgICAgICAgICAgIHNldFVJTW92ZVRvQ3VyckxvY0J0bigpO1xuICAgICAgICAgICAgc2V0VUlQb3N0Rm9ybSgpO1xuICAgICAgICAgICAgc2V0VUlQb3N0QnRuKCk7XG4gICAgICAgICAgICBzZXRVSVRpbWVTbGlkZXIoKTtcblxuICAgICAgICAgICAgLy8gYWRkIG9yaWdpbiBuYXRpdmUgRXZlbnQgaGFuZGxlcnMgdG8gbWFwXG4gICAgICAgICAgICBzZXRFdmVudENsaWNrKCk7XG4gICAgICAgICAgICBzZXRFdmVudENlbnRlckNoYW5nZWQoKTtcbiAgICAgICAgICAgIHNldEV2ZW50RHJhZ0VuZCgpO1xuICAgICAgICAgICAgc2V0RXZlbnRSZXNpemUoKTtcbiAgICAgICAgICAgIHNldEV2ZW50Wm9vbUNoYW5nZWQoKTtcbiAgICAgICAgICAgIHNldEV2ZW50Qm91bmRzQ2hhbmdlZCgpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgdmVyeSBmaXJzdCB0aW1lIGZvciBhcHBcbiAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgdXBkYXRlRGVmYXVsdExvY2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdXBkYXRlQm91bmRzKCk7XG4gICAgICAgICAgICAgICAgdXBkYXRlV2F0Y2hMb2NhdGlvbigpO1xuICAgICAgICAgICAgICAgIHVwZGF0ZUFuZERyYXdQb3N0cygpO1xuICAgICAgICAgICAgfSwgODAwKTtcbiAgICAgICAgfSBcblxuICAgICAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAvLyBFWEVDVVRFXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGluaXRNYXAoKTtcbiAgICB9O1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnQScsXG4gICAgICAgIHRlbXBsYXRlOiAnPGRpdiBpZD1cIm1hcC1jYW52YXNcIj48L2Rpdj4nLFxuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBsaW5rOiBsaW5rXG4gICAgfTtcbn0pO1xuXG5cbmFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmRpcmVjdGl2ZSgnbWFwTXNnJywgZnVuY3Rpb24gKCR0aW1lb3V0LCBTZXNzaW9uU3ZjLCBQb3N0c1N2Yykge1xuXG4gICAgdmFyIGxpbmsgPSBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHsgICAgICAgIFxuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIENPVVBMSU5HIENMQVNTXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8qIGNvdXBsaW5nIHN0YXR1c1xuICAgICAgICAgIDAgLSBubyBzdGF0dXNcbiAgICAgICAgICAxIC0gaSBsaWtlIHlvdVxuICAgICAgICAgIDIgLSB5b3UgbGlrZSBpXG4gICAgICAgICAgNCAtIHdlIGxpa2UgZWFjaCBvdGhlclxuICAgICAgICAqL1xuICAgICAgICBzY29wZS5nZXRfY291cGxpbmcgPSBmdW5jdGlvbihjb3VwbGluZ19zdGF0dXMpe1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChjb3VwbGluZ19zdGF0dXMgPT0gNCl7XG4gICAgICAgICAgICByZXR1cm4gXCJjb3VwbGluZyBjb3VwbGluZy1jb3VwbGVcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoY291cGxpbmdfc3RhdHVzID09IDEpe1xuICAgICAgICAgICAgcmV0dXJuIFwiY291cGxpbmcgY291cGxpbmctaWxpa2V5b3VcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoY291cGxpbmdfc3RhdHVzID09IDIpe1xuICAgICAgICAgICAgcmV0dXJuIFwiY291cGxpbmcgY291cGxpbmcteW91bGlrZWlcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJjb3VwbGluZyBjb3VwbGluZy1ub25lXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIC8vIERPQ1VNRU5UIFJFQURZXG4gICAgICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAkdGltZW91dCh1cGRhdGVHdWlkVGFyZ2V0LCAxMDApO1xuXG4gICAgICAgICAgJHRpbWVvdXQodXBkYXRlUG9zdFRpbWVyLCAxMCk7XG5cbiAgICAgICAgICAkdGltZW91dChjdXN0b21pemVJbmZvV2luZG93LCAxMCk7XG5cbiAgICAgICAgICAkdGltZW91dChjdXN0b21pemVDbG9zZUJ0biwgMTApO1xuXG4gICAgICAgICAgLy9jb25zb2xlLmxvZyhcInBvc3QgbG9jYWwgc3RhdHVzOlwiLCBzY29wZS5wb3N0bG9jYWxzdGF0dXMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVHdWlkVGFyZ2V0KCl7XG4gICAgICAgICAgLy8gdXBkYXRlIHN0YXR1cyBmb3IgZ3VpZCB0YXJnZXRcbiAgICAgICAgICB2YXIgcG9zdGd1aWQgID0gc2NvcGUucG9zdGd1aWQ7XG4gICAgICAgICAgdmFyIG15Z3VpZCAgICA9IHNjb3BlLiRwYXJlbnQuZ3VpZDtcbiAgICAgICAgICB2YXIgbXlndWlkdGd0ID0gc2NvcGUuJHBhcmVudC5ndWlkdGd0O1xuXG4gICAgICAgICAgZWxlbWVudC5jaGlsZHJlbigpLm9uKCdjbGljaycsZnVuY3Rpb24oKXtcblxuICAgICAgICAgICAgdmFyIHVwZGF0ZV9ndWlkdGd0ID0gcG9zdGd1aWQ7XG5cbiAgICAgICAgICAgIC8vIGNsaWNraW5nIG15IG1lc3NhZ2Ugd2luZG93XG4gICAgICAgICAgICAvLyBpZiBpdHMgb24gY291cGxpbmcsIGJyZWFrIGl0IVxuICAgICAgICAgICAgaWYgKHBvc3RndWlkID09IG15Z3VpZCl7XG4gICAgICAgICAgICAgIGlmIChzY29wZS4kcGFyZW50Lmd1aWR0Z3QgIT0gJzAnKXtcbiAgICAgICAgICAgICAgICB1cGRhdGVfZ3VpZHRndCA9ICcwJzsgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNsaWtpbmcgdGhlIG9uZSB0aGF0IEkgbGlrZWRcbiAgICAgICAgICAgIC8vIHRvIGRpc2xpa2UgdGhlIG1lc3NhZ2Ugd2luZG93XG4gICAgICAgICAgICBpZiAocG9zdGd1aWQgPT0gbXlndWlkdGd0KSB7XG4gICAgICAgICAgICAgIHVwZGF0ZV9ndWlkdGd0ID0gJzAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBwcm9wYWdhdGUgdG8gdXBwZXIgc2NvcGUgZm9yIGd1aWR0Z3QgdXBkYXRlXG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnc2V0Omd1aWR0Z3QnLCB1cGRhdGVfZ3VpZHRndCk7IFxuXG4gICAgICAgICAgICAvLyB1cGRhdGUgc2Vzc2lvbiBpbmZvcm1hdGlvbiBvZiBtaW5lIHNvIG15IHNlc3Npb24gdGVsbHMgbWUgdGhhdCxcbiAgICAgICAgICAgIC8vIEkgbGlrZSB0aGlzIGd1aWQgYXQgdGhpcyBtb21lbnQgaW4gc2VydmVyIGRiXG4gICAgICAgICAgICBTZXNzaW9uU3ZjLnVwZGF0ZUNvdXBsaW5nKG15Z3VpZCwgdXBkYXRlX2d1aWR0Z3QpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRvYyl7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiU3VjY2Vzc2Z1bGx5IHVkcGF0ZWQgY291cGxpbmdcIiwgZG9jKTtcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdXBkYXRlIG15IHBvc3QncyBndWlkdGd0IHRvIGJlIHRoaXMgcG9zdCdzIGd1aWQgaW4gc2VydmVyIGRiXG4gICAgICAgICAgICAvLyB0aGlzIHVwZGF0ZSBpcyBmb3IgdGhlIHBlb3BsZSB3aG8gYXJlIGxvb2tpbmcgYXQgbXkgcG9zdHNcbiAgICAgICAgICAgIHZhciB1cGRhdGVzID0ge1xuICAgICAgICAgICAgICBndWlkICAgIDogbXlndWlkLFxuICAgICAgICAgICAgICBndWlkdGd0IDogdXBkYXRlX2d1aWR0Z3RcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBQb3N0c1N2Yy51cGRhdGVHdWlkdGd0KHVwZGF0ZXMpXG4gICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGRvYyl7XG4gICAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiU3VjY2Vzc2Z1bGx5IHVkcGF0ZWQgcG9zdCdzIGd1aWR0Z3RcIiwgZG9jKTtcbiAgICAgICAgICAgICAgICAgIC8vIGFmdGVyIGNvdXBsaW5nIHVwZGF0ZSwgbWFwIGhhcyB0byBiZSB1cGRhdGVzIGFzIHdlbGxcbiAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgIC8vIE1JR0hUIEhBVkUgVE8gQ09NRSBCQUNLIEZPUiBPUFRJTUlaQVRJT05cbiAgICAgICAgICAgIC8vIHRoaXMgaGF2ZSB0byBiZSB1cGRhdGUgdG8gYmUgY29tbXVuaWNhdGVkIHRocm91Z2ggdGhlIHNlcnZlclxuICAgICAgICAgICAgaWYgKHNjb3BlLiRwYXJlbnQuZ3VpZHRndCA9PSAwKXtcbiAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3NldDpjb3VwbGluZycsIDEpOyAvLyBwcm9wYWdhdGUgdG8gdXBwZXIgc2NvcGUgZm9yIGNvdXBsaW5nIHVwZGF0ZVxuICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTsgLy8gZm9yY2UgdG8gdXBkYXRlIERPTVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NvcGUucG9zdGNvdXBsZXN0YXR1cyA9PSAxICYmIHNjb3BlLiRwYXJlbnQuZ3VpZHRndCAhPSAwKXtcbiAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJ3NldDpjb3VwbGluZycsIDApOyAvLyBwcm9wYWdhdGUgdG8gdXBwZXIgc2NvcGUgZm9yIGNvdXBsaW5nIHVwZGF0ZVxuICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTsgLy8gZm9yY2UgdG8gdXBkYXRlIERPTVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFxuXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVQb3N0VGltZXIoKXtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiTGlmZSAlOlwiLCBzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UpO1xuICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gc2NvcGUucG9zdGxpZmUgKyBcIm1zXCI7XG5cbiAgICAgICAgICAgIHZhciBwb3N0YmFybGlmZSA9IGVsZW1lbnQuY2hpbGRyZW4oKS5jaGlsZHJlbihcIi5wb3N0bGlmZWJhclwiKTtcblxuICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnLXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb24nLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPiAwLjk1KXtcbiAgICAgICAgICAgICAgLyogQ2hyb21lLCBTYWZhcmksIE9wZXJhICovXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2EnKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9hJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPD0gMC45NSAmJiBzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPiAwLjkpe1xuICAgICAgICAgICAgICAvKiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEgKi9cbiAgICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnLXdlYmtpdC1hbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fYicpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNjb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA8PSAwLjkgJiYgc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID4gMC44NSl7XG4gICAgICAgICAgICAgIC8qIENocm9tZSwgU2FmYXJpLCBPcGVyYSAqL1xuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9jJyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCdhbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fYycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlIDw9IDAuODUgJiYgc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID4gMC43NSl7XG4gICAgICAgICAgICAgIC8qIENocm9tZSwgU2FmYXJpLCBPcGVyYSAqL1xuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9kJyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCdhbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlIDw9IDAuNzUgJiYgc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID4gMC42KXtcbiAgICAgICAgICAgICAgLyogQ2hyb21lLCBTYWZhcmksIE9wZXJhICovXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2UnKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9lJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPD0gMC42ICYmIHNjb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA+IDAuNSl7XG4gICAgICAgICAgICAgIC8qIENocm9tZSwgU2FmYXJpLCBPcGVyYSAqL1xuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9mJyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCdhbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fZicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlIDw9IDAuNSAmJiBzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPiAwLjMpe1xuICAgICAgICAgICAgICAvKiBDaHJvbWUsIFNhZmFyaSwgT3BlcmEgKi9cbiAgICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnLXdlYmtpdC1hbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1fZycpO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgdmFyIHBvc3RsaWZlYmFyX2NzcyA9IHBvc3RiYXJsaWZlLmNzcygnYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNjb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA8PSAwLjMgJiYgc2NvcGUucG9zdGxpZmVwZXJjZW50YWdlID4gMC4yKXtcbiAgICAgICAgICAgICAgLyogQ2hyb21lLCBTYWZhcmksIE9wZXJhICovXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2gnKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9oJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChzY29wZS5wb3N0bGlmZXBlcmNlbnRhZ2UgPD0gMC4yICYmIHNjb3BlLnBvc3RsaWZlcGVyY2VudGFnZSA+IDAuMSl7XG4gICAgICAgICAgICAgIC8qIENocm9tZSwgU2FmYXJpLCBPcGVyYSAqL1xuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCctd2Via2l0LWFuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9pJyk7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICB2YXIgcG9zdGxpZmViYXJfY3NzID0gcG9zdGJhcmxpZmUuY3NzKCdhbmltYXRpb24tbmFtZScsICdwb3N0bGlmZWFuaW1faScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgLyogQ2hyb21lLCBTYWZhcmksIE9wZXJhICovXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJy13ZWJraXQtYW5pbWF0aW9uLW5hbWUnLCAncG9zdGxpZmVhbmltX2onKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIHZhciBwb3N0bGlmZWJhcl9jc3MgPSBwb3N0YmFybGlmZS5jc3MoJ2FuaW1hdGlvbi1uYW1lJywgJ3Bvc3RsaWZlYW5pbV9qJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjdXN0b21pemVJbmZvV2luZG93KCl7XG4gICAgICAgICAgLy8gUmVmZXJlbmNlIHRvIHRoZSBESVYgdGhhdCB3cmFwcyB0aGUgYm90dG9tIG9mIGluZm93aW5kb3dcbiAgICAgICAgICB2YXIgaXdPdXRlciA9ICQoJy5nbS1zdHlsZS1pdycpO1xuICAgICAgICAgIFxuICAgICAgICAgIHZhciBpd0JhY2tncm91bmQgPSBpd091dGVyLnByZXYoKTtcblxuICAgICAgICAgIC8vIFJlbW92ZSB0aGUgYmFja2dyb3VuZCBzaGFkb3cgRElWXG4gICAgICAgICAgIGl3QmFja2dyb3VuZC5jaGlsZHJlbignOm50aC1jaGlsZCgyKScpLmNzcyh7J2Rpc3BsYXknIDogJ25vbmUnfSk7XG5cbiAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSB3aGl0ZSBiYWNrZ3JvdW5kIERJVlxuICAgICAgICAgICBpd0JhY2tncm91bmQuY2hpbGRyZW4oJzpudGgtY2hpbGQoNCknKS5jc3MoeydkaXNwbGF5JyA6ICdub25lJ30pO1xuXG4gICAgICAgICAgLy8gQ2hhbmdlcyB0aGUgZGVzaXJlZCB0YWlsIHNoYWRvdyBjb2xvci5cbiAgICAgICAgICBpd0JhY2tncm91bmQuY2hpbGRyZW4oJzpudGgtY2hpbGQoMyknKS5maW5kKCdkaXYnKS5jaGlsZHJlbigpLmNzcyh7XG4gICAgICAgICAgICAnYm94LXNoYWRvdyc6ICcwIDFweCA2cHggcmdiYSgxNzgsIDE3OCwgMTc4LCAwLjYpJywgXG4gICAgICAgICAgICAnei1pbmRleCcgOiAnMScsXG4gICAgICAgICAgICAnYm9yZGVyJzogJzBweCd9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGN1c3RvbWl6ZUNsb3NlQnRuKCl7XG4gICAgICAgICAgLy8gUmVmZXJlbmNlIHRvIHRoZSBESVYgdGhhdCB3cmFwcyB0aGUgYm90dG9tIG9mIGluZm93aW5kb3dcbiAgICAgICAgICB2YXIgaXdPdXRlciA9ICQoJy5nbS1zdHlsZS1pdycpO1xuXG4gICAgICAgICAgdmFyIGl3Q2xvc2VCdG4gPSBpd091dGVyLm5leHQoKTtcblxuICAgICAgICAgIC8qXG4gICAgICAgICAgY29uc29sZS5sb2coXCJwb3N0bG9jYWwgbGVhbnRoOlwiLCBpd091dGVyLnBhcmVudCgpLmZpbmQoJyNwb3N0bG9jYWwnKS5sZW5ndGgpO1xuICAgICAgICAgIGlmIChzY29wZS5wb3N0bG9jYWxzdGF0dXMgPT0gZmFsc2UgJiYgMCA9PSBpd091dGVyLnBhcmVudCgpLmZpbmQoJyNwb3N0bG9jYWwnKS5sZW5ndGgpe1xuICAgICAgICAgICAgaXdDbG9zZUJ0bi5hZnRlcihcIjxpbWcgaWQ9J3Bvc3Rsb2NhbCcgc3JjPSdodHRwOi8vY2RuLWltZy5lYXN5aWNvbi5uZXQvcG5nLzI0LzI0NDAucG5nJyB3aWR0aD0nMjAnLCBoZWlnaHQ9JzIwJy8+XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAqL1xuXG4gICAgICAgICAgLy8gQXBwbHkgdGhlIGRlc2lyZWQgZWZmZWN0IHRvIHRoZSBjbG9zZSBidXR0b25cbiAgICAgICAgICBpd0Nsb3NlQnRuLmNzcyh7XG4gICAgICAgICAgICBvcGFjaXR5OiAnMC44JywgLy8gYnkgZGVmYXVsdCB0aGUgY2xvc2UgYnV0dG9uIGhhcyBhbiBvcGFjaXR5IG9mIDAuN1xuICAgICAgICAgICAgcmlnaHQ6ICcyMHB4JywgdG9wOiAnMjBweCcsIC8vIGJ1dHRvbiByZXBvc2l0aW9uaW5nXG4gICAgICAgICAgfSk7IFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcuL3RlbXBsYXRlcy93aW5kb3cuaHRtbCcsXG4gICAgICAgIGxpbms6IGxpbmtcbiAgICB9O1xufSk7XG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcci5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSwgJHNjb3BlLCBDb25maWdTdmMsIFBvc3RzU3ZjLCBVdGlsU3ZjLCAkd2luZG93LCAkZG9jdW1lbnQsICR0aW1lb3V0KXtcclxyXHQvKiBlbWl0IGJyb2FkY2FzdCBmb3IgY3VycmVudCBwYWdlSWQgKi9cclx0JHNjb3BlLiRlbWl0KCdzZXQ6cGFnZWNoYW5nZScsICRzY29wZS5wYWdlSWQucG9zdCk7XHJcclx0JHNjb3BlLnBvc3RzID0gW107XHJcclx0LyogYXMgc2VydmVyIHRlbGxzIHRoZXJlIHdhcyBuZXcgcG9zdCwgbGV0cyByZS1sb2FkIGxpc3QgZGF0YSAqL1xyXHQkc2NvcGUuJG9uKCd3czpuZXdfcG9zdCcsIGZ1bmN0aW9uKF8sIHBvc3Qpe1xyXHRcdCRzY29wZS5yZXF1ZXN0RmV0Y2goKTtcclx0fSk7XHJcclx0JHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpIHtcclx0XHQvKiBjaGVjayBpZiB0aGUgcG9zdCBjb250ZW50IGlzIHRoZXJlIC0gb25seSBmb3IgV0VCIGZvciBlbnRlciBidXR0b24gdG8gcG9zdCAqL1xyXHRcdGlmICghJHNjb3BlLmNvbnRlbnQpe1xyXHRcdFx0Y29uc29sZS5sb2coXCJVc2VyIGF0dGVtcHRlZCB0byBwb3N0IHdpdGggMCB3b3Jkcy5cIilcclx0XHRcdHJldHVybjtcclx0XHR9XHJcclx0XHQvKiBnZXQgYXV0b2NvbXBsZXRlZCBwbGFjZSBhbmQgcmVzZXQoc2V0IHRvIHVuZGVmaW5lZCkgKi9cclx0XHR2YXIgcGxhY2UgICAgPSAkc2NvcGUucG9zdHBsYWNlO1xyXHRcdHZhciBsb2NhdGlvbiA9ICRzY29wZS5wb3N0TG9jYXRpb247XHJcclx0XHR2YXIgbG9jYWxfc3RhdHVzO1xyXHRcdHZhciBwb3N0TG9jYXRpb25Gcm9tVXNlckxvY2F0aW9uID0gVXRpbFN2Yy5nZXREaXN0YW5jZUZyb21MYXRMb25JbkttKGxvY2F0aW9uLmxhdCwgbG9jYXRpb24ubG9uLCAkc2NvcGUudXNlckxvY2F0aW9uLmxhdCwgJHNjb3BlLnVzZXJMb2NhdGlvbi5sb24pO1xyXHRcdGNvbnNvbGUubG9nKFwicG9zdCBsb2NhdGlvbiBmcm9tIHVzZXIgbG9jYXRpb24gOiBcIiwgcG9zdExvY2F0aW9uRnJvbVVzZXJMb2NhdGlvbik7XHJcdFx0LyogaWYgbGVzcyB0aGFuIDNrbSAqL1xyXHRcdGlmIChwb3N0TG9jYXRpb25Gcm9tVXNlckxvY2F0aW9uIDwgMyl7XHJcdFx0XHRjb25zb2xlLmxvZyhcInBvc3RMb2NhdGlvbkZyb21Vc2VyTG9jYXRpb24gPCAzXCIsIChwb3N0TG9jYXRpb25Gcm9tVXNlckxvY2F0aW9uIDwgMykpO1xyXHRcdFx0bG9jYWxfc3RhdHVzID0gdHJ1ZTtcclx0XHR9XHJcdFx0ZWxzZSB7XHJcdFx0XHRjb25zb2xlLmxvZyhcInBvc3RMb2NhdGlvbkZyb21Vc2VyTG9jYXRpb24gPCAzXCIsIChwb3N0TG9jYXRpb25Gcm9tVXNlckxvY2F0aW9uIDwgMykpO1xyXHRcdFx0bG9jYWxfc3RhdHVzID0gZmFsc2U7XHJcdFx0fVxyXHRcdFxyXHRcdHZhciBsb2NhdGlvbkpTT04gPSBKU09OLnN0cmluZ2lmeShsb2NhdGlvbik7XHJcclx0XHR2YXIgcmVsYXRpdmVMaWZlU3Bhbjtcclx0XHRpZiAoJHNjb3BlLnRpbWV2YWx1ZSA8PSBDb25maWdTdmMubWF4SW5zdGFudExpZmVTcGFuKXtcclx0XHRcdHZhciBjaGFyTGVuID0gJHNjb3BlLmNvbnRlbnQubGVuZ3RoO1xyXHRcdFx0aWYgKGNoYXJMZW4gPCA1KVxyXHRcdFx0e1xyXHRcdFx0XHRyZWxhdGl2ZUxpZmVTcGFuID0gNDAwMDtcclx0XHRcdH1cclx0XHRcdGVsc2Vcclx0XHRcdHtcclx0XHRcdFx0cmVsYXRpdmVMaWZlU3BhbiA9IGNoYXJMZW4gKiBVdGlsU3ZjLm1hcFJhbmdlKGNoYXJMZW4sIDUsIDIwLCA3MDAsIDQwMCk7XHJcdFx0XHR9XHJcdFx0fVxyXHRcdGVsc2Uge1xyXHRcdFx0cmVsYXRpdmVMaWZlU3BhbiA9ICRzY29wZS50aW1ldmFsdWU7XHJcdFx0fVxyXHJcdFx0UG9zdHNTdmMuY3JlYXRlKFxyXHRcdHtcclx0XHRcdGJvZHkgICAgOiAgJHNjb3BlLmNvbnRlbnQsXHJcdFx0XHRsb2NhdGlvbjogIGxvY2F0aW9uSlNPTixcclx0XHRcdHBsYWNlICAgOiAgcGxhY2UsXHJcdFx0XHRndWlkICAgIDogICRzY29wZS5ndWlkLFxyXHRcdFx0Z3VpZHRndCA6ICAkc2NvcGUuZ3VpZHRndCxcclx0XHRcdGxpZmVzcGFuOiAgcmVsYXRpdmVMaWZlU3Bhbixcclx0XHRcdGlzbG9jYWwgOiAgbG9jYWxfc3RhdHVzXHJcdFx0fSlcclx0XHQuc3VjY2VzcyhmdW5jdGlvbihwb3N0KXtcclx0XHRcdFx0XHRcclx0XHRcdC8qIHJlc2V0IGlucHV0IGZvcm1zICovXHJcdFx0XHQkc2NvcGUuY29udGVudCAgPSBudWxsO1xyXHRcdH0pXHJcdFx0LmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cyl7XHJcdFx0XHRzd2FsKFwiUG9zdCBmYWlsZWRcIiwgXCJQbGVhc2UgY29tcGxldGUgdGhlIGZyb20gY29ycmVjdGx5XCIsIFwiZXJyb3JcIik7XHJcdFx0fSk7XHJcdH07XHJcclx0LyogYXMgc2VydmVyIHRlbGxzIHRoZXJlIHdhcyBuZXcgcG9zdCwgbGV0cyByZS1sb2FkIGxpc3QgZGF0YSAqL1xyXHQkc2NvcGUucmVxdWVzdEZldGNoID0gZnVuY3Rpb24oKSB7XHJcdFx0UG9zdHNTdmMuZmV0Y2goKVxyXHRcdC5zdWNjZXNzKGZ1bmN0aW9uKHBvc3RzKXtcclx0XHRcdCRzY29wZS5wb3N0cyA9IHBvc3RzO1xyXHRcdH0pO1xyXHR9O1xyXHJcdC8qIHVwZGF0ZSBndWlkIG9mIHBvc3QgKi9cclx0JHNjb3BlLnVwZGF0ZUd1aWR0Z3QgPSBmdW5jdGlvbihteWd1aWQsIGd1aWR0Z3QpIHtcclx0XHR2YXIgdXBkYXRlcyA9IHtcclx0XHRcdGd1aWQgICAgOiBteWd1aWQsXHJcdFx0XHRndWlkdGd0IDogZ3VpZHRndFxyXHRcdH07XHJcclx0XHRjb25zb2xlLmxvZyhcInVkcGF0ZSB0byBwb3N0IGd1aWR0Z3Q6XCIsIHVwZGF0ZXMpXHJcclx0XHRQb3N0c1N2Yy51cGRhdGVHdWlkdGd0KHVwZGF0ZXMpO1xyXHR9XHJcclx0Lyokc2NvcGUucmVxdWVzdEZldGNoKCk7Ki9ccn0pO1xyXG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdQb3N0c1N2YycsIGZ1bmN0aW9uKCRodHRwKXtcblx0dGhpcy5mZXRjaCA9IGZ1bmN0aW9uKGd1aWRPYmope1xuXHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnLCBndWlkT2JqKTtcblx0fTtcblxuXHR0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Bvc3RzJywgcG9zdCk7XG5cdH07XG5cblx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbihwb3N0KXtcblx0XHQvL2NvbnNvbGUubG9nKFwiZGVsZXRpbmcgcG9zdGluZ1wiKTtcblx0XHQvL2NvbnNvbGUubG9nKCdwb3N0Ll9pZDonLCBwb3N0Ll9pZCk7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMvcG9zdHNfZGVsZXRlJywgcG9zdCk7XG5cdH07XG5cblx0dGhpcy51cGRhdGVHdWlkdGd0ID0gZnVuY3Rpb24odXBkYXRlcyl7XG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvcG9zdHMvdXBkYXRlX2d1aWR0Z3QnLCB1cGRhdGVzKTtcblx0fVxufSk7XG5hbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdTZXNzaW9uU3ZjJywgZnVuY3Rpb24oJGh0dHApe1xuXHR0aGlzLmZldGNoID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL3Nlc3Npb25zJyk7XG5cdH07XG5cblx0dGhpcy5lbnRlciA9IGZ1bmN0aW9uKHNlc3Npb24pe1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zJywgc2Vzc2lvbik7XG5cdH07XG5cblx0dGhpcy5yZW1vdmUgPSBmdW5jdGlvbihndWlkKXtcblx0XHQvL2NvbnNvbGUubG9nKFwiZGVsZXRpbmcgc2Vzc2lvblwiKTtcblx0XHQvL2NvbnNvbGUubG9nKCdzZXNzaW9uLmd1aWQ6JywgZ3VpZCk7XG5cdFx0dmFyIHNlc3Npb24gPSB7Z3VpZDogZ3VpZH07XG5cdFx0cmV0dXJuICRodHRwLnB1dCgnL2FwaS9zZXNzaW9ucycsIHNlc3Npb24pO1xuXHR9O1xuXG5cdHRoaXMudXBkYXRlV2F0Y2hMb2NhdGlvbiA9IGZ1bmN0aW9uKGN1cnJlbnRfbWFwX253LCBjdXJyZW50X21hcF9zZSwgY3VycmVudF9tYXBfY2VudGVyLCBndWlkKXtcblx0XHR2YXIgd2F0Y2hsb2MgPSB7XG4gICAgICAgICAgICBud19sYXQgICAgIDogY3VycmVudF9tYXBfbncubGF0LFxuICAgICAgICAgICAgbndfbG9uICAgICA6IGN1cnJlbnRfbWFwX253LmxvbixcbiAgICAgICAgICAgIHNlX2xhdCAgICAgOiBjdXJyZW50X21hcF9zZS5sYXQsXG4gICAgICAgICAgICBzZV9sb25cdCAgIDogY3VycmVudF9tYXBfc2UubG9uLFxuICAgICAgICAgICAgY2VudGVyX2xhdCA6IGN1cnJlbnRfbWFwX2NlbnRlci5sYXQsXG4gICAgICAgICAgICBjZW50ZXJfbG9uIDogY3VycmVudF9tYXBfY2VudGVyLmxvblxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdhdGNobG9jSlNPTiA9IEpTT04uc3RyaW5naWZ5KHdhdGNobG9jKTtcblxuICAgICAgICB2YXIgdXBkYXRlZHNlc3Npb24gPSB7XG4gICAgICAgICAgICB3YXRjaGxvYzogd2F0Y2hsb2NKU09OLFxuICAgICAgICAgICAgZ3VpZCAgICA6IGd1aWRcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB1cGRhdGUgd2F0Y2hsb2Mgd2hlbiBjZW50ZXIgY2hhbmdlZC5cbiAgICAgICAgY29uc29sZS5sb2coXCJ1cGRhdGluZyB3YXRjaCBsb2NhdGlvblwiKTtcblxuXHRcdC8vY29uc29sZS5sb2coXCJ1cGRhdGVkc2Vzc2lvbjpcIiwgdXBkYXRlZHNlc3Npb24pO1xuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zL3VwZGF0ZV9zZXNzaW9uJywgdXBkYXRlZHNlc3Npb24pO1xuXHR9O1xuXG5cdHRoaXMudXBkYXRlQ291cGxpbmcgPSBmdW5jdGlvbihndWlkLCBndWlkdGd0KXtcblx0XHRcblx0XHR2YXIgdXBkYXRlZGd1aWR0Z3QgPSB7XG5cdFx0XHRndWlkICAgOiBndWlkLFxuXHRcdFx0Z3VpZHRndDogZ3VpZHRndFxuXHRcdH07XG5cblx0XHQvLyB1cGRhdGUgd2F0Y2hsb2Mgd2hlbiBjZW50ZXIgY2hhbmdlZC5cbiAgICAgICAgY29uc29sZS5sb2coXCJ1cGRhdGluZyBjb3VwbGluZ1wiKTtcblxuXHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3Nlc3Npb25zL3VwZGF0ZV9jb3VwbGluZycsIHVwZGF0ZWRndWlkdGd0KVxuXHR9O1xufSk7XG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==