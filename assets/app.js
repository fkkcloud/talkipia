angular.module("app",["ngRoute","duScroll"]),angular.module("app").controller("ApplicationCtrl",["SessionSvc","$rootScope","$scope","$window","$http","$timeout",function(o,t,n,e,a,i){function l(){function o(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return o()+o()+"-"+o()+"-"+o()+"-"+o()+"-"+o()+o()+o()}n.guid=l(),n.pageId={post:0},n.navCollapsed=!0,n.guidtgt="0",window.onbeforeunload=function(){o.remove(n.guid)};var s,r=document.location.hostname,g="192.168.0.4";s="localhost"==r?"ws://localhost:5000":r==g?"ws://192.168.0.4:5000":"wss://cloudtalk.herokuapp.com";var c=function(){connection=new WebSocket(s),connection.onopen=function(){function t(t){var e=t.coords,a=new google.maps.LatLng(e.latitude,e.longitude),i={lat:a.lat(),lon:a.lng()},l=JSON.stringify(i);console.log("setting location",l);var s=n.map.getBounds(),r=s.getNorthEast(),g=s.getSouthWest(),c={lat:r.lat(),lon:g.lng()},u={lat:g.lat(),lon:r.lng()},p={lat:window.localStorage.latitude,lon:window.localStorage.longitude},d={nw_lat:c.lat,nw_lon:c.lon,se_lat:u.lat,se_lon:u.lon,center_lat:p.lat,center_lon:p.lon},m=JSON.stringify(d);console.log("setting watchloc",m);var f={guid:n.guid,location:l,watchloc:m};o.enter(f)}function e(o){console.warn("ERROR("+o.code+"): "+o.message)}navigator.geolocation.getCurrentPosition(t,e),console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),i(c,2e3)},connection.onmessage=function(o){console.log("broadcast msg from server:",o);var n=JSON.parse(o.data);t.$broadcast("ws:"+n.type,n.data)}};c(),n.$on("ws:new_post",function(o,t){n.map.updateAndDrawPosts(),t.guid==n.guid&&(console.log("start drawing responses.."),n.map.drawResponses(t))}),n.$on("ws:new_session",function(o,t){var e=angular.fromJson(t.location);n.map.drawCurrLocationMarker(e)}),n.$on("ws:remove_post",function(o,t){n.map.unDrawPost(t)}),n.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},n.moveToCurrentLocation=function(){function o(o){if(n.currentPageId==n.pageId.post){var t=o.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var e={lat:t.latitude,lon:t.longitude};n.map.drawCurrLocationMarker(e),n.map.drawXMarker(e);var a=new google.maps.LatLng(e.lat,e.lon);n.map.panTo(a),n.map.setZoom(15)}}function t(o){console.warn("ERROR("+o.code+"): "+o.message)}navigator.geolocation.getCurrentPosition(o,t),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},n.moveToPostLocation=function(){var o=0;if(n.isMobile()){var t=n.map.getBounds(),e=t.getNorthEast(),a=t.getSouthWest();current_map_nw=new google.maps.LatLng(e.lat(),a.lng()),current_map_se=new google.maps.LatLng(a.lat(),e.lng());var i=.5*Math.abs(n.postLocation.lat-current_map_nw.lat()),l=.5*Math.abs(n.postLocation.lat-current_map_se.lat());o=i>l?l:i}var s=new google.maps.LatLng(n.postLocation.lat+o,n.postLocation.lon);n.map.panTo(s)},n.collapse=function(){n.navCollapsed=!0},n.$on("mapInit",function(o,t){n.map=t}),n.$on("set:guidtgt",function(o,t){n.guidtgt=t}),n.$on("pagechange",function(o,t){n.currentPageId=t}),n.$on("loc",function(o,t){var e=t.lat(),a=t.lng();n.postLocation={lat:e,lon:a}}),n.$on("place",function(o,t){n.$apply(function(){n.postplace=t})})}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var o=this;o.deg2rad=function(o){return o*(Math.PI/180)},o.getDistanceFromLatLonInKm=function(t,n,e,a){var i=6371,l=o.deg2rad(e-t),s=o.deg2rad(a-n),r=Math.sin(l/2)*Math.sin(l/2)+Math.cos(o.deg2rad(t))*Math.cos(o.deg2rad(e))*Math.sin(s/2)*Math.sin(s/2),g=2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),c=i*g;return c}}),angular.module("app").run(["$rootScope","$timeout","SessionSvc",function(o,t,n){}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","SessionSvc","$compile",function(o,t,n,e){var a=function(t,a,i,l){function s(){window.localStorage.latitude=z.getCenter().lat(),window.localStorage.longitude=z.getCenter().lng()}function r(){var o=z.getBounds(),t=o.getNorthEast(),n=o.getSouthWest();F=new google.maps.LatLng(t.lat(),n.lng()),B=new google.maps.LatLng(n.lat(),t.lng())}function g(){var o=z.getBounds(),e=o.getNorthEast(),a=o.getSouthWest();F={lat:e.lat(),lon:a.lng()},B={lat:a.lat(),lon:e.lng()};var i;i=t.postLocation.lat<F.lat&&t.postLocation.lat>B.lat&&t.postLocation.lon<B.lon&&t.postLocation.lon>F.lon?{lat:t.postLocation.lat,lon:t.postLocation.lon}:{lat:z.getCenter().lat(),lon:z.getCenter().lng()},n.updateWatchLocation(F,B,i,t.guid)}function c(o){console.log("reference post:",o),n.fetch().success(function(n){for(var e=0;e<n.length;e++){var a=n[e];if(a.guid!=t.guid){console.log("session watch location:",a.watchloc),console.log("post location:",o.location);var i=angular.fromJson(a.watchloc),l=angular.fromJson(o.location);if(console.log(B,F),r(),i.center_lat<F.lat()&&i.center_lat>B.lat()&&i.center_lon<B.lng()&&i.center_lon>F.lng()&&l.lat<i.nw_lat&&l.lat>i.se_lat&&l.lon<i.se_lon&&l.lon>i.nw_lon){var s=new google.maps.LatLng(i.center_lat,i.center_lon),g={position:s,map:z,title:"UserPin",icon:q,optimized:!1},c=new google.maps.Marker(g);setTimeout(function(o){return function(){o.setMap(null)}}(c),1800)}}}})}function u(){o.fetch().success(function(o){for(var n=0;n<o.length;n++){for(var a,i=o[n],l=0;a=W[l];l++)if(i._id==a.post._id){i=null;break}if(i&&i.hasOwnProperty("location")){var s=angular.fromJson(i.location),g=new google.maps.LatLng(s.lat,s.lon);if(r(),g.lat()<F.lat()&&g.lat()>B.lat()&&g.lng()<B.lng()&&g.lng()>F.lng()){var c=v(i.guid,i.guidtgt),u={position:g,map:z,title:"Bubble",icon:J},a=new google.maps.Marker(u),p=1e4;i.lifespan<p&&setTimeout(function(o,t){return function(){o.setMap(null);for(var n,e=0;n=W[e];e++)t._id==n.post._id&&W.splice(e,1)}}(a,i),i.lifespan),W.push({marker:a,post:i});var d=t,m=d.$new(!0),f=function(o,t,n,a){return function(){var i={pixelOffset:new google.maps.Size(-41.5,10),disableAutoPan:!0},l=new google.maps.InfoWindow(i),s="<div map-msg></div>",r=e(s)(t),g=new Date,c=g.getTime(),u=n.lifeend-c>=0?n.lifeend-c:0;t.msg=n.body,t.postlife=u,t.postguid=n.guid,t.postguidtgt=n.guidtgt,t.postcouplestatus=a,l.setContent(r[0]),l.open(z,o)}}(a,m,i,c);f()}}}})}function p(o){var t=new google.maps.LatLng(o.lat,o.lon);if(r(),t.lat()<F.lat()&&t.lat()>B.lat()&&t.lng()<B.lng()&&t.lng()>F.lng()){var n={position:t,map:z,animation:google.maps.Animation.DROP,title:"UserPin",icon:U},e=new google.maps.Marker(n);setTimeout(function(o){return function(){o.setMap(null)}}(e),2e3)}}function d(o){console.log("starting remove post");for(var t,n=0;t=W[n];n++)if(console.log(o),console.log(t.post._id),o==t.post._id){t.marker.setMap(null),W.splice(n,1);break}}function m(o){var t=new google.maps.LatLng(o.lat,o.lon);f(t),w(t),g()}function f(o){for(var t,n=0;t=D[n];n++)t.setMap(null);D=[];var t=new google.maps.Marker({position:o,map:z,icon:x});D.push(t)}function w(o){t.$emit("loc",o);var n=new google.maps.Geocoder;n.geocode({latLng:o},function(o,n){try{t.$emit("place",o[1].formatted_address)}catch(e){console.log(e),swal("","Location does not exists"),t.$emit("place","Location does not exists")}})}function v(o,n){var e=t.guidtgt==o,a=t.guid==n;return e&&a?4:e&&!a?1:!e&&a?2:0}function h(){var o=document.getElementById("btn-curr");z.controls[google.maps.ControlPosition.TOP_RIGHT].push(o)}function L(){var o=document.getElementById("posting");z.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(o)}function _(){var o=document.getElementById("btn-submit");z.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(o)}function S(){var o=document.getElementById("pac-input");z.controls[google.maps.ControlPosition.TOP_LEFT].push(o);var t=new google.maps.places.SearchBox(o);google.maps.event.addListener(t,"places_changed",function(){var o=t.getPlaces();if(0!=o.length){var n=o[0],e={lat:n.geometry.location.lat(),lon:n.geometry.location.lng()};m(e),window.localStorage.latitude=n.geometry.location.latitude,window.localStorage.longitude=n.geometry.location.longitude,z.panTo(n.geometry.location),z.setZoom(16)}})}function y(){google.maps.event.addListener(O,"click",function(o){var t={lat:o.latLng.lat(),lon:o.latLng.lng()};m(t)})}function P(){google.maps.event.addListener(O,"center_changed",function(){s()})}function b(){google.maps.event.addListener(O,"bounds_changed",function(){r()})}function M(){google.maps.event.addListener(O,"dragend",function(){u(),g()})}function T(){google.maps.event.addListener(O,"resize",function(){u(),g()})}function $(){google.maps.event.addListener(O,"zoom_changed",function(){u(),g()})}function k(){E=new google.maps.LatLng(34.05,-118.24),isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(E=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),w(E),R={center:E,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,N]},mapTypeId:N}}function C(){function o(o){console.log("Initializing map")}function t(o){google.maps.event.trigger(this,"drawXMarker",o)}function n(o){google.maps.event.trigger(this,"drawCurrLocationMarker",o)}function e(){google.maps.event.trigger(this,"updateAndDrawPosts")}function i(o){google.maps.event.trigger(this,"drawResponses",o)}function l(o){google.maps.event.trigger(this,"unDrawPost",o)}O=new google.maps.Map(a[0],R),o.prototype=O,o.prototype.drawXMarker=t,o.prototype.drawCurrLocationMarker=n,o.prototype.updateAndDrawPosts=e,o.prototype.drawResponses=i,o.prototype.unDrawPost=l,z=new o,google.maps.event.addListener(z,"drawXMarker",function(o){m(o)}),google.maps.event.addListener(z,"drawCurrLocationMarker",function(o){p(o)}),google.maps.event.addListener(z,"updateAndDrawPosts",function(){u()}),google.maps.event.addListener(z,"drawResponses",function(o){c(o)}),google.maps.event.addListener(z,"unDrawPost",function(o){d(o)})}function A(){var o=[{featureType:"landscape",stylers:[{hue:"#FFA800"},{saturation:0},{lightness:0},{gamma:1}]},{featureType:"road.highway",stylers:[{hue:"#53FF00"},{saturation:-73},{lightness:40},{gamma:1}]},{featureType:"road.arterial",stylers:[{hue:"#FBFF00"},{saturation:0},{lightness:0},{gamma:1}]},{featureType:"road.local",stylers:[{hue:"#00FFFD"},{saturation:0},{lightness:30},{gamma:1}]},{featureType:"water",stylers:[{hue:"#00BFFF"},{saturation:6},{lightness:8},{gamma:1}]},{featureType:"poi",stylers:[{hue:"#679714"},{saturation:33.4},{lightness:-25.4},{gamma:1}]}],t={name:"Custom Style"},n=new google.maps.StyledMapType(o,t);z.mapTypes.set(N,n)}function I(){void 0===z&&(k(),C(),A()),t.$emit("mapInit",z),S(),h(),L(),_(),y(),P(),M(),T(),$(),b(),setTimeout(function(){s(),r(),g(),u()},800)}var z,O,F,B,R,E,N="custom_style",D=[],W=[],J={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},x={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},U={url:"http://www.clker.com/cliparts/q/o/2/K/g/V/location-symbol-map-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)},q={url:"http://2.bp.blogspot.com/-djMa_n5nAEM/T1Gvx_-7-zI/AAAAAAAAAQ4/-1N6lleQvZc/s1600/blinking_dot.gif",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,17)};I()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:a}}]),angular.module("app").directive("mapMsg",["$timeout",function(o){return{restrict:"A",templateUrl:"./templates/window.html",link:function(t,n,e){function a(){var o=t.postguid,e=t.$parent.guid;n.parent().find("div div #bubbleClick").on("click",function(){o!=e&&t.$emit("set:guidtgt",o)})}function i(){o(function(){{var o=t.postlife+"ms";n.parent().find("div div .postlifebar").css("animation-duration",o)}},100)}t.get_coupling=function(o){return 4==o?"bubblePost bubblePost_couple":1==o?"bubblePost bubblePost_ilikeyou":2==o?"bubblePost bubblePost_youlikei":"bubblePost bubblePost_none"},angular.element(document).ready(function(){a(),i()})}}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","PostsSvc","$window","$document",function(o,t,n,e,a){t.$emit("pagechange",t.pageId.post),t.posts=[],t.$on("ws:new_post",function(o,n){t.requestFetch()}),t.moveToLoc=function(o){var n=t.posts[o],e=angular.fromJson(n.location),i=new google.maps.LatLng(e.lat,e.lon);t.map.panTo(i),t.map.setZoom(16);var l=0,s=480;a.scrollTop(l,s).then(function(){console&&console.log("You just scrolled to the top!")})},t.addPost=function(){var o=t.postplace,e=t.postLocation,a=JSON.stringify(e);n.create({body:t.content,location:a,place:o,guid:t.guid,guidtgt:t.guidtgt}).success(function(o){google.maps.event.trigger(t.map,"maptypeid_changed"),t.posts.unshift(o);var n=1e4;if(o.lifespan<n){var e=function(){for(var n=0;n<t.posts.length;++n)o._id==t.posts[n]._id&&t.posts.splice(n,1)};setTimeout(e,o.lifespan)}t.content=null}).error(function(o,t){swal("Post failed","Please complete the from correctly","error")})},t.requestFetch=function(){n.fetch().success(function(o){t.posts=o})},t.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)},this.remove=function(t){return console.log("deleting posting"),console.log("post._id:",t._id),o.put("/api/posts",t)}}]),angular.module("app").service("SessionSvc",["$http",function(o){this.fetch=function(){return o.get("/api/sessions")},this.enter=function(t){return o.post("/api/sessions",t)},this.remove=function(t){console.log("deleting session"),console.log("session.guid:",t);var n={guid:t};return o.put("/api/sessions",n)},this.updateWatchLocation=function(t,n,e,a){var i={nw_lat:t.lat,nw_lon:t.lon,se_lat:n.lat,se_lon:n.lon,center_lat:e.lat,center_lon:e.lon},l=JSON.stringify(i),s={watchloc:l,guid:a};return console.log("updating watch location"),console.log("updatedsession:",s),o.post("/api/sessions/update",s)}}]);
//# sourceMappingURL=data:application/json;base64,