angular.module("app",["ngRoute","ui.slider"]),angular.module("app").controller("ApplicationCtrl",["SessionSvc","UtilSvc","ConfigSvc","$rootScope","$scope","$window","$http","$timeout",function(t,e,o,n,a,i,l,s){a.guid=e.getGuid(),a.pageId={post:0},a.timevalue=o.maxInstantLifeSpan,a.navCollapsed=!0,a.guidtgt="0",window.onbeforeunload=function(){t.remove(a.guid)};var r,c=document.location.hostname;r=c==o.local?o.web_socket+o.local+":"+o.port:c==o.local_ip?o.web_socket+o.local_ip+":"+o.port:o.web_socket_secure+ConfigSve.deploy_dns;var g=function(){connection=new WebSocket(r),connection.onopen=function(){function e(e){var o=e.coords,n=new google.maps.LatLng(o.latitude,o.longitude),i={lat:n.lat(),lon:n.lng()},l=JSON.stringify(i),s=a.map.getBounds(),r=s.getNorthEast(),c=s.getSouthWest(),g={lat:r.lat(),lon:c.lng()},p={lat:c.lat(),lon:r.lng()},u={lat:window.localStorage.latitude,lon:window.localStorage.longitude},d={nw_lat:g.lat,nw_lon:g.lon,se_lat:p.lat,se_lon:p.lon,center_lat:u.lat,center_lon:u.lon},m=JSON.stringify(d),f={guid:a.guid,location:l,watchloc:m};t.enter(f)}function o(t){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+t.code+"): "+t.message)}navigator.geolocation.getCurrentPosition(e,o),console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),s(g,2e3)},connection.onmessage=function(t){var e=JSON.parse(t.data);n.$broadcast("ws:"+e.type,e.data)}};g(),a.$on("ws:new_post",function(t,e){a.map.updateAndDrawPosts(),e.guid==a.guid&&a.map.drawResponses(e)}),a.$on("ws:new_session",function(t,e){var o=angular.fromJson(e.location);a.map.drawCurrLocationMarker(o)}),a.$on("ws:remove_post",function(t,e){a.map.unDrawPost(e)}),a.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},a.moveToCurrentLocation=function(){function t(t){if(a.currentPageId==a.pageId.post){var e=t.coords;window.localStorage.latitude=e.latitude,window.localStorage.longitude=e.longitude;var o={lat:e.latitude,lon:e.longitude};a.map.drawCurrLocationMarker(o),a.map.drawXMarker(o);var n=new google.maps.LatLng(o.lat,o.lon);a.map.panTo(n),a.map.setZoom(15)}}function e(t){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+t.code+"): "+t.message)}navigator.geolocation.getCurrentPosition(t,e),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},a.moveToPostLocation=function(){var t=0;if(a.isMobile()){var e=a.map.getBounds(),o=e.getNorthEast(),n=e.getSouthWest();current_map_nw=new google.maps.LatLng(o.lat(),n.lng()),current_map_se=new google.maps.LatLng(n.lat(),o.lng());var i=.5*Math.abs(a.postLocation.lat-current_map_nw.lat()),l=.5*Math.abs(a.postLocation.lat-current_map_se.lat());t=i>l?l:i}var s=new google.maps.LatLng(a.postLocation.lat+t,a.postLocation.lon);a.map.panTo(s)},a.collapse=function(){a.navCollapsed=!0},a.$on("set:map",function(t,e){a.map=e}),a.$on("set:guidtgt",function(t,e){a.guidtgt=e}),a.$on("set:pagechange",function(t,e){a.currentPageId=e}),a.$on("set:loc",function(t,e){var o=e.lat(),n=e.lng();a.postLocation={lat:o,lon:n}}),a.$on("set:place",function(t,e){a.$apply(function(){a.postplace=e})})}]),angular.module("app").constant("ConfigSvc",{web_socket:"ws://",web_socket_secure:"wss://",local:"localhost",local_ip:"192.168.0.4",deploy_dns:"cloudtalk.herokuapp.com",port:"5000",maxInstantLifeSpan:5e3}),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var t=this;t.deg2rad=function(t){return t*(Math.PI/180)},t.getDistanceFromLatLonInKm=function(e,o,n,a){var i=6371,l=t.deg2rad(n-e),s=t.deg2rad(a-o),r=Math.sin(l/2)*Math.sin(l/2)+Math.cos(t.deg2rad(e))*Math.cos(t.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),c=2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),g=i*c;return g},t.mapRange=function(t,e,o,n,a){return n+(a-n)*(t-e)/(o-e)},t.getGuid=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()}}),angular.module("app").run(["$rootScope","$timeout","SessionSvc",function(t,e,o){}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","ConfigSvc","SessionSvc","$compile","$timeout",function(t,e,o,n,a,i){var l=function(e,l,s){function r(){window.localStorage.latitude=R.getCenter().lat(),window.localStorage.longitude=R.getCenter().lng()}function c(){var t=R.getBounds(),e=t.getNorthEast(),o=t.getSouthWest();B=new google.maps.LatLng(e.lat(),o.lng()),E=new google.maps.LatLng(o.lat(),e.lng())}function g(){var t=R.getBounds(),o=t.getNorthEast(),a=t.getSouthWest();B={lat:o.lat(),lon:a.lng()},E={lat:a.lat(),lon:o.lng()};var i;i=e.postLocation.lat<B.lat&&e.postLocation.lat>E.lat&&e.postLocation.lon<E.lon&&e.postLocation.lon>B.lon?{lat:e.postLocation.lat,lon:e.postLocation.lon}:{lat:R.getCenter().lat(),lon:R.getCenter().lng()},n.updateWatchLocation(B,E,i,e.guid)}function p(t){n.fetch().success(function(o){for(var n=0;n<o.length;n++){var a=o[n];if(a.guid!=e.guid){var l=angular.fromJson(a.watchloc),s=angular.fromJson(t.location);if(c(),l.center_lat<B.lat()&&l.center_lat>E.lat()&&l.center_lon<E.lng()&&l.center_lon>B.lng()&&s.lat<l.nw_lat&&s.lat>l.se_lat&&s.lon<l.se_lon&&s.lon>l.nw_lon){var r=new google.maps.LatLng(l.center_lat,l.center_lon),g={position:r,map:R,title:"UserPin",icon:X,optimized:!1},p=new google.maps.Marker(g),u=1800;i(function(t){return function(){t.setMap(null)}}(p),u)}}}})}function u(){t.fetch().success(function(t){for(var n=0;n<t.length;n++){for(var l,s=t[n],r=0;l=W[r];r++)if(s._id==l.post._id){s=null;break}if(s&&s.hasOwnProperty("location")){var g=angular.fromJson(s.location),p=new google.maps.LatLng(g.lat,g.lon);if(c(),p.lat()<B.lat()&&p.lat()>E.lat()&&p.lng()<E.lng()&&p.lng()>B.lng()){var u=h(s.guid,s.guidtgt),d={position:p,map:R,title:"Bubble",icon:J},l=new google.maps.Marker(d);s.lifespan<o.maxInstantLifeSpan&&i(function(t,e){return function(){t.setMap(null);for(var o,n=0;o=W[n];n++)e._id==o.post._id&&W.splice(n,1)}}(l,s),s.lifespan),W.push({marker:l,post:s});var m=e,f=m.$new(!0),w=function(t,e,o,n){return function(){var i={pixelOffset:new google.maps.Size(-41.5,10),disableAutoPan:!0},l=new google.maps.InfoWindow(i),s=new Date,r=s.getTime(),c=o.lifeend-r>=0?o.lifeend-r:0,g=(c/o.lifespan).toFixed(2);e.msg=o.body,e.postlife=c,e.postguid=o.guid,e.postguidtgt=o.guidtgt,e.postcouplestatus=n,e.postlifepercentage=g,e.$on("set:coupling",function(t,o){e.postcouplestatus=o});var p="<div map-msg></div>",u=a(p)(e);l.setContent(u[0]),l.open(R,t)}}(l,f,s,u);w()}}}})}function d(t){var e=new google.maps.LatLng(t.lat,t.lon);if(c(),e.lat()<B.lat()&&e.lat()>E.lat()&&e.lng()<E.lng()&&e.lng()>B.lng()){var o={position:e,map:R,animation:google.maps.Animation.DROP,title:"UserPin",icon:G},n=new google.maps.Marker(o);i(function(t){return function(){t.setMap(null)}}(n),2e3)}}function m(t){for(var e,o=0;e=W[o];o++)if(t==e.post._id){e.marker.setMap(null),W.splice(o,1);break}}function f(t){var e=new google.maps.LatLng(t.lat,t.lon);w(e),v(e),g()}function w(t){for(var e,o=0;e=D[o];o++)e.setMap(null);D=[];var e=new google.maps.Marker({position:t,map:R,icon:U});D.push(e)}function v(t){e.$emit("set:loc",t);var o=new google.maps.Geocoder;o.geocode({latLng:t},function(t,o){try{e.$emit("set:place",t[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),e.$emit("set:place","Location does not exists")}})}function h(t,o){var n=e.guidtgt==t,a=e.guid==o;return n&&a?4:n&&!a?1:!n&&a?2:0}function _(){var t=document.getElementById("btn-curr");R.controls[google.maps.ControlPosition.TOP_RIGHT].push(t)}function L(){var t=document.getElementById("posting");R.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function S(){var t=document.getElementById("btn-submit");R.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function y(){var t=document.getElementById("timeSlider");R.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function P(){var t=document.getElementById("pac-input");R.controls[google.maps.ControlPosition.TOP_LEFT].push(t);var e=new google.maps.places.SearchBox(t);google.maps.event.addListener(e,"places_changed",function(){var t=e.getPlaces();if(0!=t.length){var o=t[0],n={lat:o.geometry.location.lat(),lon:o.geometry.location.lng()};f(n),window.localStorage.latitude=o.geometry.location.latitude,window.localStorage.longitude=o.geometry.location.longitude,R.panTo(o.geometry.location),R.setZoom(16)}})}function b(){google.maps.event.addListener(x,"click",function(t){var e={lat:t.latLng.lat(),lon:t.latLng.lng()};f(e)})}function M(){google.maps.event.addListener(x,"center_changed",function(){r()})}function $(){google.maps.event.addListener(x,"bounds_changed",function(){c()})}function k(){google.maps.event.addListener(x,"dragend",function(){u(),g()})}function C(){google.maps.event.addListener(x,"resize",function(){u(),g()})}function T(){google.maps.event.addListener(x,"zoom_changed",function(){u(),g()})}function A(){N=new google.maps.LatLng(34.05,-118.24),isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(N=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),v(N),F={center:N,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,q]},mapTypeId:q}}function I(){function t(t){}function e(t){google.maps.event.trigger(this,"drawXMarker",t)}function o(t){google.maps.event.trigger(this,"drawCurrLocationMarker",t)}function n(){google.maps.event.trigger(this,"updateAndDrawPosts")}function a(t){google.maps.event.trigger(this,"drawResponses",t)}function i(t){google.maps.event.trigger(this,"unDrawPost",t)}x=new google.maps.Map(l[0],F),t.prototype=x,t.prototype.drawXMarker=e,t.prototype.drawCurrLocationMarker=o,t.prototype.updateAndDrawPosts=n,t.prototype.drawResponses=a,t.prototype.unDrawPost=i,R=new t,google.maps.event.addListener(R,"drawXMarker",function(t){f(t)}),google.maps.event.addListener(R,"drawCurrLocationMarker",function(t){d(t)}),google.maps.event.addListener(R,"updateAndDrawPosts",function(){u()}),google.maps.event.addListener(R,"drawResponses",function(t){p(t)}),google.maps.event.addListener(R,"unDrawPost",function(t){m(t)})}function z(){var t=[{featureType:"landscape",stylers:[{hue:"#FFA800"},{saturation:0},{lightness:0},{gamma:1}]},{featureType:"road.highway",stylers:[{hue:"#53FF00"},{saturation:-73},{lightness:40},{gamma:1}]},{featureType:"road.arterial",stylers:[{hue:"#FBFF00"},{saturation:0},{lightness:0},{gamma:1}]},{featureType:"road.local",stylers:[{hue:"#00FFFD"},{saturation:0},{lightness:30},{gamma:1}]},{featureType:"water",stylers:[{hue:"#00BFFF"},{saturation:6},{lightness:8},{gamma:1}]},{featureType:"poi",stylers:[{hue:"#679714"},{saturation:33.4},{lightness:-25.4},{gamma:1}]}],e={name:"Custom Style"},o=new google.maps.StyledMapType(t,e);R.mapTypes.set(q,o)}function O(){void 0===R&&(A(),I(),z()),e.$emit("set:map",R),P(),_(),L(),S(),y(),b(),M(),k(),C(),T(),$(),i(function(){r(),c(),g(),u()},800)}var R,x,B,E,F,N,q="custom_style",D=[],W=[],J={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},U={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},G={url:"http://www.clker.com/cliparts/q/o/2/K/g/V/location-symbol-map-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)},X={url:"http://2.bp.blogspot.com/-djMa_n5nAEM/T1Gvx_-7-zI/AAAAAAAAAQ4/-1N6lleQvZc/s1600/blinking_dot.gif",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,17)};O()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:l}}]),angular.module("app").directive("mapMsg",["$timeout",function(t){var e=function(e,o,n){function a(){var t=e.postguid,n=e.$parent.guid;angular.element(o).parent().find("div #iw-container").on("click",function(){t!=n&&(0==e.$parent.guidtgt?(e.$emit("set:coupling",1),e.$emit("set:guidtgt",t),e.$apply()):1==e.postcouplestatus&&0!=e.$parent.guidtgt&&(e.$emit("set:coupling",0),e.$emit("set:guidtgt",0),e.$apply()))})}function i(){console.log("Life %:",e.postlifepercentage),t(function(){{var t=e.postlife+"ms";angular.element(o).parent().find("div div .postlifebar").css("-webkit-animation-duration",t)}if(e.postlifepercentage>.75){angular.element(o).parent().find("div div .postlifebar").css("-webkit-animation-name","postlifeanim_q_four"),angular.element(o).parent().find("div div .postlifebar").css("animation-name","postlifeanim_q_four")}else if(e.postlifepercentage<=.75&&e.postlifepercentage>.5){angular.element(o).parent().find("div div .postlifebar").css("-webkit-animation-name","postlifeanim_q_three"),angular.element(o).parent().find("div div .postlifebar").css("animation-name","postlifeanim_q_three")}else if(e.postlifepercentage<=.5&&e.postlifepercentage>.2){angular.element(o).parent().find("div div .postlifebar").css("-webkit-animation-name","postlifeanim_q_two"),angular.element(o).parent().find("div div .postlifebar").css("animation-name","postlifeanim_q_two")}else{angular.element(o).parent().find("div div .postlifebar").css("-webkit-animation-name","postlifeanim_q_one"),angular.element(o).parent().find("div div .postlifebar").css("animation-name","postlifeanim_q_one")}},100)}function l(){var t=$(".gm-style-iw"),e=t.prev();e.children(":nth-child(2)").css({display:"none"}),e.children(":nth-child(4)").css({display:"none"}),e.children(":nth-child(3)").find("div").children().css({"box-shadow":"0 1px 6px rgba(178, 178, 178, 0.6)","z-index":"1",border:"0px"});var o=t.next();o.css({opacity:"0.6",right:"20px",top:"17px"})}e.get_coupling=function(t){return 4==t?"coupling coupling-couple":1==t?"coupling coupling-ilikeyou":2==t?"coupling coupling-youlikei":"coupling coupling-none"};angular.element(document).ready(function(){a(),i(),t(l,10)})};return{restrict:"A",templateUrl:"./templates/window.html",link:e}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","PostsSvc","UtilSvc","$window","$document","$timeout",function(t,e,o,n,a,i,l){e.$emit("set:pagechange",e.pageId.post),e.posts=[],e.$on("ws:new_post",function(t,o){e.requestFetch()}),e.addPost=function(){var t,a=e.postplace,i=e.postLocation,s=JSON.stringify(i);if(e.timevalue<=5e3){var r=e.content.length;t=5>r?3e3:r*n.mapRange(r,5,20,500,300)}else t=e.timevalue;o.create({body:e.content,location:s,place:a,guid:e.guid,guidtgt:e.guidtgt,lifespan:t}).success(function(t){google.maps.event.trigger(e.map,"maptypeid_changed"),e.posts.unshift(t);var o=1e4;if(t.lifespan<o){var n=function(){for(var o=0;o<e.posts.length;++o)t._id==e.posts[o]._id&&e.posts.splice(o,1)};l(n,t.lifespan)}e.content=null}).error(function(t,e){swal("Post failed","Please complete the from correctly","error")})},e.requestFetch=function(){o.fetch().success(function(t){e.posts=t})},e.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)},this.remove=function(e){return t.put("/api/posts",e)}}]),angular.module("app").service("SessionSvc",["$http",function(t){this.fetch=function(){return t.get("/api/sessions")},this.enter=function(e){return t.post("/api/sessions",e)},this.remove=function(e){var o={guid:e};return t.put("/api/sessions",o)},this.updateWatchLocation=function(e,o,n,a){var i={nw_lat:e.lat,nw_lon:e.lon,se_lat:o.lat,se_lon:o.lon,center_lat:n.lat,center_lon:n.lon},l=JSON.stringify(i),s={watchloc:l,guid:a};return console.log("updating watch location"),t.post("/api/sessions/update",s)}}]);
//# sourceMappingURL=data:application/json;base64,