angular.module("app",["ngRoute","duScroll"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window","$http",function(o,e,t,n){e.pageId={post:0},e.navCollapsed=!0,e.collapse=function(){e.navCollapsed=!0},e.$on("ws:new_post",function(o,t){google.maps.event.trigger(e.map,"maptypeid_changed")}),e.moveToCurrentLocation=function(){function o(o){if(e.currentPageId==e.pageId.post){var t=o.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var n=new google.maps.LatLng(t.latitude,t.longitude);google.maps.event.trigger(e.map,"heading_changed",n),e.map.panTo(n),e.map.setZoom(15)}}function t(o){console.warn("ERROR("+o.code+"): "+o.message)}navigator.geolocation.getCurrentPosition(o,t),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},e.$on("pagechange",function(o,t){e.currentPageId=t}),e.$on("loc",function(o,t){console.log("IN:",t);var n=t.lat(),a=t.lng();e.postLocation={lat:n,lon:a},console.log("SAVED:",e.postLocation)}),e.$on("place",function(o,t){e.$apply(function(){e.postplace=t,console.log("SAVED:",e.postplace)})}),e.$on("mapInit",function(o,t){e.map=t,google.maps.event.trigger(e.map,"center_changed")})}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var o=this;o.deg2rad=function(o){return o*(Math.PI/180)},o.getDistanceFromLatLonInKm=function(e,t,n,a){var l=6371,i=o.deg2rad(n-e),c=o.deg2rad(a-t),s=Math.sin(i/2)*Math.sin(i/2)+Math.cos(o.deg2rad(e))*Math.cos(o.deg2rad(n))*Math.sin(c/2)*Math.sin(c/2),r=2*Math.atan2(Math.sqrt(s),Math.sqrt(1-s)),g=l*r;return g}}),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","$compile","$timeout",function(o,e,t,n){var a=function(e,a,l){function i(o){for(var e,t=0;e=M[t];t++)e.setMap(null);M=[];var e=new google.maps.Marker({position:o,map:h,icon:P});M.push(e)}function c(){for(var o,e=0;o=M[e];e++)o.setMap(null);M=[]}function s(o){var t=new google.maps.Geocoder;e.$emit("loc",o),i(o),t.geocode({latLng:o},function(o,t){try{e.$emit("place",o[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),e.$emit("place","Location does not exists")}})}function r(){o.fetch().success(function(o){for(var n=0;n<o.length;n++){for(var a,l=o[n],i=0;a=I[i];i++)if(l._id==a.post._id){l=null;break}if(l&&l.hasOwnProperty("location")){var c=angular.fromJson(l.location),s=new google.maps.LatLng(c.lat,c.lon);if(s.lat()<S.lat()&&s.lat()>L.lat()&&s.lng()<L.lng()&&s.lng()>S.lng()){var r={position:s,map:h,title:"Bubble",icon:$},a=new google.maps.Marker(r);setTimeout(function(o,e){return function(){o.setMap(null);for(var t,n=0;t=I[n];n++)e._id==t.post._id&&I.splice(n,1)}}(a,l),l.lifespan),I.push({marker:a,post:l});var g=e,p=g.$new(!0),u=function(o,e,n,a){return function(){var l={pixelOffset:new google.maps.Size(-41.5,10)},i=new google.maps.InfoWindow(l),c="<div map-msg></div>",s=t(c)(e);e.msg=n,e.postlife=a,i.setContent(s[0]),i.open(h,o)}}(a,p,l.body,l.lifespan);u()}}}})}function g(){var o=document.getElementById("pac-input"),e=document.getElementById("btn-curr");h.controls[google.maps.ControlPosition.TOP_LEFT].push(o),h.controls[google.maps.ControlPosition.TOP_RIGHT].push(e);var t=new google.maps.places.SearchBox(o);google.maps.event.addListener(t,"places_changed",function(){var o=t.getPlaces();if(0!=o.length){var e=o[0];s(e.geometry.location),window.localStorage.latitude=e.geometry.location.latitude,window.localStorage.longitude=e.geometry.location.longitude,h.panTo(e.geometry.location),h.setZoom(16)}})}function p(){google.maps.event.addListener(h,"click",function(o){s(o.latLng)})}function u(){google.maps.event.addListener(h,"heading_changed",function(o){s(o)})}function d(){google.maps.event.addListener(h,"center_changed",function(){window.localStorage.latitude=h.getCenter().lat(),window.localStorage.longitude=h.getCenter().lng(),f()})}function m(){google.maps.event.addListener(h,"dragend",function(){r()})}function f(){var o=h.getBounds(),e=o.getNorthEast(),t=o.getSouthWest();S=new google.maps.LatLng(e.lat(),t.lng()),L=new google.maps.LatLng(t.lat(),e.lng())}function w(){google.maps.event.addListener(h,"maptypeid_changed",function(){c(),r()})}function v(){void 0===h&&(h=new google.maps.Map(a[0],_)),w(),e.$emit("mapInit",h),p(),g(),d(),u(),m(),r(),n(function(){f()},800)}var h,S,L,$={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,25)},P={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)};console.log("window.localStorage.latitude ",window.localStorage.latitude);var y=new google.maps.LatLng(34.05,-118.24);isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(y=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),console.log("window.localStorage.latitude ",window.localStorage.latitude),console.log(y);var _={center:y,zoom:15,MapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1,streetViewControl:!1,mapTypeControl:!1,panControl:!1},M=[],I=[];v()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:a}}]),angular.module("app").directive("mapMsg",function(){return{restrict:"A",templateUrl:"./templates/window.html",link:function(o,e){var t=o.postlife+"ms";angular.element(document).ready(function(){$("div div .postlifebar").css("animation-duration",t),console.log("Jquery called :"+t+" and msg:"+o.msg)})}}}),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","PostsSvc","$window","$document",function(o,e,t,n,a){e.$emit("pagechange",e.pageId.post),e.posts=[],e.$on("ws:new_post",function(o,t){e.requestFetch()}),e.moveToLoc=function(o){var t=e.posts[o],n=angular.fromJson(t.location),l=new google.maps.LatLng(n.lat,n.lon);e.map.panTo(l),e.map.setZoom(16);var i=0,c=480;a.scrollTop(i,c).then(function(){console&&console.log("You just scrolled to the top!")})},e.addPost=function(){var n=e.postplace,a=e.postLocation,l=JSON.stringify(a);console.log("POST location:",l),console.log("POST place:",n),t.create({body:e.content,location:l,place:n,guid:o.guid}).success(function(o){google.maps.event.trigger(e.map,"maptypeid_changed"),e.posts.unshift(o),console.log("post has been postsed. ready for delete");var t=function(){for(var t=0;t<e.posts.length;++t)o._id==e.posts[t]._id&&e.posts.splice(t,1)};setTimeout(t,o.lifespan),e.content=null}).error(function(o,e){swal("Post failed","Please complete the from correctly","error")})},e.requestFetch=function(){t.fetch().success(function(o){console.log("Posts have been loaded successfully for front page"),e.posts=o})},e.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(e){return o.post("/api/posts",e)},this.remove=function(e){return console.log("deleting posting"),console.log("post._id:",e._id),o.put("/api/posts",e)}}]),angular.module("app").run(["$rootScope","$timeout",function(o,e){function t(){function o(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return o()+o()+"-"+o()+"-"+o()+"-"+o()+"-"+o()+o()+o()}o.curr_platform=navigator.platform,o.guid=t();var n,a=document.location.hostname,l="192.168.0.4";n="localhost"==a||a==l?"ws://192.168.0.4:5000":"wss://frozen-badlands-8649.herokuapp.com";var i=function(){connection=new WebSocket(n),connection.onopen=function(){console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),e(i,1e5)},connection.onmessage=function(e){console.log(e);var t=JSON.parse(e.data);o.$broadcast("ws:"+t.type,t.data)}};i()}]);
//# sourceMappingURL=data:application/json;base64,