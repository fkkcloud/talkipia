angular.module("app",["ngRoute","ui.slider"]),angular.module("app").controller("ApplicationCtrl",["SessionSvc","$rootScope","$scope","$window","$http","$timeout",function(t,o,e,n,a,i){function l(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()}e.guid=l(),e.pageId={post:0},e.sliderOptions={from:1,to:3e5,step:5e3,dimension:" km",vertical:!1,limits:!1,css:{background:{"background-color":"yellow"},before:{"background-color":"purple"},"default":{"background-color":"white"},after:{"background-color":"green"},pointer:{"background-color":"red"}}},e.timevalue=5e3,e.navCollapsed=!0,e.guidtgt="0",window.onbeforeunload=function(){t.remove(e.guid)};var s,r=document.location.hostname,g="192.168.0.4";s="localhost"==r?"ws://localhost:5000":r==g?"ws://192.168.0.4:5000":"wss://cloudtalk.herokuapp.com";var c=function(){connection=new WebSocket(s),connection.onopen=function(){function o(o){var n=o.coords,a=new google.maps.LatLng(n.latitude,n.longitude),i={lat:a.lat(),lon:a.lng()},l=JSON.stringify(i),s=e.map.getBounds(),r=s.getNorthEast(),g=s.getSouthWest(),c={lat:r.lat(),lon:g.lng()},u={lat:g.lat(),lon:r.lng()},p={lat:window.localStorage.latitude,lon:window.localStorage.longitude},d={nw_lat:c.lat,nw_lon:c.lon,se_lat:u.lat,se_lon:u.lon,center_lat:p.lat,center_lon:p.lon},m=JSON.stringify(d),f={guid:e.guid,location:l,watchloc:m};t.enter(f)}function n(t){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+t.code+"): "+t.message)}navigator.geolocation.getCurrentPosition(o,n),console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),i(c,2e3)},connection.onmessage=function(t){var e=JSON.parse(t.data);o.$broadcast("ws:"+e.type,e.data)}};c(),e.$on("ws:new_post",function(t,o){e.map.updateAndDrawPosts(),o.guid==e.guid&&e.map.drawResponses(o)}),e.$on("ws:new_session",function(t,o){var n=angular.fromJson(o.location);e.map.drawCurrLocationMarker(n)}),e.$on("ws:remove_post",function(t,o){e.map.unDrawPost(o)}),e.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},e.moveToCurrentLocation=function(){function t(t){if(e.currentPageId==e.pageId.post){var o=t.coords;window.localStorage.latitude=o.latitude,window.localStorage.longitude=o.longitude;var n={lat:o.latitude,lon:o.longitude};e.map.drawCurrLocationMarker(n),e.map.drawXMarker(n);var a=new google.maps.LatLng(n.lat,n.lon);e.map.panTo(a),e.map.setZoom(15)}}function o(t){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+t.code+"): "+t.message)}navigator.geolocation.getCurrentPosition(t,o),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},e.moveToPostLocation=function(){var t=0;if(e.isMobile()){var o=e.map.getBounds(),n=o.getNorthEast(),a=o.getSouthWest();current_map_nw=new google.maps.LatLng(n.lat(),a.lng()),current_map_se=new google.maps.LatLng(a.lat(),n.lng());var i=.5*Math.abs(e.postLocation.lat-current_map_nw.lat()),l=.5*Math.abs(e.postLocation.lat-current_map_se.lat());t=i>l?l:i}var s=new google.maps.LatLng(e.postLocation.lat+t,e.postLocation.lon);e.map.panTo(s)},e.collapse=function(){e.navCollapsed=!0},e.$on("mapInit",function(t,o){e.map=o}),e.$on("set:guidtgt",function(t,o){e.guidtgt=o}),e.$on("pagechange",function(t,o){e.currentPageId=o}),e.$on("loc",function(t,o){var n=o.lat(),a=o.lng();e.postLocation={lat:n,lon:a}}),e.$on("place",function(t,o){e.$apply(function(){e.postplace=o})})}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var t=this;t.deg2rad=function(t){return t*(Math.PI/180)},t.getDistanceFromLatLonInKm=function(o,e,n,a){var i=6371,l=t.deg2rad(n-o),s=t.deg2rad(a-e),r=Math.sin(l/2)*Math.sin(l/2)+Math.cos(t.deg2rad(o))*Math.cos(t.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),g=2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),c=i*g;return c},t.mapRange=function(t,o,e,n,a){return n+(a-n)*(t-o)/(e-o)}}),angular.module("app").run(["$rootScope","$timeout","SessionSvc",function(t,o,e){}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","SessionSvc","$compile",function(t,o,e,n){var a=function(o,a,i,l){function s(){window.localStorage.latitude=O.getCenter().lat(),window.localStorage.longitude=O.getCenter().lng()}function r(){var t=O.getBounds(),o=t.getNorthEast(),e=t.getSouthWest();B=new google.maps.LatLng(o.lat(),e.lng()),E=new google.maps.LatLng(e.lat(),o.lng())}function g(){var t=O.getBounds(),n=t.getNorthEast(),a=t.getSouthWest();B={lat:n.lat(),lon:a.lng()},E={lat:a.lat(),lon:n.lng()};var i;i=o.postLocation.lat<B.lat&&o.postLocation.lat>E.lat&&o.postLocation.lon<E.lon&&o.postLocation.lon>B.lon?{lat:o.postLocation.lat,lon:o.postLocation.lon}:{lat:O.getCenter().lat(),lon:O.getCenter().lng()},e.updateWatchLocation(B,E,i,o.guid)}function c(t){e.fetch().success(function(e){for(var n=0;n<e.length;n++){var a=e[n];if(a.guid!=o.guid){var i=angular.fromJson(a.watchloc),l=angular.fromJson(t.location);if(r(),i.center_lat<B.lat()&&i.center_lat>E.lat()&&i.center_lon<E.lng()&&i.center_lon>B.lng()&&l.lat<i.nw_lat&&l.lat>i.se_lat&&l.lon<i.se_lon&&l.lon>i.nw_lon){var s=new google.maps.LatLng(i.center_lat,i.center_lon),g={position:s,map:O,title:"UserPin",icon:X,optimized:!1},c=new google.maps.Marker(g);setTimeout(function(t){return function(){t.setMap(null)}}(c),1800)}}}})}function u(){t.fetch().success(function(t){for(var e=0;e<t.length;e++){for(var a,i=t[e],l=0;a=W[l];l++)if(i._id==a.post._id){i=null;break}if(i&&i.hasOwnProperty("location")){var s=angular.fromJson(i.location),g=new google.maps.LatLng(s.lat,s.lon);if(r(),g.lat()<B.lat()&&g.lat()>E.lat()&&g.lng()<E.lng()&&g.lng()>B.lng()){var c=v(i.guid,i.guidtgt),u={position:g,map:O,title:"Bubble",icon:J},a=new google.maps.Marker(u),p=1e4;i.lifespan<p&&setTimeout(function(t,o){return function(){t.setMap(null);for(var e,n=0;e=W[n];n++)o._id==e.post._id&&W.splice(n,1)}}(a,i),i.lifespan),W.push({marker:a,post:i});var d=o,m=d.$new(!0),f=function(t,o,e,a){return function(){var i={pixelOffset:new google.maps.Size(-41.5,10),disableAutoPan:!0},l=new google.maps.InfoWindow(i),s=new Date,r=s.getTime(),g=e.lifeend-r>=0?e.lifeend-r:0,c=(g/e.lifespan).toFixed(2);o.msg=e.body,o.postlife=g,o.postguid=e.guid,o.postguidtgt=e.guidtgt,o.postcouplestatus=a,o.postlifepercentage=c,o.$on("set:coupling",function(t,e){o.postcouplestatus=e});var u="<div map-msg></div>",p=n(u)(o);l.setContent(p[0]),l.open(O,t)}}(a,m,i,c);f()}}}})}function p(t){var o=new google.maps.LatLng(t.lat,t.lon);if(r(),o.lat()<B.lat()&&o.lat()>E.lat()&&o.lng()<E.lng()&&o.lng()>B.lng()){var e={position:o,map:O,animation:google.maps.Animation.DROP,title:"UserPin",icon:U},n=new google.maps.Marker(e);setTimeout(function(t){return function(){t.setMap(null)}}(n),2e3)}}function d(t){for(var o,e=0;o=W[e];e++)if(t==o.post._id){o.marker.setMap(null),W.splice(e,1);break}}function m(t){var o=new google.maps.LatLng(t.lat,t.lon);f(o),w(o),g()}function f(t){for(var o,e=0;o=D[e];e++)o.setMap(null);D=[];var o=new google.maps.Marker({position:t,map:O,icon:x});D.push(o)}function w(t){o.$emit("loc",t);var e=new google.maps.Geocoder;e.geocode({latLng:t},function(t,e){try{o.$emit("place",t[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),o.$emit("place","Location does not exists")}})}function v(t,e){var n=o.guidtgt==t,a=o.guid==e;return n&&a?4:n&&!a?1:!n&&a?2:0}function h(){var t=document.getElementById("btn-curr");O.controls[google.maps.ControlPosition.TOP_RIGHT].push(t)}function _(){var t=document.getElementById("posting");O.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function b(){var t=document.getElementById("btn-submit");O.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function L(){var t=document.getElementById("timeSlider");O.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function y(){var t=document.getElementById("pac-input");O.controls[google.maps.ControlPosition.TOP_LEFT].push(t);var o=new google.maps.places.SearchBox(t);google.maps.event.addListener(o,"places_changed",function(){var t=o.getPlaces();if(0!=t.length){var e=t[0],n={lat:e.geometry.location.lat(),lon:e.geometry.location.lng()};m(n),window.localStorage.latitude=e.geometry.location.latitude,window.localStorage.longitude=e.geometry.location.longitude,O.panTo(e.geometry.location),O.setZoom(16)}})}function S(){google.maps.event.addListener(R,"click",function(t){var o={lat:t.latLng.lat(),lon:t.latLng.lng()};m(o)})}function P(){google.maps.event.addListener(R,"center_changed",function(){s()})}function M(){google.maps.event.addListener(R,"bounds_changed",function(){r()})}function k(){google.maps.event.addListener(R,"dragend",function(){u(),g()})}function $(){google.maps.event.addListener(R,"resize",function(){u(),g()})}function T(){google.maps.event.addListener(R,"zoom_changed",function(){u(),g()})}function C(){N=new google.maps.LatLng(34.05,-118.24),isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(N=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),w(N),F={center:N,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,q]},mapTypeId:q}}function A(){function t(t){}function o(t){google.maps.event.trigger(this,"drawXMarker",t)}function e(t){google.maps.event.trigger(this,"drawCurrLocationMarker",t)}function n(){google.maps.event.trigger(this,"updateAndDrawPosts")}function i(t){google.maps.event.trigger(this,"drawResponses",t)}function l(t){google.maps.event.trigger(this,"unDrawPost",t)}R=new google.maps.Map(a[0],F),t.prototype=R,t.prototype.drawXMarker=o,t.prototype.drawCurrLocationMarker=e,t.prototype.updateAndDrawPosts=n,t.prototype.drawResponses=i,t.prototype.unDrawPost=l,O=new t,google.maps.event.addListener(O,"drawXMarker",function(t){m(t)}),google.maps.event.addListener(O,"drawCurrLocationMarker",function(t){p(t)}),google.maps.event.addListener(O,"updateAndDrawPosts",function(){u()}),google.maps.event.addListener(O,"drawResponses",function(t){c(t)}),google.maps.event.addListener(O,"unDrawPost",function(t){d(t)})}function I(){var t=[{featureType:"landscape",stylers:[{hue:"#FFA800"},{saturation:0},{lightness:0},{gamma:1}]},{featureType:"road.highway",stylers:[{hue:"#53FF00"},{saturation:-73},{lightness:40},{gamma:1}]},{featureType:"road.arterial",stylers:[{hue:"#FBFF00"},{saturation:0},{lightness:0},{gamma:1}]},{featureType:"road.local",stylers:[{hue:"#00FFFD"},{saturation:0},{lightness:30},{gamma:1}]},{featureType:"water",stylers:[{hue:"#00BFFF"},{saturation:6},{lightness:8},{gamma:1}]},{featureType:"poi",stylers:[{hue:"#679714"},{saturation:33.4},{lightness:-25.4},{gamma:1}]}],o={name:"Custom Style"},e=new google.maps.StyledMapType(t,o);O.mapTypes.set(q,e)}function z(){void 0===O&&(C(),A(),I()),o.$emit("mapInit",O),y(),h(),_(),b(),L(),S(),P(),k(),$(),T(),M(),setTimeout(function(){s(),r(),g(),u()},800)}var O,R,B,E,F,N,q="custom_style",D=[],W=[],J={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},x={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},U={url:"http://www.clker.com/cliparts/q/o/2/K/g/V/location-symbol-map-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)},X={url:"http://2.bp.blogspot.com/-djMa_n5nAEM/T1Gvx_-7-zI/AAAAAAAAAQ4/-1N6lleQvZc/s1600/blinking_dot.gif",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,17)};z()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:a}}]),angular.module("app").directive("mapMsg",["$timeout",function(t){var o=function(o,e,n){function a(){var t=o.postguid,n=o.$parent.guid;angular.element(e).parent().find("div div #bubbleClick").on("click",function(){t!=n&&(0==o.$parent.guidtgt?(o.$emit("set:coupling",1),o.$emit("set:guidtgt",t),o.$apply()):1==o.postcouplestatus&&0!=o.$parent.guidtgt&&(o.$emit("set:coupling",0),o.$emit("set:guidtgt",0),o.$apply()))})}function i(){console.log("Life %:",o.postlifepercentage),t(function(){{var t=o.postlife+"ms";angular.element(e).parent().find("div div .postlifebar").css("-webkit-animation-duration",t)}if(o.postlifepercentage>.75){angular.element(e).parent().find("div div .postlifebar").css("-webkit-animation-name","postlifeanim_q_four"),angular.element(e).parent().find("div div .postlifebar").css("animation-name","postlifeanim_q_four")}else if(o.postlifepercentage<=.75&&o.postlifepercentage>.5){angular.element(e).parent().find("div div .postlifebar").css("-webkit-animation-name","postlifeanim_q_three"),angular.element(e).parent().find("div div .postlifebar").css("animation-name","postlifeanim_q_three")}else if(o.postlifepercentage<=.5&&o.postlifepercentage>.2){angular.element(e).parent().find("div div .postlifebar").css("-webkit-animation-name","postlifeanim_q_two"),angular.element(e).parent().find("div div .postlifebar").css("animation-name","postlifeanim_q_two")}else{angular.element(e).parent().find("div div .postlifebar").css("-webkit-animation-name","postlifeanim_q_one"),angular.element(e).parent().find("div div .postlifebar").css("animation-name","postlifeanim_q_one")}},100)}o.get_coupling=function(t){return 4==t?"bubblePost bubblePost_couple":1==t?"bubblePost bubblePost_ilikeyou":2==t?"bubblePost bubblePost_youlikei":"bubblePost bubblePost_none"};angular.element(document).ready(function(){a(),i()})};return{restrict:"A",templateUrl:"./templates/window.html",link:o}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","PostsSvc","UtilSvc","$window","$document",function(t,o,e,n,a,i){o.$emit("pagechange",o.pageId.post),o.posts=[],o.$on("ws:new_post",function(t,e){o.requestFetch()}),o.addPost=function(){var t,a=o.postplace,i=o.postLocation,l=JSON.stringify(i);if(o.timevalue<=5e3){var s=o.content.length;t=5>s?3e3:s*n.mapRange(s,5,20,500,300)}else t=o.timevalue;e.create({body:o.content,location:l,place:a,guid:o.guid,guidtgt:o.guidtgt,lifespan:t}).success(function(t){google.maps.event.trigger(o.map,"maptypeid_changed"),o.posts.unshift(t);var e=1e4;if(t.lifespan<e){var n=function(){for(var e=0;e<o.posts.length;++e)t._id==o.posts[e]._id&&o.posts.splice(e,1)};setTimeout(n,t.lifespan)}o.content=null}).error(function(t,o){swal("Post failed","Please complete the from correctly","error")})},o.requestFetch=function(){e.fetch().success(function(t){o.posts=t})},o.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(o){return t.post("/api/posts",o)},this.remove=function(o){return t.put("/api/posts",o)}}]),angular.module("app").service("SessionSvc",["$http",function(t){this.fetch=function(){return t.get("/api/sessions")},this.enter=function(o){return t.post("/api/sessions",o)},this.remove=function(o){var e={guid:o};return t.put("/api/sessions",e)},this.updateWatchLocation=function(o,e,n,a){var i={nw_lat:o.lat,nw_lon:o.lon,se_lat:e.lat,se_lon:e.lon,center_lat:n.lat,center_lon:n.lon},l=JSON.stringify(i),s={watchloc:l,guid:a};return console.log("updating watch location"),t.post("/api/sessions/update",s)}}]);
//# sourceMappingURL=data:application/json;base64,