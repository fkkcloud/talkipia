angular.module("app",["ngRoute","duScroll"]),angular.module("app").controller("ApplicationCtrl",["SessionSvc","$rootScope","$scope","$window","$http","$timeout",function(o,t,e,n,a,i){function s(){function o(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return o()+o()+"-"+o()+"-"+o()+"-"+o()+"-"+o()+o()+o()}e.guid=s(),window.onbeforeunload=function(){o.remove(e.guid)};var l,g=document.location.hostname,r="192.168.0.4";l="localhost"==g?"ws://localhost:5000":g==r?"ws://192.168.0.4:5000":"wss://cloudtalk.herokuapp.com";var c=function(){connection=new WebSocket(l),connection.onopen=function(){function t(t){var n=t.coords,a=new google.maps.LatLng(n.latitude,n.longitude),i={lat:window.localStorage.latitude,lon:window.localStorage.longitude},s={lat:a.lat(),lon:a.lng()},l=JSON.stringify(i),g=JSON.stringify(s);console.log("setting watchloc",l),console.log("setting location",g);var r={guid:e.guid,location:g,watchloc:l};o.enter(r)}function n(o){console.warn("ERROR("+o.code+"): "+o.message)}navigator.geolocation.getCurrentPosition(t,n),console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),i(c,2e3)},connection.onmessage=function(o){console.log("broadcast msg from server:",o);var e=JSON.parse(o.data);t.$broadcast("ws:"+e.type,e.data)}};c(),e.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},e.guidtgt="0",e.$on("set:guidtgt",function(o,t){console.log("setting guidtgt",t),e.guidtgt=t}),e.pageId={post:0},e.navCollapsed=!0,e.collapse=function(){e.navCollapsed=!0},e.$on("ws:new_post",function(o,t){google.maps.event.trigger(e.map,"maptypeid_changed"),google.maps.event.trigger(e.map,"maptypeid_changed",{type:"res_post"})}),e.$on("ws:new_session",function(o,t){var n={type:"res_login",data:t};google.maps.event.trigger(e.map,"maptypeid_changed",n)}),e.$on("pagechange",function(o,t){e.currentPageId=t}),e.$on("loc",function(o,t){var n=t.lat(),a=t.lng();e.postLocation={lat:n,lon:a}}),e.$on("place",function(o,t){e.$apply(function(){e.postplace=t})}),e.$on("mapInit",function(o,t){e.map=t,google.maps.event.trigger(e.map,"center_changed")}),e.moveToCurrentLocation=function(){function o(o){if(e.currentPageId==e.pageId.post){var t=o.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var n=new google.maps.LatLng(t.latitude,t.longitude),a={type:"curr_loc",location:n};google.maps.event.trigger(e.map,"heading_changed",a);var a={type:"curr_x",location:n};google.maps.event.trigger(e.map,"heading_changed",a),e.map.panTo(n),e.map.setZoom(15)}}function t(o){console.warn("ERROR("+o.code+"): "+o.message)}navigator.geolocation.getCurrentPosition(o,t),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},e.moveToPostLocation=function(){var o=0;if(e.isMobile()){var t=e.map.getBounds(),n=t.getNorthEast(),a=t.getSouthWest();current_map_nw=new google.maps.LatLng(n.lat(),a.lng()),current_map_se=new google.maps.LatLng(a.lat(),n.lng());var i=.5*Math.abs(e.postLocation.lat-current_map_nw.lat()),s=.5*Math.abs(e.postLocation.lat-current_map_se.lat());o=i>s?s:i}var l=new google.maps.LatLng(e.postLocation.lat+o,e.postLocation.lon);e.map.panTo(l)}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var o=this;o.deg2rad=function(o){return o*(Math.PI/180)},o.getDistanceFromLatLonInKm=function(t,e,n,a){var i=6371,s=o.deg2rad(n-t),l=o.deg2rad(a-e),g=Math.sin(s/2)*Math.sin(s/2)+Math.cos(o.deg2rad(t))*Math.cos(o.deg2rad(n))*Math.sin(l/2)*Math.sin(l/2),r=2*Math.atan2(Math.sqrt(g),Math.sqrt(1-g)),c=i*r;return c}}),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","SessionSvc","$compile","$timeout",function(o,t,e,n,a){var i=function(t,i,s,l){function g(o){for(var t,e=0;t=U[e];e++)t.setMap(null);U=[];var t=new google.maps.Marker({position:o,map:k,icon:F});U.push(t)}function r(){for(var o,t=0;o=U[t];t++)o.setMap(null);U=[]}function c(o){t.$emit("loc",o);var e=new google.maps.Geocoder;e.geocode({latLng:o},function(o,e){try{t.$emit("place",o[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),t.$emit("place","Location does not exists")}})}function u(o){g(o),c(o)}function p(o,e){var n=t.guidtgt==o,a=t.guid==e;return n&&a?4:n&&!a?1:!n&&a?2:0}function d(){e.fetch().success(function(o){for(var e=0;e<o.length;e++){var n=o[e];if(n.guid!=t.guid){console.log(n.watchloc);var a=angular.fromJson(n.watchloc),i=new google.maps.LatLng(a.lat,a.lon),s={position:i,map:k,title:"UserPin",icon:E,optimized:!1},l=new google.maps.Marker(s);setTimeout(function(o){return function(){o.setMap(null)}}(l),1800)}}})}function m(){o.fetch().success(function(o){for(var e=0;e<o.length;e++){for(var a,i=o[e],s=0;a=W[s];s++)if(i._id==a.post._id){i=null;break}if(i&&i.hasOwnProperty("location")){var l=angular.fromJson(i.location),g=new google.maps.LatLng(l.lat,l.lon);if(g.lat()<I.lat()&&g.lat()>z.lat()&&g.lng()<z.lng()&&g.lng()>I.lng()){var r=p(i.guid,i.guidtgt),c={position:g,map:k,title:"Bubble",icon:O},a=new google.maps.Marker(c);setTimeout(function(o,t){return function(){o.setMap(null);for(var e,n=0;e=W[n];n++)t._id==e.post._id&&W.splice(n,1)}}(a,i),i.lifespan),W.push({marker:a,post:i});var u=t,d=u.$new(!0),m=function(o,t,e,a){return function(){var i={pixelOffset:new google.maps.Size(-41.5,10),disableAutoPan:!0},s=new google.maps.InfoWindow(i),l="<div map-msg></div>",g=n(l)(t);t.msg=e.body,t.postlife=e.lifespan,t.postguid=e.guid,t.postguidtgt=e.guidtgt,t.postcouplestatus=a,s.setContent(g[0]),s.open(k,o)}}(a,d,i,r);m()}}}})}function f(){m()}function h(){var o=document.getElementById("btn-curr");k.controls[google.maps.ControlPosition.TOP_RIGHT].push(o)}function w(){var o=document.getElementById("posting");k.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(o)}function v(){var o=document.getElementById("btn-submit");k.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(o)}function y(){var o=document.getElementById("pac-input");k.controls[google.maps.ControlPosition.TOP_LEFT].push(o);var t=new google.maps.places.SearchBox(o);google.maps.event.addListener(t,"places_changed",function(){var o=t.getPlaces();if(0!=o.length){var e=o[0];u(e.geometry.location),window.localStorage.latitude=e.geometry.location.latitude,window.localStorage.longitude=e.geometry.location.longitude,k.panTo(e.geometry.location),k.setZoom(16)}})}function S(){google.maps.event.addListener(k,"click",function(o){u(o.latLng)})}function _(){google.maps.event.addListener(k,"heading_changed",function(o){"curr_x"==o.type?u(o.location):"curr_loc"==o.type&&T(o.location)})}function b(){google.maps.event.addListener(k,"center_changed",function(){window.localStorage.latitude=k.getCenter().lat(),window.localStorage.longitude=k.getCenter().lng(),C()})}function L(){google.maps.event.addListener(k,"dragend",function(){M(),f()})}function P(){google.maps.event.addListener(k,"maptypeid_changed",function(o){null==o?(r(),f()):"res_login"==o.type?$(o.data):"res_post"==o.type&&d()})}function M(){var o={lat:k.getCenter().lat(),lon:k.getCenter().lng()},n=JSON.stringify(o),a={watchloc:n,guid:t.guid};e.update(a)}function T(o){if(o.lat()<I.lat()&&o.lat()>z.lat()&&o.lng()<z.lng()&&o.lng()>I.lng()){var t={position:o,map:k,animation:google.maps.Animation.DROP,title:"UserPin",icon:B},e=new google.maps.Marker(t);setTimeout(function(o){return function(){o.setMap(null)}}(e),2e3)}}function $(o){var t=angular.fromJson(o.location),e=new google.maps.LatLng(t.lat,t.lon);T(e)}function C(){var o=k.getBounds(),t=o.getNorthEast(),e=o.getSouthWest();I=new google.maps.LatLng(t.lat(),e.lng()),z=new google.maps.LatLng(e.lat(),t.lng())}function A(){if(void 0===k){k=new google.maps.Map(i[0],J);var o={name:"Custom Style"},e=new google.maps.StyledMapType(R,o);k.mapTypes.set(N,e)}P(),t.$emit("mapInit",k),S(),y(),h(),w(),v(),b(),_(),L(),f(),a(function(){C()},800)}var k,I,z,O={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,25)},F={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},B={url:"http://www.clker.com/cliparts/q/o/2/K/g/V/location-symbol-map-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)},E={url:"http://2.bp.blogspot.com/-djMa_n5nAEM/T1Gvx_-7-zI/AAAAAAAAAQ4/-1N6lleQvZc/s1600/blinking_dot.gif",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,17)},N="custom_style",R=[{featureType:"landscape",stylers:[{hue:"#FFA800"},{saturation:0},{lightness:0},{gamma:1}]},{featureType:"road.highway",stylers:[{hue:"#53FF00"},{saturation:-73},{lightness:40},{gamma:1}]},{featureType:"road.arterial",stylers:[{hue:"#FBFF00"},{saturation:0},{lightness:0},{gamma:1}]},{featureType:"road.local",stylers:[{hue:"#00FFFD"},{saturation:0},{lightness:30},{gamma:1}]},{featureType:"water",stylers:[{hue:"#00BFFF"},{saturation:6},{lightness:8},{gamma:1}]},{featureType:"poi",stylers:[{hue:"#679714"},{saturation:33.4},{lightness:-25.4},{gamma:1}]}],x=new google.maps.LatLng(34.05,-118.24);isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(x=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),c(x);var J={center:x,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,N]},mapTypeId:N},U=[],W=[];A()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:i}}]),angular.module("app").directive("mapMsg",["$timeout",function(o){return{restrict:"A",templateUrl:"./templates/window.html",link:function(t,e,n){t.get_coupling=function(o){return 4==o?"bubblePost bubblePost_couple":1==o?"bubblePost bubblePost_ilikeyou":2==o?"bubblePost bubblePost_youlikei":"bubblePost bubblePost_none"},angular.element(document).ready(function(){var n=t.postguid,a=t.$parent.guid;e.parent().find("div div #bubbleClick").on("click",function(){console.log("window clicked."),n!=a&&(console.log("emit set:guidtgt",n),t.$emit("set:guidtgt",n))}),o(function(){{var o=t.postlife+"ms";e.parent().find("div div .postlifebar").css("animation-duration",o)}},100)})}}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","PostsSvc","$window","$document",function(o,t,e,n,a){t.$emit("pagechange",t.pageId.post),t.posts=[],t.$on("ws:new_post",function(o,e){t.requestFetch()}),t.moveToLoc=function(o){var e=t.posts[o],n=angular.fromJson(e.location),i=new google.maps.LatLng(n.lat,n.lon);t.map.panTo(i),t.map.setZoom(16);var s=0,l=480;a.scrollTop(s,l).then(function(){console&&console.log("You just scrolled to the top!")})},t.addPost=function(){var o=t.postplace,n=t.postLocation,a=JSON.stringify(n);e.create({body:t.content,location:a,place:o,guid:t.guid,guidtgt:t.guidtgt}).success(function(o){google.maps.event.trigger(t.map,"maptypeid_changed"),t.posts.unshift(o);var e=function(){for(var e=0;e<t.posts.length;++e)o._id==t.posts[e]._id&&t.posts.splice(e,1)};setTimeout(e,o.lifespan),t.content=null}).error(function(o,t){swal("Post failed","Please complete the from correctly","error")})},t.requestFetch=function(){e.fetch().success(function(o){t.posts=o})},t.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)},this.remove=function(t){return console.log("deleting posting"),console.log("post._id:",t._id),o.put("/api/posts",t)}}]),angular.module("app").service("SessionSvc",["$http",function(o){this.fetch=function(){return o.get("/api/sessions")},this.enter=function(t){return o.post("/api/sessions",t)},this.remove=function(t){console.log("deleting session"),console.log("session.guid:",t);var e={guid:t};return o.put("/api/sessions",e)},this.update=function(t){return console.log("updating watch location"),console.log("updatedsession:",t),o.post("/api/sessions/update",t)}}]),angular.module("app").run(["$rootScope","$timeout","SessionSvc",function(o,t,e){}]);
//# sourceMappingURL=data:application/json;base64,