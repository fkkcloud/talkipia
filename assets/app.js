angular.module("app",["ngRoute","ngAnimate","ui.slider"]),angular.module("app").controller("ApplicationCtrl",["SessionSvc","UtilSvc","ConfigSvc","$rootScope","$scope","$window","$http","$timeout",function(e,t,o,n,i,a,l,s){window.onbeforeunload=function(t){e.remove(i.guid)},window.onpageshow=function(e){i.initSession(),i.map&&i.map.updateAndDrawPosts()},window.onpagehide=function(t){e.remove(i.guid)},document.addEventListener("visibilitychange",function(){"visible"==document.visibilityState||"mozVisible"==document.visibilityState||"msVisible"==document.visibilityState||"webkitVisible"==document.visibilityState?(i.initSession(),i.map&&i.map.updateAndDrawPosts(),console.log("its back")):("hidden"==document.visibilityState||"mozHidden"==document.visibilityState||"msHidden"==document.visibilityState||"webkitHidden"==document.visibilityState)&&(e.remove(i.guid),console.log("going to background"))}),document.addEventListener("webkitvisibilitychange",function(){document.webkitVisible?(i.initSession(),i.map&&i.map.updateAndDrawPosts(),alert("its back")):document.webkitHidden&&(e.remove(i.guid),alert("going to background"))},!1),i.initSession=function(){function t(t){var o=t.coords,n=new google.maps.LatLng(o.latitude,o.longitude);i.userLocation={lat:o.latitude,lon:o.longitude};var a={lat:n.lat(),lon:n.lng()},l=JSON.stringify(a),s=i.map.getBounds(),r=s.getNorthEast(),c=s.getSouthWest(),g={lat:r.lat(),lon:c.lng()},p={lat:c.lat(),lon:r.lng()},u={lat:window.localStorage.latitude,lon:window.localStorage.longitude},d={nw_lat:g.lat,nw_lon:g.lon,se_lat:p.lat,se_lon:p.lon,center_lat:u.lat,center_lon:u.lon},m=JSON.stringify(d),f={guidtgt:i.guidtgt,guid:i.guid,location:l,watchloc:m};e.enter(f)}function o(e){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+e.code+"): "+e.message)}if("undefined"!=i.map&&"null"!=i.map&&i.map){var n={enableHighAccuracy:!1,timeout:5e3,maximumAge:0};navigator.geolocation.getCurrentPosition(t,o,n),swal({title:"",text:"Retreiving currnet location..",timer:3500,showConfirmButton:!1})}},"undefined"!=window.localStorage.guid&&"null"!=window.localStorage.guid&&window.localStorage.guid||(window.localStorage.guid=t.getGuid()),i.guid=window.localStorage.guid,"undefined"!=window.localStorage.guidtgt&&"null"!=window.localStorage.guidtgt&&window.localStorage.guidtgt||(window.localStorage.guidtgt="0"),i.guidtgt=window.localStorage.guidtgt,i.pageId={post:0},i.navCollapsed=!0,i.timevalue=o.maxInstantLifeSpan,i.userLocation={lat:0,lon:0},i.toggleSearchLocation=!1,i.toggleTimeSlider=!1,s(function(){document.getElementById("map-posting").onkeypress=function(e){"13"==e.which&&$("form#map-posting-form").submit()},document.getElementById("map-posting").onfocus=function(e){console.log("on focus"),i.toggleTimeSlider=!0},document.getElementById("map-posting").onblur=function(e){console.log("on blur"),i.toggleTimeSlider=!1},$(".nav-burger").click(function(){$(".nav-burger").toggleClass("active"),i.toggleSearchLocation=!i.toggleSearchLocation,i.$apply()})});var r,c=document.location.hostname;r=c==o.local?o.web_socket+o.local+":"+o.port:c==o.local_ip?o.web_socket+o.local_ip+":"+o.port:o.web_socket+o.deploy_dns;var g=function(){connection=new WebSocket(r),connection.onopen=function(){connection.send(i.guid),console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),s(g,2e3)},connection.onmessage=function(e){var t=JSON.parse(e.data);console.log("ws:"+t.type),n.$broadcast("ws:"+t.type,t.data)}};g(),i.$on("ws:new_post",function(e,t){i.map.updateAndDrawPosts(),t.guid==i.guid&&i.map.drawResponses(t)}),i.$on("ws:new_session",function(e,t){var o=angular.fromJson(t.location);i.map.drawCurrLocationMarker(o)}),i.$on("ws:remove_post",function(e,t){i.map.unDrawPost(t)}),i.$on("ws:update_guidtgt",function(e,t){i.map.updateAndDrawPosts()}),i.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},i.moveToCurrentLocation=function(){function e(e){if(i.currentPageId==i.pageId.post){var t=e.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var o={lat:t.latitude,lon:t.longitude};i.map.drawCurrLocationMarker(o),i.map.drawXMarker(o);var n=new google.maps.LatLng(o.lat,o.lon);i.map.panTo(n),i.map.setZoom(15)}}function t(e){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+e.code+"): "+e.message)}var o={enableHighAccuracy:!0,timeout:8e3,maximumAge:0};navigator.geolocation.getCurrentPosition(e,t,o),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},i.moveToPostLocation=function(){var e=0;if(i.isMobile()){var t=i.map.getBounds(),o=t.getNorthEast(),n=t.getSouthWest();current_map_nw=new google.maps.LatLng(o.lat(),n.lng()),current_map_se=new google.maps.LatLng(n.lat(),o.lng());var a=.5*Math.abs(i.postLocation.lat-current_map_nw.lat()),l=.5*Math.abs(i.postLocation.lat-current_map_se.lat());e=a>l?l:a}var s=i.map.getCenter(),r=new google.maps.LatLng(i.postLocation.lat+e,s.lng());i.map.panTo(r)},i.collapse=function(){i.navCollapsed=!0},i.$on("set:map",function(e,t){i.map=t}),i.$on("set:guidtgt",function(e,t){i.guidtgt=t,window.localStorage.guidtgt=t}),i.$on("set:pagechange",function(e,t){i.currentPageId=t}),i.$on("set:loc",function(e,t){var o=t.lat(),n=t.lng();i.postLocation={lat:o,lon:n}}),i.$on("set:place",function(e,t){i.$apply(function(){i.postplace=t})})}]),angular.module("app").constant("ConfigSvc",{web_socket:"ws://",web_socket_secure:"wss://",local:"localhost",local_ip:"192.168.0.4",deploy_dns:"talkipia.com",port:"5000",maxInstantLifeSpan:5e3}),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var e=this;e.deg2rad=function(e){return e*(Math.PI/180)},e.getDistanceFromLatLonInKm=function(t,o,n,i){var a=6371,l=e.deg2rad(n-t),s=e.deg2rad(i-o),r=Math.sin(l/2)*Math.sin(l/2)+Math.cos(e.deg2rad(t))*Math.cos(e.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),c=2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),g=a*c;return g},e.mapRange=function(e,t,o,n,i){return n+(i-n)*(e-t)/(o-t)},e.getGuid=function(){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}}),angular.module("app").run(["$rootScope","$timeout","SessionSvc",function(e,t,o){}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","ConfigSvc","SessionSvc","$compile","$timeout",function(e,t,o,n,i,a){var l=function(t,o,l){function s(){window.localStorage.latitude=I.getCenter().lat(),window.localStorage.longitude=I.getCenter().lng()}function r(){var e=I.getBounds(),t=e.getNorthEast(),o=e.getSouthWest();O=new google.maps.LatLng(t.lat(),o.lng()),R=new google.maps.LatLng(o.lat(),t.lng())}function c(){var e=I.getBounds(),o=e.getNorthEast(),i=e.getSouthWest();O={lat:o.lat(),lon:i.lng()},R={lat:i.lat(),lon:o.lng()};var a;a=t.postLocation.lat<O.lat&&t.postLocation.lat>R.lat&&t.postLocation.lon<R.lon&&t.postLocation.lon>O.lon?{lat:t.postLocation.lat,lon:t.postLocation.lon}:{lat:I.getCenter().lat(),lon:I.getCenter().lng()},n.updateWatchLocation(O,R,a,t.guid)}function g(e){n.fetch().success(function(o){for(var n=0;n<o.length;n++){var i=o[n];if(i.guid!=t.guid){var l=angular.fromJson(i.watchloc),s=angular.fromJson(e.location);if(r(),l.center_lat<O.lat()&&l.center_lat>R.lat()&&l.center_lon<R.lng()&&l.center_lon>O.lng()&&s.lat<l.nw_lat&&s.lat>l.se_lat&&s.lon<l.se_lon&&s.lon>l.nw_lon){var c=new google.maps.LatLng(l.center_lat,l.center_lon),g=40*Math.random()+40,p="Blink.gif",u={url:p,size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(.5*g+5,.5*g+14),scaledSize:new google.maps.Size(g,g)};!function(e){var t={position:c,map:I,title:"Receiver",icon:e,optimized:!1},o=new google.maps.Marker(t),n=1200;a(function(e){return function(){e.setMap(null),e=null}}(o),n)}(u)}}}})}function p(){for(var e,t=0;e=G[t];t++){var o=new Date,n=o.getTime(),i=e.post.lifeend-n;0>=i&&(console.log("cleaning up..",e.post._id),m(e.post._id))}}function u(){p(),F=H!=t.guidtgt,H=t.guidtgt,e.fetch().success(function(o){for(var n=0;n<o.length;n++){var a=o[n],l=angular.fromJson(a.location),s=new google.maps.LatLng(l.lat,l.lon);if(r(),s.lat()<O.lat()&&s.lat()>R.lat()&&s.lng()<R.lng()&&s.lng()>O.lng()){for(var c,g=0;c=G[g];g++){var p=a._id==c.post._id;if(p){if(F){m(a._id);break}if(c.post.guidtgt==a.guidtgt){a=null;break}m(a._id);break}}if(null!=a){var u={position:s,map:I,title:"Bubble",icon:V},c=new google.maps.Marker(u);G.push({marker:c,post:a});var d=v(a.guid,a.guidtgt),f=a.islocal,y=t,w=y.$new(!0),h=function(o,n,a,l,s){return function(){var r={pixelOffset:new google.maps.Size(-39.5,16),disableAutoPan:!0},c=new google.maps.InfoWindow(r),g=new Date,p=g.getTime(),u=a.lifeend-p>=0?a.lifeend-p:0,d=(u/a.lifespan).toFixed(2);n.msg=a.body,n.postlife=u,n.postguid=a.guid,n.postguidtgt=a.guidtgt,n.postcouplestatus=l,n.postlifepercentage=d,n.postlocalstatus=s;var m="<div map-msg></div>",f=i(m)(n);c.setContent(f[0]),google.maps.event.addListener(c,"closeclick",function(){a.guid==t.guid&&swal({title:"Are you sure?",text:"You will not be able to recover this imaginary file!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",closeOnConfirm:!1},function(t){if(t)e.remove(a),swal("Deleted!","Your imaginary file has been deleted.","success");else{var i=new Date,l=i.getTime(),s=a.lifeend-l>=0?a.lifeend-l:0,r=(s/a.lifespan).toFixed(2);r>0&&(n.postlifepercentage=r,c.open(I,o))}})}),c.open(I,o)}}(c,w,a,d,f);h()}}}})}function d(e){var t=new google.maps.LatLng(e.lat,e.lon);if(r(),t.lat()<O.lat()&&t.lat()>R.lat()&&t.lng()<R.lng()&&t.lng()>O.lng()){var o={position:t,map:I,animation:google.maps.Animation.DROP,title:"UserPin",icon:q},n=new google.maps.Marker(o);a(function(e){return function(){e.setMap(null)}}(n),2e3)}}function m(e){for(var t,o=0;t=G[o];o++)if(e==t.post._id){t.marker.setMap(null),G.splice(o,1);break}}function f(e){var t=new google.maps.LatLng(e.lat,e.lon);y(t),w(t),c()}function y(e){for(var t,o=0;t=J[o];o++)t.setMap(null);J=[];var t=new google.maps.Marker({position:e,map:I,icon:X});J.push(t)}function w(e){t.$emit("set:loc",e);var o=new google.maps.Geocoder;o.geocode({latLng:e},function(e,o){try{t.$emit("set:place",e[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),t.$emit("set:place","Location does not exists")}})}function v(e,o){var n=t.guidtgt==e,i=t.guid==o,a=t.guid==e,l="0"!=t.guidtgt;return a&&l?2:n&&i?4:n&&!i?1:!n&&i?2:0}function h(){var e=document.getElementById("map-search-toggle");I.controls[google.maps.ControlPosition.TOP_LEFT].push(e)}function b(){var e=document.getElementById("map-btn-curr");I.controls[google.maps.ControlPosition.TOP_RIGHT].push(e)}function T(){var e=document.getElementById("map-posting");I.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(e)}function S(){var e=document.getElementById("map-btn-submit");I.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(e)}function _(){var e=document.getElementById("map-time-slider");I.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(e)}function L(){var e=document.getElementById("pac-input");I.controls[google.maps.ControlPosition.TOP_LEFT].push(e);var t=new google.maps.places.SearchBox(e);google.maps.event.addListener(t,"places_changed",function(){var e=t.getPlaces();if(0!=e.length){var o=e[0],n={lat:o.geometry.location.lat(),lon:o.geometry.location.lng()};f(n),window.localStorage.latitude=o.geometry.location.latitude,window.localStorage.longitude=o.geometry.location.longitude,I.panTo(o.geometry.location),I.setZoom(16)}})}function k(){google.maps.event.addListener(D,"click",function(e){var t={lat:e.latLng.lat(),lon:e.latLng.lng()};f(t)})}function P(){google.maps.event.addListener(D,"center_changed",function(){s()})}function C(){google.maps.event.addListener(D,"bounds_changed",function(){r()})}function M(){google.maps.event.addListener(D,"dragend",function(){u(),c()})}function $(){google.maps.event.addListener(D,"resize",function(){u(),c()})}function x(){google.maps.event.addListener(D,"zoom_changed",function(){u(),c()})}function A(){W=isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)?0!=t.userLocation.lat&&0!=t.userLocation.lon?new google.maps.LatLng(t.userLocation.lat,t.userLocation.lon):new google.maps.LatLng(34.05,-118.24):new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude),N={center:W,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,U]},mapTypeId:U}}function B(){function e(e){}function t(e){google.maps.event.trigger(this,"drawXMarker",e)}function n(e){google.maps.event.trigger(this,"drawCurrLocationMarker",e)}function i(){google.maps.event.trigger(this,"updateAndDrawPosts")}function a(e){google.maps.event.trigger(this,"drawResponses",e)}function l(e){google.maps.event.trigger(this,"unDrawPost",e)}D=new google.maps.Map(o[0],N),e.prototype=D,e.prototype.drawXMarker=t,e.prototype.drawCurrLocationMarker=n,e.prototype.updateAndDrawPosts=i,e.prototype.drawResponses=a,e.prototype.unDrawPost=l,I=new e,google.maps.event.addListener(I,"drawXMarker",function(e){f(e)}),google.maps.event.addListener(I,"drawCurrLocationMarker",function(e){d(e)}),google.maps.event.addListener(I,"updateAndDrawPosts",function(){u()}),google.maps.event.addListener(I,"drawResponses",function(e){g(e)}),google.maps.event.addListener(I,"unDrawPost",function(e){m(e)})}function z(){var e,t=[{featureType:"administrative",elementType:"labels.text.fill",stylers:[{color:"#6195a0"}]},{featureType:"administrative.province",elementType:"geometry.stroke",stylers:[{visibility:"off"}]},{featureType:"landscape",elementType:"geometry",stylers:[{lightness:"0"},{saturation:"0"},{color:"#f5f5f2"},{gamma:"1"}]},{featureType:"landscape.man_made",elementType:"all",stylers:[{lightness:"-3"},{gamma:"1.00"}]},{featureType:"landscape.natural.terrain",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi.park",elementType:"geometry.fill",stylers:[{color:"#bae5ce"},{visibility:"on"}]},{featureType:"road",elementType:"all",stylers:[{saturation:-100},{lightness:45},{visibility:"simplified"}]},{featureType:"road.highway",elementType:"all",stylers:[{visibility:"simplified"}]},{featureType:"road.highway",elementType:"geometry.fill",stylers:[{color:"#fac9a9"},{visibility:"simplified"}]},{featureType:"road.highway",elementType:"labels.text",stylers:[{color:"#4e4e4e"}]},{featureType:"road.arterial",elementType:"labels.text.fill",stylers:[{color:"#787878"}]},{featureType:"road.arterial",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"transit",elementType:"all",stylers:[{visibility:"simplified"}]},{featureType:"transit.station.airport",elementType:"labels.icon",stylers:[{hue:"#0a00ff"},{saturation:"-77"},{gamma:"0.57"},{lightness:"0"}]},{featureType:"transit.station.rail",elementType:"labels.text.fill",stylers:[{color:"#43321e"}]},{featureType:"transit.station.rail",elementType:"labels.icon",stylers:[{hue:"#ff6c00"},{lightness:"4"},{gamma:"0.75"},{saturation:"-68"}]},{featureType:"water",elementType:"all",stylers:[{color:"#eaf6f8"},{visibility:"on"}]},{featureType:"water",elementType:"geometry.fill",stylers:[{color:"#c7eced"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{lightness:"-49"},{saturation:"-53"},{gamma:"0.79"}]}],o=[{featureType:"all",elementType:"labels.text.fill",stylers:[{color:"#ffffff"}]},{featureType:"all",elementType:"labels.text.stroke",stylers:[{visibility:"on"},{color:"#3e606f"},{weight:2},{gamma:.84}]},{featureType:"all",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"administrative",elementType:"geometry",stylers:[{weight:.6},{color:"#182a3d"},{visibility:"on"}]},{featureType:"landscape",elementType:"geometry",stylers:[{color:"#1a528b"},{visibility:"simplified"}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#406d80"},{visibility:"off"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{color:"#2c5a71"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#66a9ee"},{lightness:-37},{visibility:"on"}]},{featureType:"road",elementType:"geometry.fill",stylers:[{visibility:"on"}]},{featureType:"road",elementType:"geometry.stroke",stylers:[{visibility:"off"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{visibility:"on"}]},{featureType:"road.highway",elementType:"labels.text",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"geometry.stroke",stylers:[{lightness:"-11"}]},{featureType:"transit",elementType:"geometry",stylers:[{color:"#ff7e4e"},{visibility:"simplified"}]},{featureType:"transit.station.airport",elementType:"geometry",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"geometry",stylers:[{color:"#182a3d"}]}],n=new Date,i=n.getHours();e=4>i||i>19?o:t;var a={name:"Custom Style"},l=new google.maps.StyledMapType(e,a);I.mapTypes.set(U,l)}function E(){void 0===I&&(A(),B(),z()),t.$emit("set:map",I),h(),L(),b(),T(),S(),_(),k(),P(),M(),$(),x(),C(),a(function(){s(),r(),c(),u()},800)}var I,D,O,R,N,W,F,U="custom_style",J=[],G=[],H="0",V={url:"Default_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},X={url:"X_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},q={url:"Current_Location_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)};E(),t.initSession(),y(W),w(W)};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:l}}]),angular.module("app").directive("mapMsg",["$timeout","SessionSvc","PostsSvc",function(e,t,o){var n=function(n,i,a){function l(){var e=n.postguid,a=n.$parent.guid,l=n.$parent.guidtgt;i.children().on("click",function(){var i=e;if(e==a){if("0"==n.$parent.guidtgt)return;i="0"}e==l&&(i="0"),n.$emit("set:guidtgt",i),t.updateCoupling(a,i).then(function(e){});var s={guid:a,guidtgt:i};o.updateGuidtgt(s).then(function(e){})})}function s(){{var e=n.postlife+"ms",t=i.children().children(".postlifebar");t.css("-webkit-animation-duration",e)}if(n.postlifepercentage>.95){t.css("-webkit-animation-name","postlifeanim_a"),t.css("animation-name","postlifeanim_a")}else if(n.postlifepercentage<=.95&&n.postlifepercentage>.9){t.css("-webkit-animation-name","postlifeanim_b"),t.css("animation-name","postlifeanim_b")}else if(n.postlifepercentage<=.9&&n.postlifepercentage>.85){t.css("-webkit-animation-name","postlifeanim_c"),t.css("animation-name","postlifeanim_c")}else if(n.postlifepercentage<=.85&&n.postlifepercentage>.75){t.css("-webkit-animation-name","postlifeanim_d"),t.css("animation-name","postlifeanim_d")}else if(n.postlifepercentage<=.75&&n.postlifepercentage>.6){t.css("-webkit-animation-name","postlifeanim_e"),t.css("animation-name","postlifeanim_e")}else if(n.postlifepercentage<=.6&&n.postlifepercentage>.5){t.css("-webkit-animation-name","postlifeanim_f"),t.css("animation-name","postlifeanim_f")}else if(n.postlifepercentage<=.5&&n.postlifepercentage>.3){t.css("-webkit-animation-name","postlifeanim_g"),t.css("animation-name","postlifeanim_g")}else if(n.postlifepercentage<=.3&&n.postlifepercentage>.2){t.css("-webkit-animation-name","postlifeanim_h"),t.css("animation-name","postlifeanim_h")}else if(n.postlifepercentage<=.2&&n.postlifepercentage>.1){t.css("-webkit-animation-name","postlifeanim_i"),t.css("animation-name","postlifeanim_i")}else{t.css("-webkit-animation-name","postlifeanim_j"),t.css("animation-name","postlifeanim_j")}}function r(){var e=$(".gm-style-iw"),t=e.prev();t.children(":nth-child(2)").css({display:"none"}),t.children(":nth-child(4)").css({display:"none"}),t.children(":nth-child(3)").find("div").children().css({"box-shadow":"0 1px 6px rgba(178, 178, 178, 0.6)","z-index":"1",border:"0px"})}function c(){var e=$(".gm-style-iw"),t=e.next();t.css({opacity:"0.8",right:"20px",top:"20px"})}n.get_localstatus=function(e){return e?"local-text":"non-local-text"},n.get_coupling=function(e){return 4==e?"coupling coupling-couple":1==e?"coupling coupling-ilikeyou":2==e?"coupling coupling-youlikei":"coupling coupling-none"},angular.element(document).ready(function(){e(l,100),e(s,10),e(r,10),e(c,10)})};return{restrict:"A",templateUrl:"./templates/window.html",link:n}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","ConfigSvc","PostsSvc","UtilSvc","$window","$document","$timeout",function(e,t,o,n,i,a,l,s){t.$emit("set:pagechange",t.pageId.post),t.posts=[],t.$on("ws:new_post",function(e,o){t.requestFetch()}),t.addPost=function(){if(!t.content)return void console.log("User attempted to post with 0 words.");var e,a=t.postplace,l=t.postLocation,s=i.getDistanceFromLatLonInKm(l.lat,l.lon,t.userLocation.lat,t.userLocation.lon);console.log("post location from user location : ",s),3>s?(console.log("postLocationFromUserLocation < 3",3>s),e=!0):(console.log("postLocationFromUserLocation < 3",3>s),e=!1);var r,c=JSON.stringify(l);if(t.timevalue<=o.maxInstantLifeSpan){var g=t.content.length;r=5>g?4e3:g*i.mapRange(g,5,20,700,400)}else r=t.timevalue;n.create({body:t.content,location:c,place:a,guid:t.guid,guidtgt:t.guidtgt,lifespan:r,islocal:e}).success(function(e){t.content=null}).error(function(e,t){swal("Post failed","Please complete the from correctly","error")})},t.requestFetch=function(){n.fetch().success(function(e){t.posts=e})},t.updateGuidtgt=function(e,t){var o={guid:e,guidtgt:t};console.log("udpate to post guidtgt:",o),n.updateGuidtgt(o)}}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(t){return e.get("/api/posts",t)},this.create=function(t){return t.devicetoken="0",e.post("/api/posts",t)},this.remove=function(t){return e.post("/api/posts/posts_delete",t)},this.updateGuidtgt=function(t){return e.post("/api/posts/update_guidtgt",t)}}]),angular.module("app").service("SessionSvc",["$http",function(e){this.fetch=function(){return e.get("/api/sessions")},this.enter=function(t){return t.devicetoken="0",e.post("/api/sessions",t)},this.remove=function(t){var o={guid:t};return e.post("/api/sessions/delete",o)},this.updateWatchLocation=function(t,o,n,i){var a={nw_lat:t.lat,nw_lon:t.lon,se_lat:o.lat,se_lon:o.lon,center_lat:n.lat,center_lon:n.lon},l=JSON.stringify(a),s={watchloc:l,guid:i};return console.log("updating watch location"),e.post("/api/sessions/update_session",s)},this.updateCoupling=function(t,o){var n={guid:t,guidtgt:o};return console.log("updating coupling"),e.post("/api/sessions/update_coupling",n)}}]);
//# sourceMappingURL=data:application/json;base64,