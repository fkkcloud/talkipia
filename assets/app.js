angular.module("app",["ngRoute","ngAnimate","ui.slider","720kb.socialshare"]),angular.module("app").controller("ApplicationCtrl",["SessionSvc","UtilSvc","ConfigSvc","$rootScope","$scope","$window","$http","$timeout",function(e,t,n,o,i,a,s,l){function r(e){var t=e.coords,n=new google.maps.LatLng(t.latitude,t.longitude);i.map.drawUserLocationMarker(n)}window.onbeforeunload=function(t){e.remove(i.guid).success(function(e){})["catch"](function(e){})},window.onpageshow=function(e){i.initSession(),i.map&&l(function(){i.map.updateAndDrawPosts()})},window.onpagehide=function(t){e.remove(i.guid).success(function(e){})["catch"](function(e){})},document.addEventListener("visibilitychange",function(){"visible"==document.visibilityState||"mozVisible"==document.visibilityState||"msVisible"==document.visibilityState||"webkitVisible"==document.visibilityState?(i.initSession(),i.map&&i.map.updateAndDrawPosts()):("hidden"==document.visibilityState||"mozHidden"==document.visibilityState||"msHidden"==document.visibilityState||"webkitHidden"==document.visibilityState)&&e.remove(i.guid).success(function(e){})["catch"](function(e){})}),document.addEventListener("webkitvisibilitychange",function(){document.webkitVisible?(i.initSession(),i.map&&i.map.updateAndDrawPosts()):document.webkitHidden&&e.remove(i.guid).success(function(e){})["catch"](function(e){})},!1),i.setWatchLocation=function(){navigator.geolocation.watchPosition(r)},i.initSession=function(){function t(t){var n=t.coords,o=new google.maps.LatLng(n.latitude,n.longitude);i.userLocation={lat:n.latitude,lon:n.longitude};var a={lat:o.lat(),lon:o.lng()},s=JSON.stringify(a),l=i.map.getBounds(),r=l.getNorthEast(),c=l.getSouthWest(),g={lat:r.lat(),lon:c.lng()},u={lat:c.lat(),lon:r.lng()},p={lat:window.localStorage.latitude,lon:window.localStorage.longitude},m={nw_lat:g.lat,nw_lon:g.lon,se_lat:u.lat,se_lon:u.lon,center_lat:p.lat,center_lon:p.lon},d=JSON.stringify(m),f={guidtgt:i.guidtgt,guid:i.guid,location:s,watchloc:d};e.enter(f).success(function(e){})["catch"](function(e){})}function n(e){swal("","Need to turn on location service for proper use.")}if("undefined"!=i.map&&"null"!=i.map&&i.map){var o={enableHighAccuracy:!1,timeout:1e4,maximumAge:3e4};navigator.geolocation.getCurrentPosition(t,n,o),swal({title:"",text:"Retreiving currnet location..",timer:1200,showConfirmButton:!1})}},"undefined"!=window.localStorage.guid&&"null"!=window.localStorage.guid&&window.localStorage.guid||(window.localStorage.guid=t.getGuid()),i.guid=window.localStorage.guid,"undefined"!=window.localStorage.guidtgt&&"null"!=window.localStorage.guidtgt&&window.localStorage.guidtgt||(window.localStorage.guidtgt="0"),i.guidtgt=window.localStorage.guidtgt,i.pageId={post:0},i.navCollapsed=!0,i.timevalue=n.maxInstantLifeSpan,i.userLocation={lat:0,lon:0},i.toggleSearchLocation=!1,i.toggleTimeSlider=!1,l(function(){document.getElementById("map-posting").onkeypress=function(e){"13"==e.which&&$("form#map-posting-form").submit()},document.getElementById("map-posting").onfocus=function(e){i.toggleTimeSlider=!0},document.getElementById("map-posting").onblur=function(e){i.toggleTimeSlider=!1},$(".nav-burger").click(function(){$(".nav-burger").toggleClass("active"),i.toggleSearchLocation=!i.toggleSearchLocation,i.$apply()})});var c,g=document.location.hostname;c=g==n.local?n.web_socket+n.local+":"+n.port:g==n.local_ip?n.web_socket+n.local_ip+":"+n.port:n.web_socket+n.deploy_dns;var u=function(){connection=new WebSocket(c),connection.onopen=function(){connection.send(i.guid)},connection.onclose=function(){l(u,2e3)},connection.onmessage=function(e){var t=JSON.parse(e.data);o.$broadcast("ws:"+t.type,t.data)}};u(),i.$on("ws:new_post",function(e,t){i.map.updateAndDrawPosts(),t.guid==i.guid&&i.map.drawResponses(t)}),i.$on("ws:new_session",function(e,t){if(t.guid!=i.guid){var n=angular.fromJson(t.location);i.map.drawCurrLocationMarker(n)}i.map.updateAndDrawOtherUsers()}),i.$on("ws:update_users_location",function(e,t){console.log("updated user location"),i.map.updateAndDrawOtherUsers()}),i.$on("ws:remove_post",function(e,t){i.map.unDrawPost(t)}),i.$on("ws:update_guidtgt",function(e,t){i.map.updateAndDrawPosts()}),i.isInstant=function(e){return e<=n.maxInstantLifeSpan?!0:!1},i.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},i.moveToCurrentLocation=function(){function e(e){if(i.currentPageId==i.pageId.post){var t=e.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var n={lat:t.latitude,lon:t.longitude};i.map.drawXMarker(n);var o=new google.maps.LatLng(n.lat,n.lon);i.map.panTo(o),i.map.updateAndDrawPosts()}}function t(e){swal("","Need to turn on location service for proper use.")}var n={enableHighAccuracy:!0,timeout:1e4,maximumAge:3e4};navigator.geolocation.getCurrentPosition(e,t,n),swal({title:"",text:"Moving to current location..",timer:1e3,showConfirmButton:!1})},i.moveToPostLocation=function(){var e=0;if(i.isMobile()){var t=i.map.getBounds(),n=t.getNorthEast(),o=t.getSouthWest();current_map_nw=new google.maps.LatLng(n.lat(),o.lng()),current_map_se=new google.maps.LatLng(o.lat(),n.lng());var a=.5*Math.abs(i.postLocation.lat-current_map_nw.lat()),s=.5*Math.abs(i.postLocation.lat-current_map_se.lat());e=a>s?s:a}var l=i.map.getCenter(),r=new google.maps.LatLng(i.postLocation.lat+e,l.lng());i.map.panTo(r),i.map.updateAndDrawPosts()},i.collapse=function(){i.navCollapsed=!0},i.$on("set:map",function(e,t){i.map=t,l(function(){i.initSession(),i.setWatchLocation(),i.map.updateAndDrawOtherUsers()})}),i.$on("set:guidtgt",function(e,t){i.guidtgt=t,window.localStorage.guidtgt=t}),i.$on("set:pagechange",function(e,t){i.currentPageId=t}),i.$on("set:loc",function(e,t){var n=t.lat(),o=t.lng();i.postLocation={lat:n,lon:o}}),i.$on("set:place",function(e,t){i.$apply(function(){i.postplace=t})})}]),angular.module("app").constant("ConfigSvc",{web_socket:"ws://",web_socket_secure:"wss://",local:"localhost",local_ip:"192.168.0.4",deploy_dns:"talkipia.com",port:"5000",maxInstantLifeSpan:5e3}),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var e=this;e.deg2rad=function(e){return e*(Math.PI/180)},e.getDistanceFromLatLonInKm=function(t,n,o,i){var a=6371,s=e.deg2rad(o-t),l=e.deg2rad(i-n),r=Math.sin(s/2)*Math.sin(s/2)+Math.cos(e.deg2rad(t))*Math.cos(e.deg2rad(o))*Math.sin(l/2)*Math.sin(l/2),c=2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),g=a*c;return g},e.mapRange=function(e,t,n,o,i){return o+(i-o)*(e-t)/(n-t)},e.getGuid=function(){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}}),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","ConfigSvc","SessionSvc","$compile","$timeout",function(e,t,n,o,i,a){var s=function(t,n,s){function l(){window.localStorage.latitude=U.getCenter().lat(),window.localStorage.longitude=U.getCenter().lng()}function r(){var e=U.getBounds(),t=e.getNorthEast(),n=e.getSouthWest();J=new google.maps.LatLng(t.lat(),n.lng()),W=new google.maps.LatLng(n.lat(),t.lng())}function c(){var e=U.getBounds(),n=e.getNorthEast(),i=e.getSouthWest();J={lat:n.lat(),lon:i.lng()},W={lat:i.lat(),lon:n.lng()};var a;a={lat:U.getCenter().lat(),lon:U.getCenter().lng()},o.updateWatchLocation(J,W,a,t.guid)}function g(e){for(var t,n=0;t=X[n];n++)t.setMap(null);X=[];var t=new google.maps.Marker({position:e,map:U,icon:te});X.push(t)}function u(){for(var e,t=0;e=Y[t];t++)e.setMap(null),Y.splice(t,1)}function p(){o.fetch().success(function(e){u();for(var n=0;n<e.length;n++){var o=e[n];if(o.guid!=t.guid){var i=angular.fromJson(o.watchloc);if(r(),i.center_lat<J.lat&&i.center_lat>W.lat&&i.center_lon<W.lon&&i.center_lon>J.lon){var a=new google.maps.LatLng(i.center_lat,i.center_lon),s={url:"User_Position.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(0,0),scaledSize:new google.maps.Size(20,20)};!function(e){var t={position:a,map:U,title:"User_Positions",icon:e},n=new google.maps.Marker(t);Y.push(n)}(s)}}}})["catch"](function(e){})}function m(e){function n(n){for(var o=0;o<n.length;o++){var i=n[o];if(i.guid!=t.guid){var s=angular.fromJson(i.watchloc),l=angular.fromJson(e.location);if(r(),s.center_lat<J.lat()&&s.center_lat>W.lat()&&s.center_lon<W.lng()&&s.center_lon>J.lng()&&l.lat<s.nw_lat&&l.lat>s.se_lat&&l.lon<s.se_lon&&l.lon>s.nw_lon){var c=new google.maps.LatLng(s.center_lat,s.center_lon),g=40*Math.random()+40,u="Blink.gif",p={url:u,size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(.5*g+5,.5*g+14),scaledSize:new google.maps.Size(g,g)};!function(e){var t={position:c,map:U,title:"Receiver",icon:e,optimized:!1},n=new google.maps.Marker(t),o=1200;a(function(e){return function(){e.setMap(null),e=null}}(n),o)}(p)}}}}o.fetch().success(n)["catch"](function(e){})}function d(){for(var e,t=0;e=q[t];t++){var n=new Date,o=n.getTime(),i=e.post.lifeend-o;0>=i&&v(e.post._id)}}function f(){function n(n){for(var o=0;o<n.length;o++){var a=n[o],s=angular.fromJson(a.location),l=new google.maps.LatLng(s.lat,s.lon);if(r(),l.lat()<J.lat()&&l.lat()>W.lat()&&l.lng()<W.lng()&&l.lng()>J.lng()){for(var c,g=0;c=q[g];g++){var u=a._id==c.post._id;if(u){if(H){v(a._id);break}if(c.post.guidtgt==a.guidtgt){a=null;break}v(a._id);break}}if(null!=a){var p={position:l,map:U,title:"Bubble",icon:Z},c=new google.maps.Marker(p);q.push({marker:c,post:a});var m=S(a.guid,a.guidtgt),d=a.islocal,f=t,w=f.$new(!0),h=function(n,o,a,s,l){return function(){var r={pixelOffset:new google.maps.Size(-39.5,16),disableAutoPan:!0},c=new google.maps.InfoWindow(r),g=new Date,u=g.getTime(),p=a.lifeend-u>=0?a.lifeend-u:0,m=(p/a.lifespan).toFixed(2);o.msg=a.body,o.postlife=p,o.postguid=a.guid,o.postguidtgt=a.guidtgt,o.postcouplestatus=s,o.postlifepercentage=m,o.postlocalstatus=l;var d="<div map-msg></div>",f=i(d)(o);c.setContent(f[0]),google.maps.event.addListener(c,"closeclick",function(){a.guid==t.guid&&swal({title:"Are you sure?",text:"You will not be able to recover this imaginary file!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",closeOnConfirm:!1},function(t){if(t)e.remove(a).success(function(e){})["catch"](function(e){}),swal("Deleted!","Your imaginary file has been deleted.","success");else{var i=new Date,s=i.getTime(),l=a.lifeend-s>=0?a.lifeend-s:0,r=(l/a.lifespan).toFixed(2);r>0&&(o.postlifepercentage=r,c.open(U,n))}})}),c.open(U,n)}}(c,w,a,m,d);h()}}}}d(),H=K!=t.guidtgt,K=t.guidtgt,e.fetch().success(n)["catch"](function(e){})}function w(e){var t=new google.maps.LatLng(e.lat,e.lon);if(r(),t.lat()<J.lat()&&t.lat()>W.lat()&&t.lng()<W.lng()&&t.lng()>J.lng()){var n={position:t,map:U,animation:google.maps.Animation.DROP,title:"UserPin",icon:ee},o=new google.maps.Marker(n);a(function(e){return function(){e.setMap(null)}}(o),2e3)}}function v(e){for(var t,n=0;t=q[n];n++)if(e==t.post._id){t.marker.setMap(null),q.splice(n,1);break}}function h(e){var t=new google.maps.LatLng(e.lat,e.lon);y(t),_(t),c()}function y(e){for(var t,n=0;t=V[n];n++)t.setMap(null);V=[];var t=new google.maps.Marker({position:e,map:U,icon:Q});V.push(t)}function _(e){t.$emit("set:loc",e);var n=new google.maps.Geocoder;n.geocode({latLng:e},function(e,n){try{t.$emit("set:place",e[1].formatted_address)}catch(o){swal("","Location does not exists"),t.$emit("set:place","Location does not exists")}})}function S(e,n){var o=t.guidtgt==e,i=t.guid==n,a=t.guid==e,s="0"!=t.guidtgt;return a&&s?2:o&&i?4:o&&!i?1:!o&&i?2:0}function b(){var e=document.getElementById("map-search-toggle");U.controls[google.maps.ControlPosition.TOP_LEFT].push(e)}function L(){var e=document.getElementById("map-btn-curr");U.controls[google.maps.ControlPosition.TOP_RIGHT].push(e)}function T(){var e=document.getElementById("map-posting");U.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(e)}function k(){}function P(){var e=document.getElementById("map-btn-submit");U.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(e)}function M(){var e=document.getElementById("map-time-slider");U.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(e)}function C(){var e=document.getElementById("pac-input");U.controls[google.maps.ControlPosition.TOP_LEFT].push(e);var t=new google.maps.places.SearchBox(e);google.maps.event.addListener(t,"places_changed",function(){var e=t.getPlaces();if(0!=e.length){var n=e[0],o={lat:n.geometry.location.lat(),lon:n.geometry.location.lng()};h(o),window.localStorage.latitude=n.geometry.location.latitude,window.localStorage.longitude=n.geometry.location.longitude,U.panTo(n.geometry.location),U.setZoom(16)}})}function $(){google.maps.event.addListener(R,"click",function(e){var t={lat:e.latLng.lat(),lon:e.latLng.lng()};h(t)})}function z(){google.maps.event.addListener(R,"center_changed",function(){l()})}function A(){google.maps.event.addListener(R,"bounds_changed",function(){r()})}function D(){google.maps.event.addListener(R,"dragend",function(){f(),c()})}function x(){google.maps.event.addListener(R,"resize",function(){f(),c()})}function B(){google.maps.event.addListener(R,"zoom_changed",function(){f(),c()})}function I(){G=isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)?0!=t.userLocation.lat&&0!=t.userLocation.lon?new google.maps.LatLng(t.userLocation.lat,t.userLocation.lon):new google.maps.LatLng(34.05,-118.24):new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude),F={center:G,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,j]},mapTypeId:j}}function O(){function e(e){}function t(e){google.maps.event.trigger(this,"drawXMarker",e)}function o(e){google.maps.event.trigger(this,"drawUserLocationMarker",e)}function i(e){google.maps.event.trigger(this,"drawCurrLocationMarker",e)}function a(){google.maps.event.trigger(this,"updateAndDrawPosts")}function s(){google.maps.event.trigger(this,"updateAndDrawOtherUsers")}function l(e){google.maps.event.trigger(this,"drawResponses",e)}function r(e){google.maps.event.trigger(this,"unDrawPost",e)}R=new google.maps.Map(n[0],F),e.prototype=R,e.prototype.drawXMarker=t,e.prototype.drawUserLocationMarker=o,e.prototype.drawCurrLocationMarker=i,e.prototype.updateAndDrawPosts=a,e.prototype.updateAndDrawOtherUsers=s,e.prototype.drawResponses=l,e.prototype.unDrawPost=r,U=new e,google.maps.event.addListener(U,"drawXMarker",function(e){h(e)}),google.maps.event.addListener(U,"drawUserLocationMarker",function(e){g(e)}),google.maps.event.addListener(U,"drawCurrLocationMarker",function(e){w(e)}),google.maps.event.addListener(U,"updateAndDrawPosts",function(){f()}),google.maps.event.addListener(U,"drawResponses",function(e){m(e)}),google.maps.event.addListener(U,"updateAndDrawOtherUsers",function(){p()}),google.maps.event.addListener(U,"unDrawPost",function(e){v(e)})}function E(){{var e,t=new Date;t.getHours()}e=[{featureType:"administrative",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"administrative",elementType:"labels.text.fill",stylers:[{color:"#439aa5"}]},{featureType:"administrative.locality",elementType:"all",stylers:[{color:"#32485c"},{visibility:"simplified"}]},{featureType:"administrative.neighborhood",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"landscape.natural",elementType:"all",stylers:[{color:"#e9dddb"}]},{featureType:"landscape.natural.terrain",elementType:"geometry",stylers:[{visibility:"off"}]},{featureType:"poi",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi.park",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"poi.park",elementType:"geometry.fill",stylers:[{color:"#c4e661"}]},{featureType:"poi.park",elementType:"labels",stylers:[{visibility:"off"}]},{featureType:"road.highway",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.highway",elementType:"geometry.stroke",stylers:[{color:"#32485c"},{weight:"0.7"}]},{featureType:"road.arterial",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"road.arterial",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.arterial",elementType:"geometry.stroke",stylers:[{color:"#32485c"},{weight:"0.25"}]},{featureType:"road.arterial",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"road.local",elementType:"geometry.fill",stylers:[{color:"#e9dddb"}]},{featureType:"road.local",elementType:"geometry.stroke",stylers:[{color:"#ef798e"},{weight:"0.5"},{visibility:"off"}]},{featureType:"transit",elementType:"all",stylers:[{visibility:"on"}]},{featureType:"transit.line",elementType:"geometry",stylers:[{color:"#ef798e"}]},{featureType:"transit.line",elementType:"geometry.fill",stylers:[{weight:"2.06"}]},{featureType:"transit.line",elementType:"geometry.stroke",stylers:[{weight:"10.00"}]},{featureType:"transit.line",elementType:"labels.text.stroke",stylers:[{weight:"0.01"}]},{featureType:"water",elementType:"geometry.fill",stylers:[{visibility:"on"},{weight:"10.00"},{color:"#439aa5"}]},{featureType:"water",elementType:"labels",stylers:[{visibility:"on"},{color:"#32485c"},{weight:"0.85"}]}];var n={name:"Custom Style"},o=new google.maps.StyledMapType(e,n);U.mapTypes.set(j,o)}function N(){void 0===U&&(I(),O(),E()),b(),C(),L(),T(),P(),M(),k(),$(),z(),D(),x(),B(),A(),t.$emit("set:map",U)}var U,R,J,W,F,G,H,j="custom_style",V=[],X=[],q=[],Y=[],K="0",Z={url:"Default_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},Q={url:"X_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},ee={url:"Current_Location_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)},te={url:"curr_marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)};N(),y(G),_(G)};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:s}}]),angular.module("app").directive("mapMsg",["$timeout","SessionSvc","PostsSvc",function(e,t,n){var o=function(o,i,a){function s(){var e=o.postguid,a=o.$parent.guid,s=o.$parent.guidtgt;i.children().on("click",function(){var i=e;if(e==a){if("0"==o.$parent.guidtgt)return;i="0"}e==s&&(i="0"),o.$emit("set:guidtgt",i),t.updateCoupling(a,i).then(function(e){});var l={guid:a,guidtgt:i};n.updateGuidtgt(l).then(function(e){})})}function l(){var e=o.postlife+"ms",t=i.children().children(".postlifebar");t.css("-o-animation-duration",e),t.css("-moz-animation-duration",e),t.css("-ms-animation-duration",e),t.css("-webkit-animation-duration",e),t.css("animation-duration",e),o.postlifepercentage>.95?(t.css("-o-animation-name","postlifeanim_a"),t.css("-moz-animation-name","postlifeanim_a"),t.css("-ms-animation-name","postlifeanim_a"),t.css("-webkit-animation-name","postlifeanim_a"),t.css("animation-name","postlifeanim_a")):o.postlifepercentage<=.95&&o.postlifepercentage>.9?(t.css("-o-animation-name","postlifeanim_b"),t.css("-moz-animation-name","postlifeanim_b"),t.css("-ms-animation-name","postlifeanim_b"),t.css("-webkit-animation-name","postlifeanim_b"),t.css("animation-name","postlifeanim_b")):o.postlifepercentage<=.9&&o.postlifepercentage>.85?(t.css("-o-animation-name","postlifeanim_c"),t.css("-moz-animation-name","postlifeanim_c"),t.css("-ms-animation-name","postlifeanim_c"),postlifebar_css=t.css("-webkit-animation-name","postlifeanim_c"),postlifebar_css=t.css("animation-name","postlifeanim_c")):o.postlifepercentage<=.85&&o.postlifepercentage>.75?(t.css("-o-animation-name","postlifeanim_d"),t.css("-moz-animation-name","postlifeanim_d"),t.css("-ms-animation-name","postlifeanim_d"),t.css("-webkit-animation-name","postlifeanim_d"),t.css("animation-name","postlifeanim_d")):o.postlifepercentage<=.75&&o.postlifepercentage>.6?(t.css("-o-animation-name","postlifeanim_e"),t.css("-moz-animation-name","postlifeanim_e"),t.css("-ms-animation-name","postlifeanim_e"),t.css("-webkit-animation-name","postlifeanim_e"),t.css("animation-name","postlifeanim_e")):o.postlifepercentage<=.6&&o.postlifepercentage>.5?(t.css("-o-animation-name","postlifeanim_f"),t.css("-moz-animation-name","postlifeanim_f"),t.css("-ms-animation-name","postlifeanim_f"),t.css("-webkit-animation-name","postlifeanim_f"),t.css("animation-name","postlifeanim_f")):o.postlifepercentage<=.5&&o.postlifepercentage>.3?(t.css("-o-animation-name","postlifeanim_g"),t.css("-moz-animation-name","postlifeanim_g"),t.css("-ms-animation-name","postlifeanim_g"),t.css("-webkit-animation-name","postlifeanim_g"),t.css("animation-name","postlifeanim_g")):o.postlifepercentage<=.3&&o.postlifepercentage>.2?(t.css("-o-animation-name","postlifeanim_h"),t.css("-moz-animation-name","postlifeanim_h"),t.css("-ms-animation-name","postlifeanim_h"),t.css("-webkit-animation-name","postlifeanim_h"),t.css("animation-name","postlifeanim_h")):o.postlifepercentage<=.2&&o.postlifepercentage>.1?(t.css("-o-animation-name","postlifeanim_i"),t.css("-moz-animation-name","postlifeanim_i"),t.css("-ms-animation-name","postlifeanim_i"),t.css("-webkit-animation-name","postlifeanim_i"),t.css("animation-name","postlifeanim_i")):(t.css("-o-animation-name","postlifeanim_j"),t.css("-moz-animation-name","postlifeanim_j"),t.css("-ms-animation-name","postlifeanim_j"),t.css("-webkit-animation-name","postlifeanim_j"),t.css("animation-name","postlifeanim_j"))}function r(){var e=$(".gm-style-iw"),t=e.prev();t.children(":nth-child(2)").css({display:"none"}),t.children(":nth-child(4)").css({display:"none"}),t.children(":nth-child(3)").find("div").children().css({"box-shadow":"0 1px 6px rgba(178, 178, 178, 0.6)","z-index":"1",border:"0px"})}function c(){var e=$(".gm-style-iw"),t=e.next();t.css({opacity:"0.8",right:"20px",top:"20px"})}o.get_localstatus=function(e){return e?"local-text":"non-local-text"},o.get_coupling=function(e){return 4==e?"coupling coupling-couple":1==e?"coupling coupling-ilikeyou":2==e?"coupling coupling-youlikei":"coupling coupling-none"},angular.element(document).ready(function(){e(s,100),e(l,10),e(r,10),e(c,10)})};return{restrict:"A",templateUrl:"./templates/window.html",link:o}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","ConfigSvc","PostsSvc","UtilSvc","$window","$document","$timeout",function(e,t,n,o,i,a,s,l){t.$emit("set:pagechange",t.pageId.post),t.posts=[],t.$on("ws:new_post",function(e,n){t.requestFetch()}),t.addPost=function(){if(t.content){var e,a=t.postplace,s=t.postLocation,l=i.getDistanceFromLatLonInKm(s.lat,s.lon,t.userLocation.lat,t.userLocation.lon);e=3>l?!0:!1;var r,c=JSON.stringify(s);if(t.timevalue<=n.maxInstantLifeSpan){var g=t.content.length;r=5>g?4e3:g*i.mapRange(g,5,20,700,400)}else r=t.timevalue;o.create({body:t.content,location:c,place:a,guid:t.guid,guidtgt:t.guidtgt,lifespan:r,islocal:e}).success(function(e){t.content=null}).error(function(e,t){swal("Post failed","Please complete the from correctly","error")})["catch"](function(e){})}},t.requestFetch=function(){o.fetch().success(function(e){t.posts=e})["catch"](function(e){})},t.updateGuidtgt=function(e,t){var n={guid:e,guidtgt:t};o.updateGuidtgt(n).success(function(e){})["catch"](function(e){})}}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(t){return e.get("/api/posts",t)},this.create=function(t){return t.devicetoken="0",e.post("/api/posts",t)},this.remove=function(t){return e.post("/api/posts/posts_delete",t)},this.updateGuidtgt=function(t){return e.post("/api/posts/update_guidtgt",t)}}]),angular.module("app").service("SessionSvc",["$http",function(e){this.fetch=function(){return e.get("/api/sessions")},this.enter=function(t){return t.devicetoken="0",e.post("/api/sessions",t)},this.remove=function(t){var n={guid:t};return e.post("/api/sessions/delete",n)},this.updateWatchLocation=function(t,n,o,i){var a={nw_lat:t.lat,nw_lon:t.lon,se_lat:n.lat,se_lon:n.lon,center_lat:o.lat,center_lon:o.lon},s=JSON.stringify(a),l={watchloc:s,guid:i};return e.post("/api/sessions/update_watch_loc",l)},this.updateCurrentLocation=function(t,n,o){var i={lat:t,lon:n},a=JSON.stringify(i),s={currloc:a,guid:o};return console.log("updating curr location"),console.log("updatedsession:",s),e.post("/api/sessions/update_curr_loc",s)},this.updateCoupling=function(t,n){var o={guid:t,guidtgt:n};return e.post("/api/sessions/update_coupling",o)}}]),angular.module("app").run(["$rootScope","$timeout","SessionSvc",function(e,t,n){}]);
//# sourceMappingURL=data:application/json;base64,