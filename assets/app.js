angular.module("app",["ngRoute","ngAnimate","ui.slider"]),angular.module("app").controller("ApplicationCtrl",["SessionSvc","UtilSvc","ConfigSvc","$rootScope","$scope","$window","$http","$timeout",function(t,e,o,n,a,i,l,s){window.onbeforeunload=function(e){return t.remove(a.guid),"You are the exiting exciting session."},a.initSession=function(){function e(e){var o=e.coords,n=new google.maps.LatLng(o.latitude,o.longitude);a.userLocation={lat:o.latitude,lon:o.longitude};var i={lat:n.lat(),lon:n.lng()},l=JSON.stringify(i),s=a.map.getBounds(),r=s.getNorthEast(),g=s.getSouthWest(),c={lat:r.lat(),lon:g.lng()},u={lat:g.lat(),lon:r.lng()},p={lat:window.localStorage.latitude,lon:window.localStorage.longitude},d={nw_lat:c.lat,nw_lon:c.lon,se_lat:u.lat,se_lon:u.lon,center_lat:p.lat,center_lon:p.lon},m=JSON.stringify(d),f={guidtgt:a.guidtgt,guid:a.guid,location:l,watchloc:m};t.enter(f)}function o(t){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+t.code+"): "+t.message)}var n={enableHighAccuracy:!1,timeout:5e3,maximumAge:0};navigator.geolocation.getCurrentPosition(e,o,n),swal({title:"",text:"Retreiving currnet location..",timer:3500,showConfirmButton:!1})},"undefined"!=window.localStorage.guid&&"null"!=window.localStorage.guid&&window.localStorage.guid||(window.localStorage.guid=e.getGuid()),a.guid=window.localStorage.guid,"undefined"!=window.localStorage.guidtgt&&"null"!=window.localStorage.guidtgt&&window.localStorage.guidtgt||(window.localStorage.guidtgt="0"),a.guidtgt=window.localStorage.guidtgt,a.pageId={post:0},a.navCollapsed=!0,a.timevalue=o.maxInstantLifeSpan,a.userLocation={lat:0,lon:0},a.toggleSearchLocation=!1,a.toggleTimeSlider=!1,s(function(){document.getElementById("map-posting").onkeypress=function(t){"13"==t.which&&$("form#map-posting-form").submit()},document.getElementById("map-posting").onfocus=function(t){console.log("on focus"),a.toggleTimeSlider=!0},document.getElementById("map-posting").onblur=function(t){console.log("on blur"),a.toggleTimeSlider=!1},$(".nav-burger").click(function(){$(".nav-burger").toggleClass("active"),a.toggleSearchLocation=!a.toggleSearchLocation,a.$apply()})});var r,g=document.location.hostname;r=g==o.local?o.web_socket+o.local+":"+o.port:g==o.local_ip?o.web_socket+o.local_ip+":"+o.port:o.web_socket+o.deploy_dns;var c=function(){connection=new WebSocket(r),connection.onopen=function(){connection.send(a.guid),console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),s(c,2e3)},connection.onmessage=function(t){var e=JSON.parse(t.data);console.log("ws:"+e.type),n.$broadcast("ws:"+e.type,e.data)}};c(),a.$on("ws:new_post",function(t,e){a.map.updateAndDrawPosts(),e.guid==a.guid&&a.map.drawResponses(e)}),a.$on("ws:new_session",function(t,e){var o=angular.fromJson(e.location);a.map.drawCurrLocationMarker(o)}),a.$on("ws:remove_post",function(t,e){a.map.unDrawPost(e)}),a.$on("ws:update_guidtgt",function(t,e){a.map.updateAndDrawPosts()}),a.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},a.moveToCurrentLocation=function(){function t(t){if(a.currentPageId==a.pageId.post){var e=t.coords;window.localStorage.latitude=e.latitude,window.localStorage.longitude=e.longitude;var o={lat:e.latitude,lon:e.longitude};a.map.drawCurrLocationMarker(o),a.map.drawXMarker(o);var n=new google.maps.LatLng(o.lat,o.lon);a.map.panTo(n),a.map.setZoom(15)}}function e(t){swal("","Need to turn on location service for proper use."),console.warn("ERROR("+t.code+"): "+t.message)}var o={enableHighAccuracy:!0,timeout:8e3,maximumAge:0};navigator.geolocation.getCurrentPosition(t,e,o),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},a.moveToPostLocation=function(){var t=0;if(a.isMobile()){var e=a.map.getBounds(),o=e.getNorthEast(),n=e.getSouthWest();current_map_nw=new google.maps.LatLng(o.lat(),n.lng()),current_map_se=new google.maps.LatLng(n.lat(),o.lng());var i=.5*Math.abs(a.postLocation.lat-current_map_nw.lat()),l=.5*Math.abs(a.postLocation.lat-current_map_se.lat());t=i>l?l:i}var s=a.map.getCenter(),r=new google.maps.LatLng(a.postLocation.lat+t,s.lng());a.map.panTo(r)},a.collapse=function(){a.navCollapsed=!0},a.$on("set:map",function(t,e){a.map=e}),a.$on("set:guidtgt",function(t,e){a.guidtgt=e,window.localStorage.guidtgt=e}),a.$on("set:pagechange",function(t,e){a.currentPageId=e}),a.$on("set:loc",function(t,e){var o=e.lat(),n=e.lng();a.postLocation={lat:o,lon:n}}),a.$on("set:place",function(t,e){a.$apply(function(){a.postplace=e})})}]),angular.module("app").constant("ConfigSvc",{web_socket:"ws://",web_socket_secure:"wss://",local:"localhost",local_ip:"192.168.0.4",deploy_dns:"talkipia.com",port:"5000",maxInstantLifeSpan:5e3}),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var t=this;t.deg2rad=function(t){return t*(Math.PI/180)},t.getDistanceFromLatLonInKm=function(e,o,n,a){var i=6371,l=t.deg2rad(n-e),s=t.deg2rad(a-o),r=Math.sin(l/2)*Math.sin(l/2)+Math.cos(t.deg2rad(e))*Math.cos(t.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),g=2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),c=i*g;return c},t.mapRange=function(t,e,o,n,a){return n+(a-n)*(t-e)/(o-e)},t.getGuid=function(){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return t()+t()+"-"+t()+"-"+t()+"-"+t()+"-"+t()+t()+t()}}),angular.module("app").run(["$rootScope","$timeout","SessionSvc",function(t,e,o){}]),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","ConfigSvc","SessionSvc","$compile","$timeout",function(t,e,o,n,a,i){var l=function(e,o,l){function s(){window.localStorage.latitude=z.getCenter().lat(),window.localStorage.longitude=z.getCenter().lng()}function r(){var t=z.getBounds(),e=t.getNorthEast(),o=t.getSouthWest();O=new google.maps.LatLng(e.lat(),o.lng()),R=new google.maps.LatLng(o.lat(),e.lng())}function g(){var t=z.getBounds(),o=t.getNorthEast(),a=t.getSouthWest();O={lat:o.lat(),lon:a.lng()},R={lat:a.lat(),lon:o.lng()};var i;i=e.postLocation.lat<O.lat&&e.postLocation.lat>R.lat&&e.postLocation.lon<R.lon&&e.postLocation.lon>O.lon?{lat:e.postLocation.lat,lon:e.postLocation.lon}:{lat:z.getCenter().lat(),lon:z.getCenter().lng()},n.updateWatchLocation(O,R,i,e.guid)}function c(t){n.fetch().success(function(o){for(var n=0;n<o.length;n++){var a=o[n];if(a.guid!=e.guid){var l=angular.fromJson(a.watchloc),s=angular.fromJson(t.location);if(r(),l.center_lat<O.lat()&&l.center_lat>R.lat()&&l.center_lon<R.lng()&&l.center_lon>O.lng()&&s.lat<l.nw_lat&&s.lat>l.se_lat&&s.lon<l.se_lon&&s.lon>l.nw_lon){var g=new google.maps.LatLng(l.center_lat,l.center_lon),c=40*Math.random()+40,u="Blink.gif",p={url:u,size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(.5*c+5,.5*c+14),scaledSize:new google.maps.Size(c,c)};!function(t){var e={position:g,map:z,title:"Receiver",icon:t,optimized:!1},o=new google.maps.Marker(e),n=1200;i(function(t){return function(){t.setMap(null),t=null}}(o),n)}(p)}}}})}function u(){W=G!=e.guidtgt,G=e.guidtgt,t.fetch().success(function(o){for(var n=0;n<o.length;n++){var i=o[n],l=angular.fromJson(i.location),s=new google.maps.LatLng(l.lat,l.lon);if(r(),s.lat()<O.lat()&&s.lat()>R.lat()&&s.lng()<R.lng()&&s.lng()>O.lng()){for(var g,c=0;g=J[c];c++){var u=i._id==g.post._id;if(u){if(W){d(i._id);break}if(g.post.guidtgt==i.guidtgt){i=null;break}d(i._id);break}}if(null!=i){var p={position:s,map:z,title:"Bubble",icon:X},g=new google.maps.Marker(p);J.push({marker:g,post:i});var m=v(i.guid,i.guidtgt),f=i.islocal,w=e,h=w.$new(!0),y=function(o,n,i,l,s){return function(){var r={pixelOffset:new google.maps.Size(-39.5,16),disableAutoPan:!0},g=new google.maps.InfoWindow(r),c=new Date,u=c.getTime(),p=i.lifeend-u>=0?i.lifeend-u:0,d=(p/i.lifespan).toFixed(2);n.msg=i.body,n.postlife=p,n.postguid=i.guid,n.postguidtgt=i.guidtgt,n.postcouplestatus=l,n.postlifepercentage=d,n.postlocalstatus=s;var m="<div map-msg></div>",f=a(m)(n);g.setContent(f[0]),google.maps.event.addListener(g,"closeclick",function(){i.guid==e.guid&&swal({title:"Are you sure?",text:"You will not be able to recover this imaginary file!",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, delete it!",closeOnConfirm:!1},function(e){if(e)t.remove(i),swal("Deleted!","Your imaginary file has been deleted.","success");else{var a=new Date,l=a.getTime(),s=i.lifeend-l>=0?i.lifeend-l:0,r=(s/i.lifespan).toFixed(2);r>0&&(n.postlifepercentage=r,g.open(z,o))}})}),g.open(z,o)}}(g,h,i,m,f);y()}}}})}function p(t){var e=new google.maps.LatLng(t.lat,t.lon);if(r(),e.lat()<O.lat()&&e.lat()>R.lat()&&e.lng()<R.lng()&&e.lng()>O.lng()){var o={position:e,map:z,animation:google.maps.Animation.DROP,title:"UserPin",icon:Y},n=new google.maps.Marker(o);i(function(t){return function(){t.setMap(null)}}(n),2e3)}}function d(t){for(var e,o=0;e=J[o];o++)if(t==e.post._id){e.marker.setMap(null),J.splice(o,1);break}}function m(t){var e=new google.maps.LatLng(t.lat,t.lon);f(e),w(e),g()}function f(t){for(var e,o=0;e=U[o];o++)e.setMap(null);U=[];var e=new google.maps.Marker({position:t,map:z,icon:q});U.push(e)}function w(t){e.$emit("set:loc",t);var o=new google.maps.Geocoder;o.geocode({latLng:t},function(t,o){try{e.$emit("set:place",t[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),e.$emit("set:place","Location does not exists")}})}function v(t,o){var n=e.guidtgt==t,a=e.guid==o,i=e.guid==t,l="0"!=e.guidtgt;return i&&l?2:n&&a?4:n&&!a?1:!n&&a?2:0}function h(){var t=document.getElementById("map-search-toggle");z.controls[google.maps.ControlPosition.TOP_LEFT].push(t)}function y(){var t=document.getElementById("map-btn-curr");z.controls[google.maps.ControlPosition.TOP_RIGHT].push(t)}function _(){var t=document.getElementById("map-posting");z.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function L(){var t=document.getElementById("map-btn-submit");z.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function S(){var t=document.getElementById("map-time-slider");z.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(t)}function b(){var t=document.getElementById("pac-input");z.controls[google.maps.ControlPosition.TOP_LEFT].push(t);var e=new google.maps.places.SearchBox(t);google.maps.event.addListener(e,"places_changed",function(){var t=e.getPlaces();if(0!=t.length){var o=t[0],n={lat:o.geometry.location.lat(),lon:o.geometry.location.lng()};m(n),window.localStorage.latitude=o.geometry.location.latitude,window.localStorage.longitude=o.geometry.location.longitude,z.panTo(o.geometry.location),z.setZoom(16)}})}function k(){google.maps.event.addListener(E,"click",function(t){var e={lat:t.latLng.lat(),lon:t.latLng.lng()};m(e)})}function T(){google.maps.event.addListener(E,"center_changed",function(){s()})}function P(){google.maps.event.addListener(E,"bounds_changed",function(){r()})}function C(){google.maps.event.addListener(E,"dragend",function(){u(),g()})}function M(){google.maps.event.addListener(E,"resize",function(){u(),g()})}function $(){google.maps.event.addListener(E,"zoom_changed",function(){u(),g()})}function x(){N=isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)?0!=e.userLocation.lat&&0!=e.userLocation.lon?new google.maps.LatLng(e.userLocation.lat,e.userLocation.lon):new google.maps.LatLng(34.05,-118.24):new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude),D={center:N,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,F]},mapTypeId:F}}function B(){function t(t){}function e(t){google.maps.event.trigger(this,"drawXMarker",t)}function n(t){google.maps.event.trigger(this,"drawCurrLocationMarker",t)}function a(){google.maps.event.trigger(this,"updateAndDrawPosts")}function i(t){google.maps.event.trigger(this,"drawResponses",t)}function l(t){google.maps.event.trigger(this,"unDrawPost",t)}E=new google.maps.Map(o[0],D),t.prototype=E,t.prototype.drawXMarker=e,t.prototype.drawCurrLocationMarker=n,t.prototype.updateAndDrawPosts=a,t.prototype.drawResponses=i,t.prototype.unDrawPost=l,z=new t,google.maps.event.addListener(z,"drawXMarker",function(t){m(t)}),google.maps.event.addListener(z,"drawCurrLocationMarker",function(t){p(t)}),google.maps.event.addListener(z,"updateAndDrawPosts",function(){u()}),google.maps.event.addListener(z,"drawResponses",function(t){c(t)}),google.maps.event.addListener(z,"unDrawPost",function(t){d(t)})}function A(){var t=[{featureType:"water",elementType:"all",stylers:[{hue:"#7fc8ed"},{saturation:55},{lightness:-6},{visibility:"on"}]},{featureType:"water",elementType:"labels",stylers:[{hue:"#7fc8ed"},{saturation:55},{lightness:-6},{visibility:"off"}]},{featureType:"poi.park",elementType:"geometry",stylers:[{hue:"#83cead"},{saturation:1},{lightness:-15},{visibility:"on"}]},{featureType:"landscape",elementType:"geometry",stylers:[{hue:"#f3f4f4"},{saturation:-84},{lightness:59},{visibility:"on"}]},{featureType:"landscape",elementType:"labels",stylers:[{hue:"#ffffff"},{saturation:-100},{lightness:100},{visibility:"off"}]},{featureType:"road",elementType:"geometry",stylers:[{hue:"#ffffff"},{saturation:-100},{lightness:100},{visibility:"on"}]},{featureType:"road",elementType:"labels",stylers:[{hue:"#bbbbbb"},{saturation:-100},{lightness:26},{visibility:"on"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{hue:"#ffcc00"},{saturation:100},{lightness:-35},{visibility:"simplified"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{hue:"#ffcc00"},{saturation:100},{lightness:-22},{visibility:"on"}]},{featureType:"poi.school",elementType:"all",stylers:[{hue:"#d7e4e4"},{saturation:-60},{lightness:23},{visibility:"on"}]}],e={name:"Custom Style"},o=new google.maps.StyledMapType(t,e);z.mapTypes.set(F,o)}function I(){void 0===z&&(x(),B(),A()),e.$emit("set:map",z),h(),b(),y(),_(),L(),S(),k(),T(),C(),M(),$(),P(),i(function(){s(),r(),g(),u()},800)}var z,E,O,R,D,N,W,F="custom_style",U=[],J=[],G="0",X={url:"Default_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(1,1)},q={url:"X_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},Y={url:"Current_Location_Marker.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(20,33)};I(),e.initSession(),f(N),w(N)};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:l}}]),angular.module("app").directive("mapMsg",["$timeout","SessionSvc","PostsSvc",function(t,e,o){var n=function(n,a,i){function l(){var t=n.postguid,i=n.$parent.guid,l=n.$parent.guidtgt;a.children().on("click",function(){var a=t;if(t==i){if("0"==n.$parent.guidtgt)return;a="0"}t==l&&(a="0"),n.$emit("set:guidtgt",a),e.updateCoupling(i,a).then(function(t){});var s={guid:i,guidtgt:a};o.updateGuidtgt(s).then(function(t){})})}function s(){{var t=n.postlife+"ms",e=a.children().children(".postlifebar");e.css("-webkit-animation-duration",t)}if(n.postlifepercentage>.95){e.css("-webkit-animation-name","postlifeanim_a"),e.css("animation-name","postlifeanim_a")}else if(n.postlifepercentage<=.95&&n.postlifepercentage>.9){e.css("-webkit-animation-name","postlifeanim_b"),e.css("animation-name","postlifeanim_b")}else if(n.postlifepercentage<=.9&&n.postlifepercentage>.85){e.css("-webkit-animation-name","postlifeanim_c"),e.css("animation-name","postlifeanim_c")}else if(n.postlifepercentage<=.85&&n.postlifepercentage>.75){e.css("-webkit-animation-name","postlifeanim_d"),e.css("animation-name","postlifeanim_d")}else if(n.postlifepercentage<=.75&&n.postlifepercentage>.6){e.css("-webkit-animation-name","postlifeanim_e"),e.css("animation-name","postlifeanim_e")}else if(n.postlifepercentage<=.6&&n.postlifepercentage>.5){e.css("-webkit-animation-name","postlifeanim_f"),e.css("animation-name","postlifeanim_f")}else if(n.postlifepercentage<=.5&&n.postlifepercentage>.3){e.css("-webkit-animation-name","postlifeanim_g"),e.css("animation-name","postlifeanim_g")}else if(n.postlifepercentage<=.3&&n.postlifepercentage>.2){e.css("-webkit-animation-name","postlifeanim_h"),e.css("animation-name","postlifeanim_h")}else if(n.postlifepercentage<=.2&&n.postlifepercentage>.1){e.css("-webkit-animation-name","postlifeanim_i"),e.css("animation-name","postlifeanim_i")}else{e.css("-webkit-animation-name","postlifeanim_j"),e.css("animation-name","postlifeanim_j")}}function r(){var t=$(".gm-style-iw"),e=t.prev();e.children(":nth-child(2)").css({display:"none"}),e.children(":nth-child(4)").css({display:"none"}),e.children(":nth-child(3)").find("div").children().css({"box-shadow":"0 1px 6px rgba(178, 178, 178, 0.6)","z-index":"1",border:"0px"})}function g(){var t=$(".gm-style-iw"),e=t.next();e.css({opacity:"0.8",right:"20px",top:"20px"})}n.get_localstatus=function(t){return t?"local-text":"non-local-text"},n.get_coupling=function(t){return 4==t?"coupling coupling-couple":1==t?"coupling coupling-ilikeyou":2==t?"coupling coupling-youlikei":"coupling coupling-none"},angular.element(document).ready(function(){t(l,100),t(s,10),t(r,10),t(g,10)})};return{restrict:"A",templateUrl:"./templates/window.html",link:n}}]),angular.module("app").service("SessionSvc",["$http",function(t){this.fetch=function(){return t.get("/api/sessions")},this.enter=function(e){return e.devicetoken="0",t.post("/api/sessions",e)},this.remove=function(e){var o={guid:e};return t.put("/api/sessions",o)},this.updateWatchLocation=function(e,o,n,a){var i={nw_lat:e.lat,nw_lon:e.lon,se_lat:o.lat,se_lon:o.lon,center_lat:n.lat,center_lon:n.lon},l=JSON.stringify(i),s={watchloc:l,guid:a};return console.log("updating watch location"),t.post("/api/sessions/update_session",s)},this.updateCoupling=function(e,o){var n={guid:e,guidtgt:o};return console.log("updating coupling"),t.post("/api/sessions/update_coupling",n)}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","ConfigSvc","PostsSvc","UtilSvc","$window","$document","$timeout",function(t,e,o,n,a,i,l,s){e.$emit("set:pagechange",e.pageId.post),e.posts=[],e.$on("ws:new_post",function(t,o){e.requestFetch()}),e.addPost=function(){if(!e.content)return void console.log("User attempted to post with 0 words.");var t,i=e.postplace,l=e.postLocation,s=a.getDistanceFromLatLonInKm(l.lat,l.lon,e.userLocation.lat,e.userLocation.lon);console.log("post location from user location : ",s),3>s?(console.log("postLocationFromUserLocation < 3",3>s),t=!0):(console.log("postLocationFromUserLocation < 3",3>s),t=!1);var r,g=JSON.stringify(l);if(e.timevalue<=o.maxInstantLifeSpan){var c=e.content.length;r=5>c?4e3:c*a.mapRange(c,5,20,700,400)}else r=e.timevalue;n.create({body:e.content,location:g,place:i,guid:e.guid,guidtgt:e.guidtgt,lifespan:r,islocal:t}).success(function(t){e.content=null}).error(function(t,e){swal("Post failed","Please complete the from correctly","error")})},e.requestFetch=function(){n.fetch().success(function(t){e.posts=t})},e.updateGuidtgt=function(t,e){var o={guid:t,guidtgt:e};console.log("udpate to post guidtgt:",o),n.updateGuidtgt(o)}}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(e){return t.get("/api/posts",e)},this.create=function(e){return e.devicetoken="0",t.post("/api/posts",e)},this.remove=function(e){return t.post("/api/posts/posts_delete",e)},this.updateGuidtgt=function(e){return t.post("/api/posts/update_guidtgt",e)}}]);
//# sourceMappingURL=data:application/json;base64,