angular.module("app",["ngRoute","duScroll"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window","$http",function(o,t,e,n){function a(){function o(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return o()+o()+"-"+o()+"-"+o()+"-"+o()+"-"+o()+o()+o()}t.curr_platform=navigator.platform,t.guid=a(),t.guidtgt="0",t.$on("set:guidtgt",function(o,e){console.log("setting guidtgt",e),t.guidtgt=e}),t.pageId={post:0},t.navCollapsed=!0,t.collapse=function(){t.navCollapsed=!0},t.$on("ws:new_post",function(o,e){google.maps.event.trigger(t.map,"maptypeid_changed")}),t.moveToCurrentLocation=function(){function o(o){if(t.currentPageId==t.pageId.post){var e=o.coords;window.localStorage.latitude=e.latitude,window.localStorage.longitude=e.longitude;var n=new google.maps.LatLng(e.latitude,e.longitude);google.maps.event.trigger(t.map,"heading_changed",n),t.map.panTo(n),t.map.setZoom(15)}}function e(o){console.warn("ERROR("+o.code+"): "+o.message)}navigator.geolocation.getCurrentPosition(o,e),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},t.$on("pagechange",function(o,e){t.currentPageId=e}),t.$on("loc",function(o,e){console.log("IN:",e);var n=e.lat(),a=e.lng();t.postLocation={lat:n,lon:a},console.log("SAVED:",t.postLocation)}),t.$on("place",function(o,e){t.$apply(function(){t.postplace=e,console.log("SAVED:",t.postplace)})}),t.$on("mapInit",function(o,e){t.map=e,google.maps.event.trigger(t.map,"center_changed")})}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var o=this;o.deg2rad=function(o){return o*(Math.PI/180)},o.getDistanceFromLatLonInKm=function(t,e,n,a){var i=6371,l=o.deg2rad(n-t),s=o.deg2rad(a-e),c=Math.sin(l/2)*Math.sin(l/2)+Math.cos(o.deg2rad(t))*Math.cos(o.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),g=2*Math.atan2(Math.sqrt(c),Math.sqrt(1-c)),r=i*g;return r}}),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","$compile","$timeout",function(o,t,e,n){var a=function(t,a,i,l){function s(o){for(var t,e=0;t=I[e];e++)t.setMap(null);I=[];var t=new google.maps.Marker({position:o,map:S,icon:$});I.push(t)}function c(){for(var o,t=0;o=I[t];t++)o.setMap(null);I=[]}function g(o){var e=new google.maps.Geocoder;t.$emit("loc",o),s(o),e.geocode({latLng:o},function(o,e){try{t.$emit("place",o[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),t.$emit("place","Location does not exists")}})}function r(){o.fetch().success(function(o){for(var n=0;n<o.length;n++){for(var a,i=o[n],l=0;a=C[l];l++)if(i._id==a.post._id){i=null;break}if(i&&i.hasOwnProperty("location")){var s=angular.fromJson(i.location),c=new google.maps.LatLng(s.lat,s.lon),g=0,r=t.guidtgt==i.guid,u=t.guid==i.guidtgt;if(g=r&&u?4:r&&!u?1:!r&&u?2:0,c.lat()<b.lat()&&c.lat()>P.lat()&&c.lng()<P.lng()&&c.lng()>b.lng()){var p={position:c,map:S,title:"Bubble",icon:L},a=new google.maps.Marker(p);setTimeout(function(o,t){return function(){o.setMap(null);for(var e,n=0;e=C[n];n++)t._id==e.post._id&&C.splice(n,1)}}(a,i),i.lifespan),C.push({marker:a,post:i});var d=t,m=d.$new(!0),f=function(o,t,n,a){return function(){var i={pixelOffset:new google.maps.Size(-41.5,10)},l=new google.maps.InfoWindow(i),s="<div map-msg></div>",c=e(s)(t);t.msg=n.body,t.postlife=n.lifespan,t.postguid=n.guid,t.postguidtgt=n.guidtgt,t.postcouplestatus=a,console.log("coupling_status",t.postcouplestatus),l.setContent(c[0]),l.open(S,o)}}(a,m,i,g);f()}}}})}function u(){var o=document.getElementById("pac-input"),t=document.getElementById("btn-curr");S.controls[google.maps.ControlPosition.TOP_LEFT].push(o),S.controls[google.maps.ControlPosition.TOP_RIGHT].push(t);var e=new google.maps.places.SearchBox(o);google.maps.event.addListener(e,"places_changed",function(){var o=e.getPlaces();if(0!=o.length){var t=o[0];g(t.geometry.location),window.localStorage.latitude=t.geometry.location.latitude,window.localStorage.longitude=t.geometry.location.longitude,S.panTo(t.geometry.location),S.setZoom(16)}})}function p(){google.maps.event.addListener(S,"click",function(o){g(o.latLng)})}function d(){google.maps.event.addListener(S,"heading_changed",function(o){g(o)})}function m(){google.maps.event.addListener(S,"center_changed",function(){window.localStorage.latitude=S.getCenter().lat(),window.localStorage.longitude=S.getCenter().lng(),w()})}function f(){google.maps.event.addListener(S,"dragend",function(){r()})}function w(){var o=S.getBounds(),t=o.getNorthEast(),e=o.getSouthWest();b=new google.maps.LatLng(t.lat(),e.lng()),P=new google.maps.LatLng(e.lat(),t.lng())}function v(){google.maps.event.addListener(S,"maptypeid_changed",function(){c(),r()})}function h(){void 0===S&&(S=new google.maps.Map(a[0],M)),v(),t.$emit("mapInit",S),p(),u(),m(),d(),f(),r(),n(function(){w()},800)}var S,b,P,L={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,25)},$={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},_=new google.maps.LatLng(34.05,-118.24);isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(_=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),console.log("Initial Map Center:",_);var y=!0;"iPhone"==t.curr_platform&&(y=!1);var M={center:_,zoom:15,MapTypeId:google.maps.MapTypeId.ROADMAP,scrollwheel:!1,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:y},I=[],C=[];h()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:a}}]),angular.module("app").directive("mapMsg",["$timeout",function(o){return{restrict:"A",templateUrl:"./templates/window.html",link:function(t,e){var n=t.postlife+"ms",a=t.postguid,i=t.msg;t.get_coupling=function(o){return 4==o?"bubblePost bubblePost_couple":1==o?"bubblePost bubblePost_ilikeyou":2==o?"bubblePost bubblePost_youlikei":"bubblePost bubblePost_none"},angular.element(document).ready(function(){o(function(){$("div div .postlifebar").css("animation-duration",n),console.log("Jquery called :"+n+" and msg:"+i),$("div div #bubbleClick").click(function(){a==t.guid&&console.log(""),t.postcouplestatus=1,console.log("emit set:guidtgt",a),t.$emit("set:guidtgt",a)})},2)})}}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","PostsSvc","$window","$document",function(o,t,e,n,a){t.$emit("pagechange",t.pageId.post),t.posts=[],t.$on("ws:new_post",function(o,e){t.requestFetch()}),t.moveToLoc=function(o){var e=t.posts[o],n=angular.fromJson(e.location),i=new google.maps.LatLng(n.lat,n.lon);t.map.panTo(i),t.map.setZoom(16);var l=0,s=480;a.scrollTop(l,s).then(function(){console&&console.log("You just scrolled to the top!")})},t.addPost=function(){var o=t.postplace,n=t.postLocation,a=JSON.stringify(n);console.log("POST location:",a),console.log("POST place:",o),console.log("POST guid:",t.guid),console.log("POST guidtgt:",t.guidtgt),e.create({body:t.content,location:a,place:o,guid:t.guid,guidtgt:t.guidtgt}).success(function(o){google.maps.event.trigger(t.map,"maptypeid_changed"),t.posts.unshift(o);var e=function(){for(var e=0;e<t.posts.length;++e)o._id==t.posts[e]._id&&t.posts.splice(e,1)};setTimeout(e,o.lifespan),t.content=null}).error(function(o,t){swal("Post failed","Please complete the from correctly","error")})},t.requestFetch=function(){e.fetch().success(function(o){t.posts=o})},t.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(t){return o.post("/api/posts",t)},this.remove=function(t){return console.log("deleting posting"),console.log("post._id:",t._id),o.put("/api/posts",t)}}]),angular.module("app").run(["$rootScope","$timeout",function(o,t){var e,n=document.location.hostname,a="192.168.0.4";e="localhost"==n?"ws://localhost:5000":n==a?"ws://192.168.0.4:5000":"wss://frozen-badlands-8649.herokuapp.com";var i=function(){connection=new WebSocket(e),connection.onopen=function(){console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),t(i,2e3)},connection.onmessage=function(t){console.log(t);var e=JSON.parse(t.data);o.$broadcast("ws:"+e.type,e.data)}};i()}]);
//# sourceMappingURL=data:application/json;base64,