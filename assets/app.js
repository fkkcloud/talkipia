angular.module("app",["ngRoute","duScroll"]),angular.module("app").controller("ApplicationCtrl",["$rootScope","$scope","$window","$http",function(e,o,t,n){function a(){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}o.isMobile=function(){return navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/webOS/i)||navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/iPod/i)||navigator.userAgent.match(/BlackBerry/i)||navigator.userAgent.match(/Windows Phone/i)?!0:!1},o.guid=a(),o.guidtgt="0",o.$on("set:guidtgt",function(e,t){console.log("setting guidtgt",t),o.guidtgt=t}),o.pageId={post:0},o.navCollapsed=!0,o.collapse=function(){o.navCollapsed=!0},o.$on("ws:new_post",function(e,t){google.maps.event.trigger(o.map,"maptypeid_changed")}),o.$on("pagechange",function(e,t){o.currentPageId=t}),o.$on("loc",function(e,t){var n=t.lat(),a=t.lng();o.postLocation={lat:n,lon:a}}),o.$on("place",function(e,t){o.$apply(function(){o.postplace=t})}),o.$on("mapInit",function(e,t){o.map=t,google.maps.event.trigger(o.map,"center_changed")}),o.moveToCurrentLocation=function(){function e(e){if(o.currentPageId==o.pageId.post){var t=e.coords;window.localStorage.latitude=t.latitude,window.localStorage.longitude=t.longitude;var n=new google.maps.LatLng(t.latitude,t.longitude);google.maps.event.trigger(o.map,"heading_changed",n),o.map.panTo(n),o.map.setZoom(15)}}function t(e){console.warn("ERROR("+e.code+"): "+e.message)}navigator.geolocation.getCurrentPosition(e,t),swal({title:"",text:"Moving to current location..",timer:1500,showConfirmButton:!1})},o.moveToPostLocation=function(){var e=0;if(o.isMobile()){var t=o.map.getBounds(),n=t.getNorthEast(),a=t.getSouthWest();current_map_nw=new google.maps.LatLng(n.lat(),a.lng()),current_map_se=new google.maps.LatLng(a.lat(),n.lng());var i=.5*Math.abs(o.postLocation.lat-current_map_nw.lat()),l=.5*Math.abs(o.postLocation.lat-current_map_se.lat());e=i>l?l:i}var s=new google.maps.LatLng(o.postLocation.lat+e,o.postLocation.lon);o.map.panTo(s)}}]),angular.module("app").config(["$routeProvider",function(e){e.when("/",{controller:"PostsCtrl",templateUrl:"/templates/posts.html"}).otherwise({redirectTo:"/"})}]),angular.module("app").service("UtilSvc",function(){var e=this;e.deg2rad=function(e){return e*(Math.PI/180)},e.getDistanceFromLatLonInKm=function(o,t,n,a){var i=6371,l=e.deg2rad(n-o),s=e.deg2rad(a-t),r=Math.sin(l/2)*Math.sin(l/2)+Math.cos(e.deg2rad(o))*Math.cos(e.deg2rad(n))*Math.sin(s/2)*Math.sin(s/2),c=2*Math.atan2(Math.sqrt(r),Math.sqrt(1-r)),g=i*c;return g}}),angular.module("app").directive("appMap",["PostsSvc","UtilSvc","$compile","$timeout",function(e,o,t,n){var a=function(o,a,i,l){function s(e){for(var o,t=0;o=B[t];t++)o.setMap(null);B=[];var o=new google.maps.Marker({position:e,map:S,icon:C});B.push(o)}function r(){for(var e,o=0;e=B[o];o++)e.setMap(null);B=[]}function c(e){o.$emit("loc",e);var t=new google.maps.Geocoder;t.geocode({latLng:e},function(e,t){try{o.$emit("place",e[1].formatted_address)}catch(n){console.log(n),swal("","Location does not exists"),o.$emit("place","Location does not exists")}})}function g(e){s(e),c(e)}function p(e,t){var n=o.guidtgt==e,a=o.guid==t;return n&&a?4:n&&!a?1:!n&&a?2:0}function u(){e.fetch().success(function(e){for(var n=0;n<e.length;n++){for(var a,i=e[n],l=0;a=E[l];l++)if(i._id==a.post._id){i=null;break}if(i&&i.hasOwnProperty("location")){var s=angular.fromJson(i.location),r=new google.maps.LatLng(s.lat,s.lon);if(r.lat()<_.lat()&&r.lat()>$.lat()&&r.lng()<$.lng()&&r.lng()>_.lng()){var c=p(i.guid,i.guidtgt),g={position:r,map:S,title:"Bubble",icon:M},a=new google.maps.Marker(g);setTimeout(function(e,o){return function(){e.setMap(null);for(var t,n=0;t=E[n];n++)o._id==t.post._id&&E.splice(n,1)}}(a,i),i.lifespan),E.push({marker:a,post:i});var u=o,d=u.$new(!0),m=function(e,o,n,a){return function(){var i={pixelOffset:new google.maps.Size(-41.5,10),disableAutoPan:!0},l=new google.maps.InfoWindow(i),s="<div map-msg></div>",r=t(s)(o);o.msg=n.body,o.postlife=n.lifespan,o.postguid=n.guid,o.postguidtgt=n.guidtgt,o.postcouplestatus=a,l.setContent(r[0]),l.open(S,e)}}(a,d,i,c);m()}}}})}function d(){var e=document.getElementById("btn-curr");S.controls[google.maps.ControlPosition.TOP_RIGHT].push(e)}function m(){var e=document.getElementById("posting");S.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(e)}function f(){var e=document.getElementById("btn-submit");S.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(e)}function v(){var e=document.getElementById("pac-input");S.controls[google.maps.ControlPosition.TOP_LEFT].push(e);var o=new google.maps.places.SearchBox(e);google.maps.event.addListener(o,"places_changed",function(){var e=o.getPlaces();if(0!=e.length){var t=e[0];g(t.geometry.location),window.localStorage.latitude=t.geometry.location.latitude,window.localStorage.longitude=t.geometry.location.longitude,S.panTo(t.geometry.location),S.setZoom(16)}})}function y(){google.maps.event.addListener(S,"click",function(e){g(e.latLng)})}function h(){google.maps.event.addListener(S,"heading_changed",function(e){g(e)})}function w(){google.maps.event.addListener(S,"center_changed",function(){window.localStorage.latitude=S.getCenter().lat(),window.localStorage.longitude=S.getCenter().lng(),P()})}function T(){google.maps.event.addListener(S,"dragend",function(){u()})}function b(){google.maps.event.addListener(S,"maptypeid_changed",function(){r(),u()})}function P(){var e=S.getBounds(),o=e.getNorthEast(),t=e.getSouthWest();_=new google.maps.LatLng(o.lat(),t.lng()),$=new google.maps.LatLng(t.lat(),o.lng())}function L(){if(void 0===S){S=new google.maps.Map(a[0],A);var e={name:"Custom Style"},t=new google.maps.StyledMapType(k,e);S.mapTypes.set(I,t)}b(),o.$emit("mapInit",S),y(),v(),d(),m(),f(),w(),h(),T(),u(),n(function(){P()},800)}var S,_,$,M={url:"https://catchme.ifyoucan.com/images/pictures/IYC_Icons/IYC_Location_Icon_Small.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(17,25)},C={url:"http://www.clker.com/cliparts/U/P/j/M/I/i/x-mark-yellow-md.png",size:new google.maps.Size(100,100),origin:new google.maps.Point(0,0),anchor:new google.maps.Point(17,34),scaledSize:new google.maps.Size(25,25)},I="custom_style",k=[{featureType:"administrative",elementType:"labels.text.fill",stylers:[{color:"#6195a0"}]},{featureType:"landscape",elementType:"all",stylers:[{color:"#f2f2f2"}]},{featureType:"landscape",elementType:"geometry.fill",stylers:[{color:"#ffffff"}]},{featureType:"poi",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"poi.park",elementType:"geometry.fill",stylers:[{color:"#e6f3d6"},{visibility:"on"}]},{featureType:"road",elementType:"all",stylers:[{saturation:-100},{lightness:45},{visibility:"simplified"}]},{featureType:"road.highway",elementType:"all",stylers:[{visibility:"simplified"}]},{featureType:"road.highway",elementType:"geometry.fill",stylers:[{color:"#f4d2c5"},{visibility:"simplified"}]},{featureType:"road.highway",elementType:"labels.text",stylers:[{color:"#4e4e4e"}]},{featureType:"road.arterial",elementType:"geometry.fill",stylers:[{color:"#f4f4f4"}]},{featureType:"road.arterial",elementType:"labels.text.fill",stylers:[{color:"#787878"}]},{featureType:"road.arterial",elementType:"labels.icon",stylers:[{visibility:"off"}]},{featureType:"transit",elementType:"all",stylers:[{visibility:"off"}]},{featureType:"water",elementType:"all",stylers:[{color:"#eaf6f8"},{visibility:"on"}]},{featureType:"water",elementType:"geometry.fill",stylers:[{color:"#eaf6f8"}]}],O=new google.maps.LatLng(34.05,-118.24);isNaN(window.localStorage.latitude)||isNaN(window.localStorage.longitude)||(O=new google.maps.LatLng(window.localStorage.latitude,window.localStorage.longitude)),c(O);var A={center:O,zoom:15,scrollwheel:!0,streetViewControl:!1,mapTypeControl:!1,panControl:!1,zoomControl:!1,mapTypeControlOptions:{mapTypeIds:[google.maps.MapTypeId.ROADMAP,I]},mapTypeId:I},B=[],E=[];L()};return{restrict:"A",template:'<div id="map-canvas"></div>',replace:!0,link:a}}]),angular.module("app").directive("mapMsg",["$timeout",function(e){return{restrict:"A",templateUrl:"./templates/window.html",link:function(o,t,n){o.get_coupling=function(e){return 4==e?"bubblePost bubblePost_couple":1==e?"bubblePost bubblePost_ilikeyou":2==e?"bubblePost bubblePost_youlikei":"bubblePost bubblePost_none"},angular.element(document).ready(function(){var n=o.postguid,a=o.$parent.guid;t.parent().find("div div #bubbleClick").on("click",function(){console.log("window clicked."),n!=a&&(console.log("emit set:guidtgt",n),o.$emit("set:guidtgt",n))}),e(function(){{var e=o.postlife+"ms";t.parent().find("div div .postlifebar").css("animation-duration",e)}},100)})}}}]),angular.module("app").controller("PostsCtrl",["$rootScope","$scope","PostsSvc","$window","$document",function(e,o,t,n,a){o.$emit("pagechange",o.pageId.post),o.posts=[],o.$on("ws:new_post",function(e,t){o.requestFetch()}),o.moveToLoc=function(e){var t=o.posts[e],n=angular.fromJson(t.location),i=new google.maps.LatLng(n.lat,n.lon);o.map.panTo(i),o.map.setZoom(16);var l=0,s=480;a.scrollTop(l,s).then(function(){console&&console.log("You just scrolled to the top!")})},o.addPost=function(){var e=o.postplace,n=o.postLocation,a=JSON.stringify(n);console.log("POST location:",a),console.log("POST place:",e),console.log("POST guid:",o.guid),console.log("POST guidtgt:",o.guidtgt),t.create({body:o.content,location:a,place:e,guid:o.guid,guidtgt:o.guidtgt}).success(function(e){google.maps.event.trigger(o.map,"maptypeid_changed"),o.posts.unshift(e);var t=function(){for(var t=0;t<o.posts.length;++t)e._id==o.posts[t]._id&&o.posts.splice(t,1)};setTimeout(t,e.lifespan),o.content=null}).error(function(e,o){swal("Post failed","Please complete the from correctly","error")})},o.requestFetch=function(){t.fetch().success(function(e){o.posts=e})},o.requestFetch()}]),angular.module("app").service("PostsSvc",["$http",function(e){this.fetch=function(){return e.get("/api/posts")},this.create=function(o){return e.post("/api/posts",o)},this.remove=function(o){return console.log("deleting posting"),console.log("post._id:",o._id),e.put("/api/posts",o)}}]),angular.module("app").run(["$rootScope","$timeout",function(e,o){var t,n=document.location.hostname,a="192.168.0.4";t="localhost"==n?"ws://localhost:5000":n==a?"ws://192.168.0.4:5000":"wss://cloudtalk.herokuapp.com";var i=function(){connection=new WebSocket(t),connection.onopen=function(){console.log("WebSocket connected")},connection.onclose=function(){console.log("WebSocket closed. Reconecting..."),o(i,2e3)},connection.onmessage=function(o){console.log(o);var t=JSON.parse(o.data);e.$broadcast("ws:"+t.type,t.data)}};i()}]);
//# sourceMappingURL=data:application/json;base64,