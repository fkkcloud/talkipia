angular.module('app').controller('PostsCtrl', function ($rootScope, $scope, ConfigSvc, PostsSvc, UtilSvc, $window, $document, $timeout){	/* emit broadcast for current pageId */	$scope.$emit('set:pagechange', $scope.pageId.post);	$scope.posts = [];	/* as server tells there was new post, lets re-load list data */	$scope.$on('ws:new_post', function(_, post){		$scope.requestFetch();	});	$scope.addPost = function() {		/* get autocompleted place and reset(set to undefined) */		var place    = $scope.postplace;		var location = $scope.postLocation;		var local_status;		var postLocationFromUserLocation = UtilSvc.getDistanceFromLatLonInKm(location.lat, location.lon, $scope.userLocation.lat, $scope.userLocation.lon);		console.log("post location from user location : ", postLocationFromUserLocation);		/* if less than 3km */		if (postLocationFromUserLocation < 3){			console.log("postLocationFromUserLocation < 3", (postLocationFromUserLocation < 3));			local_status = true;		}		else {			console.log("postLocationFromUserLocation < 3", (postLocationFromUserLocation < 3));			local_status = false;		}				var locationJSON = JSON.stringify(location);		var relativeLifeSpan;		if ($scope.timevalue <= ConfigSvc.maxInstantLifeSpan){			var charLen = $scope.content.length;			if (charLen < 5)			{				relativeLifeSpan = 4000;			}			else			{				relativeLifeSpan = charLen * UtilSvc.mapRange(charLen, 5, 20, 700, 400);			}		}		else {			relativeLifeSpan = $scope.timevalue;		}		PostsSvc.create(		{			body    :  $scope.content,			location:  locationJSON,			place   :  place,			guid    :  $scope.guid,			guidtgt :  $scope.guidtgt,			lifespan:  relativeLifeSpan,			islocal :  local_status		})		.success(function(post){			/* $scope.posts.unshift(post); */			/* 	maxInstantLifeSpan 보다 긴 경우의 것만 서버가 계산을 하고, 				서버가 보내줘서 frontend에서 지우도록 관리해줘야 한다. */            var maxInstantLifeSpan = ConfigSvc.maxInstantLifeSpan;            if (post.lifespan < maxInstantLifeSpan){            	/* front end side list post remove */				var frontEndPostRemove = function(){ 					for (var i = 0; i < $scope.posts.length; ++i){						if (post._id == $scope.posts[i]._id)						{							$scope.posts.splice(i, 1);						}					}				};				$timeout(frontEndPostRemove, post.lifespan);            }						/* reset input forms */			$scope.content  = null;		})		.error(function(data, status){			swal("Post failed", "Please complete the from correctly", "error");		});	};	/* as server tells there was new post, lets re-load list data */	$scope.requestFetch = function() {		PostsSvc.fetch()		.success(function(posts){			$scope.posts = posts;		});	};	/* update guid of post */	$scope.updateGuidtgt = function(myguid, guidtgt) {		var updates = {			guid    : myguid,			guidtgt : guidtgt		};		console.log("udpate to post guidtgt:", updates)		PostsSvc.updateGuidtgt(updates);	}	/*$scope.requestFetch();*/});